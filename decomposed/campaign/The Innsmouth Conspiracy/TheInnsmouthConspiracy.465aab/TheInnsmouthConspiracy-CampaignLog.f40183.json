{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomTile": {
      "Stackable": false,
      "Stretch": true,
      "Thickness": 0.1,
      "Type": 0
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "https://steamusercontent-a.akamaihd.net/ugc/1626320664132229615/137B40B3DFB0FF1D7FCC2D3BB67989CB89030E47/",
    "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1626320664132228784/5EF35A0D9805878E46578143570DCD7526319F70/",
    "WidthScale": 0
  },
  "Description": "Page 1",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "f40183",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "require(\"TheInnsmouthConspiracy/CampaignLog1\")",
  "LuaScriptState": "",
  "MeasureMovement": false,
  "Name": "Custom_Tile",
  "Nickname": "The Innsmouth Conspiracy - Campaign Log",
  "Snap": true,
  "States": {
    "2": {
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "Autoraise": true,
      "ColorDiffuse": {
        "b": 1,
        "g": 1,
        "r": 1
      },
      "CustomImage": {
        "CustomTile": {
          "Stackable": false,
          "Stretch": true,
          "Thickness": 0.1,
          "Type": 0
        },
        "ImageScalar": 1,
        "ImageSecondaryURL": "https://steamusercontent-a.akamaihd.net/ugc/1626320664132229615/137B40B3DFB0FF1D7FCC2D3BB67989CB89030E47/",
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1626320664132232101/81F6ECC6E6248F522561D4C3177F3C3F7F15DB75/",
        "WidthScale": 0
      },
      "Description": "Page 2",
      "DragSelectable": true,
      "GMNotes": "",
      "GUID": "4e2191",
      "Grid": true,
      "GridProjection": false,
      "Hands": false,
      "HideWhenFaceDown": false,
      "IgnoreFoW": false,
      "LayoutGroupSortIndex": 0,
      "Locked": false,
      "LuaScript": "\t--[[    Character Sheet Template    by: MrStump\n\n\tYou can set up your own character sheet if you follow these steps.\n\n\tStep 1) Change the character sheet image\n\t\t-Right click on the character sheet, click Custom\n\t\t-Replace the image URL with one for your character sheet\n\t\t-Click import, make sure your sheet loads\n\t\t-SAVE THE GAME (the table setup)\n\t\t-LOAD FROM THAT SAVE YOU JUST MADE\n\n\tStep 2) Edit script to fit your character sheet\n\t\t-Below you will see some general options, and then the big data table\n\t\t-The data table is what determines how many of which buttons are made\n\t\t\t-Checkboxes\n\t\t\t-Counters\n\t\t\t-Textboxes\n\t\t-By default, there are 3 of each. You can add more or remove entries\n\t\t-If you intend to add/remove, be sure only to add/remove ENTRIES\n\t\t\t-This is what an entry looks like:\n\t\t\t\t{\n\t\t\t\t\tpos   = {-0.977,0.1,-0.589},\n\t\t\t\t\tsize  = 800,\n\t\t\t\t\tstate = false\n\t\t\t\t},\n\t\t\t-Deleting the whole thing would remove that specific item on the sheet\n\t\t\t-Copy and pasting it after another entry would create another\n\t\t-Each entry type has unique data points (pos, size, state, etc)\n\t\t\t-Do not try to add in your own data points or remove them individually\n\t\t\t-There is a summary of what each point does at the top of its category\n\n\tStep 3) Save and check script changes\n\t\t-Hit Save \u0026 Apply in the script window to save your code\n\t\t-You can edit your code as needed and Save+Apply as often as needed\n\t\t-When you are finished, make disableSave = false below then Save+apply\n\t\t\t-This enables saving, so your sheet will remember whats on it.\n\n\tBonus) Finding/Editing Positions for elements\n\t\tI have included a tool to get positions for buttons in {x,y,z} form\n\t\tPlace it where you want the center of your element to be\n\t\tThen copy the table from the notes (lower right of screen)\n\t\t\tYou can highlight it and CTRL+C\n\t\tPaste it into the data table where needed (pos=)\n\t\tIf you want to manually tweek the values:\n\t\t\t{0,0,0} is the center of the character sheet\n\t\t\t{1,0,0} is right, {-1,0,0} is left\n\t\t\t{0,0,-1} is up, {0,0,1} is down\n\t\t\t0.1 for Y is the height off of the page.\n\t\t\t\tIf it was 0, it would be down inside the model of the sheet\n\n\tBegin editing below:    ]]\n\n\t--Set this to true while editing and false when you have finished\n\tdisableSave = false\n\t--Remember to set this to false once you are done making changes\n\t--Then, after you save \u0026 apply it, save your game too\n\n\t--Color information for button text (r,g,b, values of 0-1)\n\tbuttonFontColor = {0,0,0}\n\t--Color information for button background\n\tbuttonColor = {0.902,0.886,0.788}\n\t--Change scale of button (Avoid changing if possible)\n\tbuttonScale = {0.1,0.1,0.1}\n\n\t--This is the button placement information\n\tdefaultButtonData = {\n\t  --Add checkboxes\n\t  checkbox = {\n\t\t  --[[\n\t\t  pos   = the position (pasted from the helper tool)\n\t\t  size  = height/width/font_size for checkbox\n\t\t  state = default starting value for checkbox (true=checked, false=not)\n\t\t  ]]\n\t\t  --1 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.741,0.1,-0.78},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --2 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.67,0.1,-0.593},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --3 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.755,0.1,-0.376},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --4 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.659,0.1,-0.301},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --5 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.776,0.1,-0.095},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --6 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.769,0.1,0.001},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --7 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.726,0.1,0.149},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --8 checkbox\n\t\t  {\n\t\t\t  pos   = {-0.744,0.1,0.297},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Brian\n\t\t  {\n\t\t\t  pos   = {-0.781,0.1,0.755},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Othera\n\t\t  {\n\t\t\t  pos   = {-0.779,0.1,0.822},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Joyce\n\t\t  {\n\t\t\t  pos   = {-0.775,0.1,0.891},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Barnabas\n\t\t  {\n\t\t\t  pos   = {-0.478,0.1,0.72},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Zadok\n\t\t  {\n\t\t\t  pos   = {-0.47,0.1,0.781},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Robert\n\t\t  {\n\t\t\t  pos   = {-0.467,0.1,0.854},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Innsmouth Jail\n\t\t  {\n\t\t\t  pos   = {-0.152,0.1,0.677},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Shoeward Slums\n\t\t  {\n\t\t\t  pos   = {-0.143,0.1,0.751},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Sawbone Alley\n\t\t  {\n\t\t\t  pos   = {-0.133,0.1,0.826},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --House on Water Street\n\t\t  {\n\t\t\t  pos   = {0.152,0.1,0.643},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --Order of Dagon\n\t\t  {\n\t\t\t  pos   = {0.156,0.1,0.715},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\t\t  --New Church Green\n\t\t  {\n\t\t\t  pos   = {0.165,0.1,0.787},\n\t\t\t  size  = 250,\n\t\t\t  state = false\n\t\t  },\n\n\t\t  --End of checkboxes\n\t  },\n\t\t--Add counters that have a + and - button\n\t\tcounter = {\n\t\t\t--[[\n\t\t\tpos    = the position (pasted from the helper tool)\n\t\t\tsize   = height/width/font_size for counter\n\t\t\tvalue  = default starting value for counter\n\t\t\thideBG = if background of counter is hidden (true=hidden, false=not)\n\t\t\t]]\n\n\t\t\t--Slot four xp 1\n\t--        {\n\t--            pos    = {0.78,0.1,-0.54},\n\t--            size   = 300,\n\t--            value  = 0,\n\t--            hideBG = true\n\t--        },\n\n\t\t\t--End of counters\n\t\t},\n\t\t--Add editable text boxes\n\t\ttextbox = {\n\t\t\t--[[\n\t\t\tpos       = the position (pasted from the helper tool)\n\t\t\trows      = how many lines of text you want for this box\n\t\t\twidth     = how wide the text box is\n\t\t\tfont_size = size of text. This and \"rows\" effect overall height\n\t\t\tlabel     = what is shown when there is no text. \"\" = nothing\n\t\t\tvalue     = text entered into box. \"\" = nothing\n\t\t\talignment = Number to indicate how you want text aligned\n\t\t\t\t\t\t(1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)\n\t\t\t]]\n\t\t\t--Slot one player\n\n\t\t\t--Chaos Bag\n\t\t\t{\n\t\t\t\tpos       = {0.8,0.1,0.25},\n\t\t\t\trows      = 12,\n\t\t\t\twidth     = 1500,\n\t\t\t\tfont_size = 150,\n\t\t\t\tlabel     = \"Click to type\",\n\t\t\t\tvalue     = \"\",\n\t\t\t\talignment = 2\n\t\t\t},\n\t\t\t--End of textboxes\n\t\t}\n\t}\n\n\n\n\t--Lua beyond this point, I recommend doing something more fun with your life\n\n\n\n--Save function\nlocal alreadySaving = false -- Copy this too!\nfunction updateSave()\n\n    function string.replaceText(text, old, new)\n      local b,e = text:find(old,1,true)\n      if b==nil then\n         return text\n      else\n         return text:sub(1,b-1) .. new .. text:sub(e+1)\n      end\n    end\n\n    function wait(time)\n      local start = os.time()\n      repeat coroutine.yield(0) until os.time() \u003e start + time\n    end\n\n    function deepcopy(orig)\n      local orig_type = type(orig)\n      local copy\n      if orig_type == 'table' then\n          copy = {}\n          for orig_key, orig_value in next, orig, nil do\n              copy[deepcopy(orig_key)] = deepcopy(orig_value)\n          end\n          setmetatable(copy, deepcopy(getmetatable(orig)))\n      else -- number, string, boolean, etc\n          copy = orig\n      end\n      return copy\n    end\n\n    function startSaving()\n      while alreadySaving do\n        wait(0.01)\n      end\n    alreadySaving = true\n    local ref_buttonData = deepcopy(ref_buttonData)\n    local input_values = {}\n    local checkbox_values = {}\n    local counter_values = {}\n\n    local GUID = self.getGUID()\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.textbox) do\n        if val.value ~= nil then\n          input_values[counter] = val.value\n          val.value = \"u\"..GUID..\":iv:\"..counter..\"u\"\n          counter = counter + 1\n        end\n        if val.label ~= nil then\n          input_values[counter] = val.label\n          val.label = \"u\"..GUID..\":iv:\"..counter..\"u\"\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.checkbox) do\n        if val.value ~= nil then\n          checkbox_values[counter] = val.value\n          val.value = \"u\"..GUID..\":bv:\"..counter..\"u\"\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.counter) do\n        if val.value ~= nil then\n          counter_values[counter] = val.value\n          val.value = \"u\"..GUID..\":cv:\"..counter..\"u\"\n          counter = counter + 1\n          if val.counters ~= nil then\n            for _, val2 in ipairs(val.counters) do\n              if val2.value ~= nil then\n                counter_values[counter] = val2.value\n                val2.value = \"u\"..GUID..\":cv:\"..counter..\"u\"\n                counter = counter + 1\n              end\n              if val2.change_value ~= nil then\n                counter_values[counter] = val2.change_value\n                val2.change_value = \"u\"..GUID..\":cv:\"..counter..\"u\"\n                counter = counter + 1\n              end\n            end\n          end\n\n        end\n    end\n\n    saved_data = JSON.encode(ref_buttonData)\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.textbox) do\n        if val.value ~= nil then\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":iv:\"..counter..\"u\", string.gsub(input_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          val.value = input_values[counter]\n          counter = counter + 1\n        end\n        if val.label ~= nil then\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":iv:\"..counter..\"u\", string.gsub(input_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          val.label = input_values[counter]\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.checkbox) do\n        if val.value ~= nil then\n          val.value = checkbox_values[counter]\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":bv:\"..counter..\"u\", string.gsub(checkbox_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.counter) do\n        if val.value ~= nil then\n          val.value = counter_values[counter]\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":cv:\"..counter..\"u\", string.gsub(counter_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          counter = counter + 1\n\n          if val.counters ~= nil then\n            for _, val2 in ipairs(val.counters) do\n              if val2.value ~= nil then\n                val2.value = counter_values[counter]\n                saved_data = saved_data:replaceText(\"u\"..GUID..\":cv:\"..counter..\"u\", string.gsub(counter_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n                counter = counter + 1\n              end\n              if val2.change_value ~= nil then\n                val2.change_value = counter_values[counter]\n                saved_data = saved_data:replaceText(\"u\"..GUID..\":cv:\"..counter..\"u\", string.gsub(counter_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n                counter = counter + 1\n              end\n            end\n          end\n\n        end\n    end\n    if disableSave==true then saved_data=\"\" end\n    self.script_state = saved_data\n\n    alreadySaving = false\n    return 1\n  end\n  startLuaCoroutine(self, \"startSaving\")\nend\n\n\t--Startup procedure\n\tfunction onload(saved_data)\n\t\tif disableSave==true then saved_data=\"\" end\n\t\tif saved_data ~= \"\" then\n\t\t\tlocal loaded_data = JSON.decode(saved_data)\n\t\t\tref_buttonData = loaded_data\n\t\telse\n\t\t\tref_buttonData = defaultButtonData\n\t\tend\n\n\t\tspawnedButtonCount = 0\n\t\tcreateCheckbox()\n\t\tcreateCounter()\n\t\tcreateTextbox()\n\tend\n\n\n\n\t--Click functions for buttons\n\n\n\n\t--Checks or unchecks the given box\n\tfunction click_checkbox(tableIndex, buttonIndex)\n\t\tif ref_buttonData.checkbox[tableIndex].state == true then\n\t\t\tref_buttonData.checkbox[tableIndex].state = false\n\t\t\tself.editButton({index=buttonIndex, label=\"\"})\n\t\telse\n\t\t\tref_buttonData.checkbox[tableIndex].state = true\n\t\t\tself.editButton({index=buttonIndex, label=string.char(10008)})\n\t\tend\n\t\tupdateSave()\n\tend\n\n\t--Applies value to given counter display\n\tfunction click_counter(tableIndex, buttonIndex, amount)\n\t\tref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount\n\t\tself.editButton({index=buttonIndex, label=ref_buttonData.counter[tableIndex].value})\n\t\tupdateSave()\n\tend\n\n\t--Updates saved value for given text box\n\tfunction click_textbox(i, value, selected)\n\t\tif selected == false then\n\t\t\tref_buttonData.textbox[i].value = value\n\t\t\tupdateSave()\n\t\tend\n\tend\n\n\t--Dud function for if you have a background on a counter\n\tfunction click_none() end\n\n\n\n\t--Button creation\n\n\n\n\t--Makes checkboxes\n\tfunction createCheckbox()\n\t\tfor i, data in ipairs(ref_buttonData.checkbox) do\n\t\t\t--Sets up reference function\n\t\t\tlocal buttonNumber = spawnedButtonCount\n\t\t\tlocal funcName = \"checkbox\"..i\n\t\t\tlocal func = function() click_checkbox(i, buttonNumber) end\n\t\t\tself.setVar(funcName, func)\n\t\t\t--Sets up label\n\t\t\tlocal label = \"\"\n\t\t\tif data.state==true then label=string.char(10008) end\n\t\t\t--Creates button and counts it\n\t\t\tself.createButton({\n\t\t\t\tlabel=label, click_function=funcName, function_owner=self,\n\t\t\t\tposition=data.pos, height=data.size, width=data.size,\n\t\t\t\tfont_size=data.size, scale=buttonScale,\n\t\t\t\tcolor=buttonColor, font_color=buttonFontColor\n\t\t\t})\n\t\t\tspawnedButtonCount = spawnedButtonCount + 1\n\t\tend\n\tend\n\n\t--Makes counters\n\tfunction createCounter()\n\t\tfor i, data in ipairs(ref_buttonData.counter) do\n\t\t\t--Sets up display\n\t\t\tlocal displayNumber = spawnedButtonCount\n\t\t\t--Sets up label\n\t\t\tlocal label = data.value\n\t\t\t--Sets height/width for display\n\t\t\tlocal size = data.size\n\t\t\tif data.hideBG == true then size = 0 end\n\t\t\t--Creates button and counts it\n\t\t\tself.createButton({\n\t\t\t\tlabel=label, click_function=\"click_none\", function_owner=self,\n\t\t\t\tposition=data.pos, height=size, width=size,\n\t\t\t\tfont_size=data.size, scale=buttonScale,\n\t\t\t\tcolor=buttonColor, font_color=buttonFontColor\n\t\t\t})\n\t\t\tspawnedButtonCount = spawnedButtonCount + 1\n\n\t\t\t--Sets up add 1\n\t\t\tlocal funcName = \"counterAdd\"..i\n\t\t\tlocal func = function() click_counter(i, displayNumber, 1) end\n\t\t\tself.setVar(funcName, func)\n\t\t\t--Sets up label\n\t\t\tlocal label = \"+\"\n\t\t\t--Sets up position\n\t\t\tlocal offsetDistance = (data.size/2 + data.size/4) * (buttonScale[1] * 0.002)\n\t\t\tlocal pos = {data.pos[1] + offsetDistance, data.pos[2], data.pos[3]}\n\t\t\t--Sets up size\n\t\t\tlocal size = data.size / 2\n\t\t\t--Creates button and counts it\n\t\t\tself.createButton({\n\t\t\t\tlabel=label, click_function=funcName, function_owner=self,\n\t\t\t\tposition=pos, height=size, width=size,\n\t\t\t\tfont_size=size, scale=buttonScale,\n\t\t\t\tcolor=buttonColor, font_color=buttonFontColor\n\t\t\t})\n\t\t\tspawnedButtonCount = spawnedButtonCount + 1\n\n\t\t\t--Sets up subtract 1\n\t\t\tlocal funcName = \"counterSub\"..i\n\t\t\tlocal func = function() click_counter(i, displayNumber, -1) end\n\t\t\tself.setVar(funcName, func)\n\t\t\t--Sets up label\n\t\t\tlocal label = \"-\"\n\t\t\t--Set up position\n\t\t\tlocal pos = {data.pos[1] - offsetDistance, data.pos[2], data.pos[3]}\n\t\t\t--Creates button and counts it\n\t\t\tself.createButton({\n\t\t\t\tlabel=label, click_function=funcName, function_owner=self,\n\t\t\t\tposition=pos, height=size, width=size,\n\t\t\t\tfont_size=size, scale=buttonScale,\n\t\t\t\tcolor=buttonColor, font_color=buttonFontColor\n\t\t\t})\n\t\t\tspawnedButtonCount = spawnedButtonCount + 1\n\t\tend\n\tend\n\n\tfunction createTextbox()\n\t\tfor i, data in ipairs(ref_buttonData.textbox) do\n\t\t\t--Sets up reference function\n\t\t\tlocal funcName = \"textbox\"..i\n\t\t\tlocal func = function(_,_,val,sel) click_textbox(i,val,sel) end\n\t\t\tself.setVar(funcName, func)\n\n\t\t\tself.createInput({\n\t\t\t\tinput_function = funcName,\n\t\t\t\tfunction_owner = self,\n\t\t\t\tlabel          = data.label,\n\t\t\t\talignment      = data.alignment,\n\t\t\t\tposition       = data.pos,\n\t\t\t\tscale          = buttonScale,\n\t\t\t\twidth          = data.width,\n\t\t\t\theight         = (data.font_size*data.rows)+24,\n\t\t\t\tfont_size      = data.font_size,\n\t\t\t\tcolor          = buttonColor,\n\t\t\t\tfont_color     = buttonFontColor,\n\t\t\t\tvalue          = data.value,\n\t\t\t})\n\t\tend\n\tend",
      "LuaScriptState": "",
      "MeasureMovement": false,
      "Name": "Custom_Tile",
      "Nickname": "The Innsmouth Conspiracy - Campaign Log",
      "Snap": true,
      "Sticky": true,
      "Tags": [
        "CampaignLog"
      ],
      "Tooltip": true,
      "Transform": {
        "posX": -1.35,
        "posY": 1.475,
        "posZ": -26.6,
        "rotX": 0,
        "rotY": 270,
        "rotZ": 0,
        "scaleX": 7,
        "scaleY": 1,
        "scaleZ": 7
      },
      "Value": 0,
      "XmlUI": ""
    }
  },
  "Sticky": true,
  "Tags": [
    "CampaignLog"
  ],
  "Tooltip": true,
  "Transform": {
    "posX": -1.466,
    "posY": 1.481,
    "posZ": -26.931,
    "rotX": 0,
    "rotY": 270,
    "rotZ": 0,
    "scaleX": 7,
    "scaleY": 1,
    "scaleZ": 7
  },
  "Value": 0,
  "XmlUI": ""
}