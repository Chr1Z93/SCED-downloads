{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomTile": {
      "Stackable": false,
      "Stretch": true,
      "Thickness": 0.1,
      "Type": 0
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "https://steamusercontent-a.akamaihd.net/ugc/959719855118672935/146C19B01EA067D56DF32B9F9B23D0C15C69C323/",
    "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/952965089460805886/ED3351E07CA39E86E0ACFA75E23BF8B946DA2EF6/",
    "WidthScale": 0
  },
  "Description": "Page 1",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "3f6ab6",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "require(\"TheDunwichLegacy/CampaignLog1\")",
  "LuaScriptState": "",
  "MeasureMovement": false,
  "Name": "Custom_Tile",
  "Nickname": "The Dunwich Legacy - Campaign Log",
  "Snap": true,
  "States": {
    "2": {
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "Autoraise": true,
      "ColorDiffuse": {
        "b": 1,
        "g": 1,
        "r": 1
      },
      "CustomImage": {
        "CustomTile": {
          "Stackable": false,
          "Stretch": true,
          "Thickness": 0.1,
          "Type": 0
        },
        "ImageScalar": 1,
        "ImageSecondaryURL": "https://steamusercontent-a.akamaihd.net/ugc/959719855118672935/146C19B01EA067D56DF32B9F9B23D0C15C69C323/",
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/952965089460806270/411287859209F7707FA87FCFA301C9E855141305/",
        "WidthScale": 0
      },
      "Description": "Page 2",
      "DragSelectable": true,
      "GMNotes": "",
      "GUID": "72c448",
      "Grid": true,
      "GridProjection": false,
      "Hands": false,
      "HideWhenFaceDown": false,
      "IgnoreFoW": false,
      "LayoutGroupSortIndex": 0,
      "Locked": false,
      "LuaScript": "--[[    Character Sheet Template    by: MrStump\n\nYou can set up your own character sheet if you follow these steps.\n\nStep 1) Change the character sheet image\n    -Right click on the character sheet, click Custom\n    -Replace the image URL with one for your character sheet\n    -Click import, make sure your sheet loads\n    -SAVE THE GAME (the table setup)\n    -LOAD FROM THAT SAVE YOU JUST MADE\n\nStep 2) Edit script to fit your character sheet\n    -Below you will see some general options, and then the big data table\n    -The data table is what determines how many of which buttons are made\n        -Checkboxes\n        -Counters\n        -Textboxes\n    -By default, there are 3 of each. You can add more or remove entries\n    -If you intend to add/remove, be sure only to add/remove ENTRIES\n        -This is what an entry looks like:\n            {\n                pos   = {-0.977,0.1,-0.589},\n                size  = 800,\n                state = false\n            },\n        -Deleting the whole thing would remove that specific item on the sheet\n        -Copy and pasting it after another entry would create another\n    -Each entry type has unique data points (pos, size, state, etc)\n        -Do not try to add in your own data points or remove them individually\n        -There is a summary of what each point does at the top of its category\n\nStep 3) Save and check script changes\n    -Hit Save \u0026 Apply in the script window to save your code\n    -You can edit your code as needed and Save+Apply as often as needed\n    -When you are finished, make disableSave = false below then Save+apply\n        -This enables saving, so your sheet will remember whats on it.\n\nBonus) Finding/Editing Positions for elements\n    I have included a tool to get positions for buttons in {x,y,z} form\n    Place it where you want the center of your element to be\n    Then copy the table from the notes (lower right of screen)\n        You can highlight it and CTRL+C\n    Paste it into the data table where needed (pos=)\n    If you want to manually tweek the values:\n        {0,0,0} is the center of the character sheet\n        {1,0,0} is right, {-1,0,0} is left\n        {0,0,-1} is up, {0,0,1} is down\n        0.1 for Y is the height off of the page.\n            If it was 0, it would be down inside the model of the sheet\n\nBegin editing below:    ]]\n\n--Set this to true while editing and false when you have finished\ndisableSave = false\n--Remember to set this to false once you are done making changes\n--Then, after you save \u0026 apply it, save your game too\n\n--Color information for button text (r,g,b, values of 0-1)\nbuttonFontColor = {0,0,0}\n--Color information for button background\nbuttonColor = {1,1,1}\n--Change scale of button (Avoid changing if possible)\nbuttonScale = {0.1,0.1,0.1}\n\n--This is the button placement information\ndefaultButtonData = {\n    --Add checkboxes\n    checkbox = {\n        --[[\n        pos   = the position (pasted from the helper tool)\n        size  = height/width/font_size for checkbox\n        state = default starting value for checkbox (true=checked, false=not)\n        ]]\n        --1 checkbox\n        {\n            pos   = {-0.847,0.1,-0.649},\n            size  = 250,\n            state = false\n        },\n        --2 checkbox\n        {\n            pos   = {-0.514,0.1,-0.733},\n            size  = 250,\n            state = false\n        },\n        --3 checkbox\n        {\n            pos   = {-0.512,0.1,-0.612},\n            size  = 250,\n            state = false\n        },\n        --4 checkbox\n        {\n            pos   = {0.175,0.1,-0.708},\n            size  = 250,\n            state = false\n        },\n        --5 checkbox\n        {\n            pos   = {0.174,0.1,-0.574},\n            size  = 250,\n            state = false\n        },\n        --6 checkbox\n        {\n            pos   = {-0.035,0.1,-0.408},\n            size  = 250,\n            state = false\n        },\n        --7 checkbox\n        {\n            pos   = {-0.818,0.1,-0.373},\n            size  = 250,\n            state = false\n        },\n        --8 checkbox\n        {\n            pos   = {-0.361,0.1,-0.235},\n            size  = 250,\n            state = false\n        },\n        --9 checkbox\n        {\n            pos   = {0.323,0.1,-0.091},\n            size  = 250,\n            state = false\n        },\n        --10 checkbox\n        {\n            pos   = {-0.099,0.1,0.027},\n            size  = 250,\n            state = false\n        },\n        --11 checkbox\n        {\n            pos   = {-0.778,0.1,0.126},\n            size  = 250,\n            state = false\n        },\n        --12 checkbox\n        {\n            pos   = {-0.256,0.1,0.296},\n            size  = 250,\n            state = false\n        },\n        --13 checkbox\n        {\n            pos   = {0.179,0.1,0.461},\n            size  = 250,\n            state = false\n        },\n        --14 checkbox\n        {\n            pos   = {0.289,0.1,0.726},\n            size  = 250,\n            state = false\n        },\n        --End of checkboxes\n    },\n    --Add counters that have a + and - button\n    counter = {\n        --[[\n        pos    = the position (pasted from the helper tool)\n        size   = height/width/font_size for counter\n        value  = default starting value for counter\n        hideBG = if background of counter is hidden (true=hidden, false=not)\n        ]]\n        --Slot one counter 1\n\n        --End of counters\n    },\n    --Add editable text boxes\n    textbox = {\n        --[[\n        pos       = the position (pasted from the helper tool)\n        rows      = how many lines of text you want for this box\n        width     = how wide the text box is\n        font_size = size of text. This and \"rows\" effect overall height\n        label     = what is shown when there is no text. \"\" = nothing\n        value     = text entered into box. \"\" = nothing\n        alignment = Number to indicate how you want text aligned\n                    (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)\n        ]]\n\n        --Campaign Notes\n        {\n            pos       = {-0.4,0.1,0.652},\n            rows      =6,\n            width     = 3500,\n            font_size = 200,\n            label     = \"Click to type\",\n            value     = \"\",\n            alignment = 2\n        },\n        --End of textboxes\n    }\n}\n\n\n\n--Lua beyond this point, I recommend doing something more fun with your life\n\n\n\n--Save function\nlocal alreadySaving = false -- Copy this too!\nfunction updateSave()\n\n    function string.replaceText(text, old, new)\n      local b,e = text:find(old,1,true)\n      if b==nil then\n         return text\n      else\n         return text:sub(1,b-1) .. new .. text:sub(e+1)\n      end\n    end\n\n    function wait(time)\n      local start = os.time()\n      repeat coroutine.yield(0) until os.time() \u003e start + time\n    end\n\n    function deepcopy(orig)\n      local orig_type = type(orig)\n      local copy\n      if orig_type == 'table' then\n          copy = {}\n          for orig_key, orig_value in next, orig, nil do\n              copy[deepcopy(orig_key)] = deepcopy(orig_value)\n          end\n          setmetatable(copy, deepcopy(getmetatable(orig)))\n      else -- number, string, boolean, etc\n          copy = orig\n      end\n      return copy\n    end\n\n    function startSaving()\n      while alreadySaving do\n        wait(0.01)\n      end\n    alreadySaving = true\n    local ref_buttonData = deepcopy(ref_buttonData)\n    local input_values = {}\n    local checkbox_values = {}\n    local counter_values = {}\n\n    local GUID = self.getGUID()\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.textbox) do\n        if val.value ~= nil then\n          input_values[counter] = val.value\n          val.value = \"u\"..GUID..\":iv:\"..counter..\"u\"\n          counter = counter + 1\n        end\n        if val.label ~= nil then\n          input_values[counter] = val.label\n          val.label = \"u\"..GUID..\":iv:\"..counter..\"u\"\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.checkbox) do\n        if val.value ~= nil then\n          checkbox_values[counter] = val.value\n          val.value = \"u\"..GUID..\":bv:\"..counter..\"u\"\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.counter) do\n        if val.value ~= nil then\n          counter_values[counter] = val.value\n          val.value = \"u\"..GUID..\":cv:\"..counter..\"u\"\n          counter = counter + 1\n          if val.counters ~= nil then\n            for _, val2 in ipairs(val.counters) do\n              if val2.value ~= nil then\n                counter_values[counter] = val2.value\n                val2.value = \"u\"..GUID..\":cv:\"..counter..\"u\"\n                counter = counter + 1\n              end\n              if val2.change_value ~= nil then\n                counter_values[counter] = val2.change_value\n                val2.change_value = \"u\"..GUID..\":cv:\"..counter..\"u\"\n                counter = counter + 1\n              end\n            end\n          end\n\n        end\n    end\n\n    saved_data = JSON.encode(ref_buttonData)\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.textbox) do\n        if val.value ~= nil then\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":iv:\"..counter..\"u\", string.gsub(input_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          val.value = input_values[counter]\n          counter = counter + 1\n        end\n        if val.label ~= nil then\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":iv:\"..counter..\"u\", string.gsub(input_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          val.label = input_values[counter]\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.checkbox) do\n        if val.value ~= nil then\n          val.value = checkbox_values[counter]\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":bv:\"..counter..\"u\", string.gsub(checkbox_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          counter = counter + 1\n        end\n    end\n\n    local counter = 1\n    for _, val in ipairs(ref_buttonData.counter) do\n        if val.value ~= nil then\n          val.value = counter_values[counter]\n          saved_data = saved_data:replaceText(\"u\"..GUID..\":cv:\"..counter..\"u\", string.gsub(counter_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n          counter = counter + 1\n\n          if val.counters ~= nil then\n            for _, val2 in ipairs(val.counters) do\n              if val2.value ~= nil then\n                val2.value = counter_values[counter]\n                saved_data = saved_data:replaceText(\"u\"..GUID..\":cv:\"..counter..\"u\", string.gsub(counter_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n                counter = counter + 1\n              end\n              if val2.change_value ~= nil then\n                val2.change_value = counter_values[counter]\n                saved_data = saved_data:replaceText(\"u\"..GUID..\":cv:\"..counter..\"u\", string.gsub(counter_values[counter], \"[\\\\\\\"']\", \"\\\\%1\"))\n                counter = counter + 1\n              end\n            end\n          end\n\n        end\n    end\n    if disableSave==true then saved_data=\"\" end\n    self.script_state = saved_data\n\n    alreadySaving = false\n    return 1\n  end\n  startLuaCoroutine(self, \"startSaving\")\nend\n\n--Startup procedure\nfunction onload(saved_data)\n    if disableSave==true then saved_data=\"\" end\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        ref_buttonData = loaded_data\n    else\n        ref_buttonData = defaultButtonData\n    end\n\n    spawnedButtonCount = 0\n    createCheckbox()\n    createCounter()\n    createTextbox()\nend\n\n\n\n--Click functions for buttons\n\n\n\n--Checks or unchecks the given box\nfunction click_checkbox(tableIndex, buttonIndex)\n    if ref_buttonData.checkbox[tableIndex].state == true then\n        ref_buttonData.checkbox[tableIndex].state = false\n        self.editButton({index=buttonIndex, label=\"\"})\n    else\n        ref_buttonData.checkbox[tableIndex].state = true\n        self.editButton({index=buttonIndex, label=string.char(10008)})\n    end\n    updateSave()\nend\n\n--Applies value to given counter display\nfunction click_counter(tableIndex, buttonIndex, amount)\n    ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount\n    self.editButton({index=buttonIndex, label=ref_buttonData.counter[tableIndex].value})\n    updateSave()\nend\n\n--Updates saved value for given text box\nfunction click_textbox(i, value, selected)\n    if selected == false then\n        ref_buttonData.textbox[i].value = value\n        updateSave()\n    end\nend\n\n--Dud function for if you have a background on a counter\nfunction click_none() end\n\n\n\n--Button creation\n\n\n\n--Makes checkboxes\nfunction createCheckbox()\n    for i, data in ipairs(ref_buttonData.checkbox) do\n        --Sets up reference function\n        local buttonNumber = spawnedButtonCount\n        local funcName = \"checkbox\"..i\n        local func = function() click_checkbox(i, buttonNumber) end\n        self.setVar(funcName, func)\n        --Sets up label\n        local label = \"\"\n        if data.state==true then label=string.char(10008) end\n        --Creates button and counts it\n        self.createButton({\n            label=label, click_function=funcName, function_owner=self,\n            position=data.pos, height=data.size, width=data.size,\n            font_size=data.size, scale=buttonScale,\n            color=buttonColor, font_color=buttonFontColor\n        })\n        spawnedButtonCount = spawnedButtonCount + 1\n    end\nend\n\n--Makes counters\nfunction createCounter()\n    for i, data in ipairs(ref_buttonData.counter) do\n        --Sets up display\n        local displayNumber = spawnedButtonCount\n        --Sets up label\n        local label = data.value\n        --Sets height/width for display\n        local size = data.size\n        if data.hideBG == true then size = 0 end\n        --Creates button and counts it\n        self.createButton({\n            label=label, click_function=\"click_none\", function_owner=self,\n            position=data.pos, height=size, width=size,\n            font_size=data.size, scale=buttonScale,\n            color=buttonColor, font_color=buttonFontColor\n        })\n        spawnedButtonCount = spawnedButtonCount + 1\n\n        --Sets up add 1\n        local funcName = \"counterAdd\"..i\n        local func = function() click_counter(i, displayNumber, 1) end\n        self.setVar(funcName, func)\n        --Sets up label\n        local label = \"+\"\n        --Sets up position\n        local offsetDistance = (data.size/2 + data.size/4) * (buttonScale[1] * 0.002)\n        local pos = {data.pos[1] + offsetDistance, data.pos[2], data.pos[3]}\n        --Sets up size\n        local size = data.size / 2\n        --Creates button and counts it\n        self.createButton({\n            label=label, click_function=funcName, function_owner=self,\n            position=pos, height=size, width=size,\n            font_size=size, scale=buttonScale,\n            color=buttonColor, font_color=buttonFontColor\n        })\n        spawnedButtonCount = spawnedButtonCount + 1\n\n        --Sets up subtract 1\n        local funcName = \"counterSub\"..i\n        local func = function() click_counter(i, displayNumber, -1) end\n        self.setVar(funcName, func)\n        --Sets up label\n        local label = \"-\"\n        --Set up position\n        local pos = {data.pos[1] - offsetDistance, data.pos[2], data.pos[3]}\n        --Creates button and counts it\n        self.createButton({\n            label=label, click_function=funcName, function_owner=self,\n            position=pos, height=size, width=size,\n            font_size=size, scale=buttonScale,\n            color=buttonColor, font_color=buttonFontColor\n        })\n        spawnedButtonCount = spawnedButtonCount + 1\n    end\nend\n\nfunction createTextbox()\n    for i, data in ipairs(ref_buttonData.textbox) do\n        --Sets up reference function\n        local funcName = \"textbox\"..i\n        local func = function(_,_,val,sel) click_textbox(i,val,sel) end\n        self.setVar(funcName, func)\n\n        self.createInput({\n            input_function = funcName,\n            function_owner = self,\n            label          = data.label,\n            alignment      = data.alignment,\n            position       = data.pos,\n            scale          = buttonScale,\n            width          = data.width,\n            height         = (data.font_size*data.rows)+24,\n            font_size      = data.font_size,\n            color          = buttonColor,\n            font_color     = buttonFontColor,\n            value          = data.value,\n        })\n    end\nend\n",
      "LuaScriptState": "",
      "MeasureMovement": false,
      "Name": "Custom_Tile",
      "Nickname": "The Dunwich Legacy - Campaign Log",
      "Snap": true,
      "Sticky": true,
      "Tags": [
        "CampaignLog"
      ],
      "Tooltip": true,
      "Transform": {
        "posX": -1.3,
        "posY": 1.475,
        "posZ": -26.76,
        "rotX": 0,
        "rotY": 270,
        "rotZ": 0,
        "scaleX": 7,
        "scaleY": 1,
        "scaleZ": 7
      },
      "Value": 0,
      "XmlUI": ""
    }
  },
  "Sticky": true,
  "Tags": [
    "CampaignLog"
  ],
  "Tooltip": true,
  "Transform": {
    "posX": -1.353,
    "posY": 1.481,
    "posZ": -26.603,
    "rotX": 0,
    "rotY": 270,
    "rotZ": 0,
    "scaleX": 7,
    "scaleY": 1,
    "scaleZ": 7
  },
  "Value": 0,
  "XmlUI": ""
}