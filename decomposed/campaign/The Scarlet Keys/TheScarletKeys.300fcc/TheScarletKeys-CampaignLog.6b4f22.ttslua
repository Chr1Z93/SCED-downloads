-- Campaign Log: The Scarlet Keys

-- returns the trauma values for the investigators from left to right (4x physical, 4x mental)
function returnTrauma()
  local trauma = {}

  -- physical trauma from left to right
  trauma[1] = ref_buttonData.counter[1].value or 0
  trauma[2] = ref_buttonData.counter[4].value or 0
  trauma[3] = ref_buttonData.counter[7].value or 0
  trauma[4] = ref_buttonData.counter[10].value or 0

  -- mental trauma from left to right
  trauma[5] = ref_buttonData.counter[2].value or 0
  trauma[6] = ref_buttonData.counter[5].value or 0
  trauma[7] = ref_buttonData.counter[8].value or 0
  trauma[8] = ref_buttonData.counter[11].value or 0

  return trauma
end

--Set this to true while editing and false when you have finished
local disableSave       = false
local buttonFontColor   = { 0, 0, 0 }
local buttonColor       = { 1, 1, 1 }
local buttonScale       = { 0.13, 0.13, 0.13 }
local defaultButtonData = {
  checkbox = {},
  counter = {
    --Slot one physical trauma
    { pos = { -1.1, 0.11, -1.28 } },

    --Slot one mental trauma
    { pos = { -0.85, 0.11, -1.28 } },

    --Slot one xp 1
    { pos = { -0.85, 0.11, -1.45 } },

    --Slot two physical trauma
    { pos = { -0.38, 0.11, -1.27 } },

    --Slot two mental trauma
    { pos = { -0.13, 0.11, -1.27 } },

    --Slot two xp 1
    { pos = { -0.13, 0.11, -1.44 } },

    --Slot three physical trauma
    { pos = { 0.325, 0.11, -1.26 } },

    --Slot three mental trauma
    { pos = { 0.575, 0.11, -1.26 } },

    --Slot three xp 1
    { pos = { 0.575, 0.11, -1.43 } },

    --Slot four physical trauma
    { pos = { 1.02, 0.11, -1.25 } },

    --Slot four mental trauma
    { pos = { 1.27, 0.11, -1.25 } },

    --Slot four xp 1
    { pos = { 1.27, 0.11, -1.42 } }
  },
  textbox = {
    --Slot one player
    { pos = { -1.06, 0.11, -1.69 } },

    --Slot one investigator
    { pos = { -1.06, 0.11, -1.56 } },

    --Slot one story
    {
      pos = { -1.06, 0.11, -0.97 },
      rows = 8
    },

    --Slot two player
    { pos = { -0.35, 0.11, -1.68 } },

    --Slot two investigator
    { pos = { -0.35, 0.11, -1.55 } },

    --Slot two story
    {
      pos = { -0.35, 0.11, -0.96 },
      rows = 8
    },

    --Slot three player
    { pos = { 0.35, 0.11, -1.67 } },

    --Slot three investigator
    { pos = { 0.35, 0.11, -1.54 } },

    --Slot three story
    {
      pos = { 0.35, 0.11, -0.95 },
      rows = 8
    },

    --Slot four player
    { pos = { 1.04, 0.11, -1.66 } },

    --Slot four investigator
    { pos = { 1.04, 0.11, -1.53 } },

    --Slot four story
    {
      pos = { 1.04, 0.11, -0.94 },
      rows = 8
    },

    --Campaign Notes
    {
      pos       = { -0.86, 0.11, 0.34 },
      rot       = { 0, -6, 0 },
      rows      = 20,
      width     = 4200,
      font_size = 250,
      label     = "Click to type",
      value     = "",
      noDefault = true
    },

    --Chaos Bag Notes
    {
      pos       = { -0.34, 0.11, 1.51 },
      rot       = { 0, -17, 0 },
      rows      = 10,
      width     = 1850,
      font_size = 200,
      label     = "Click to type",
      value     = "",
      noDefault = true
    }
  }
}

local cb_unicode        = {}

function updateSave() self.script_state = onSave() end

function onSave() return JSON.encode(ref_buttonData) end

--Startup procedure
function onLoad(saved_data)
  if disableSave == true then saved_data = "" end
  if saved_data ~= "" then
    local loaded_data = JSON.decode(saved_data)
    ref_buttonData = loaded_data
  else
    -- default values for all counters
    for _, entry in ipairs(defaultButtonData.counter) do
      entry.value = 0
    end

    -- default settings for all boxes
    for _, entry in ipairs(defaultButtonData.textbox) do
      if entry.noDefault == true then break end
      entry.label = "Click to type"
      entry.value = ""
      entry.width = 2350
      entry.font_size = 175
      if entry.rows == nil then entry.rows = 1 end
    end

    -- checkbox and textboxes for keys
    for i = 1, 11 do
      local random_degree = math.random(-5, 5)
      local random_size = math.random(90, 110)
      local cb_tbl = {
        pos = { -0.037 + i * 0.01, 0.11, -0.45 + i * 0.095 },
        rot = { 0, -5 + random_degree, 0 },
        size = 300 * random_size / 100,
        state = false
      }
      table.insert(defaultButtonData.checkbox, cb_tbl)

      local tb_tbl = {
        pos = { 0.825 + i * 0.01, 0.11, -0.52 + i * 0.0965 },
        rot = { 0, -3, 0 },
        width = 1650,
        value = "",
        label = "Click to type",
        rows = 1,
        font_size = 175
      }
      table.insert(defaultButtonData.textbox, tb_tbl)
    end

    -- checkbox for time tracking
    for i = 1, 5 do
      for j = 1, 7 do
        local random_degree = math.random(-5, 5)
        local random_size = math.random(90, 110)
        local cb_tbl = {
          pos = { 0.04 + j * 0.172 - i * 0.0109, 0.11, 0.99 + i * 0.17 + j * 0.0097 },
          rot = { 0, 3 + random_degree, 0 },
          size = 690 * random_size / 100,
          state = false
        }
        table.insert(defaultButtonData.checkbox, cb_tbl)
      end
    end
    ref_buttonData = defaultButtonData
  end

  math.randomseed(123)
  local choices = { 10007, 10008 }
  for i = 1, 46 do
    table.insert(cb_unicode, choices[math.random(1, #choices)])
  end

  spawnedButtonCount = 0
  createCheckbox()
  createCounter()
  createTextbox()
end

--Click functions for buttons
--Checks or unchecks the given box
function click_checkbox(tableIndex, buttonIndex)
  local state = ref_buttonData.checkbox[tableIndex].state
  ref_buttonData.checkbox[tableIndex].state = not state
  self.editButton({
    index = buttonIndex,
    label = (state and "" or string.char(cb_unicode[buttonIndex + 1]))
  })
  updateSave()
end

--Applies value to given counter display
function click_counter(tableIndex, buttonIndex, amount)
  ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount
  self.editButton({
    index = buttonIndex,
    label = ref_buttonData.counter[tableIndex].value
  })
  updateSave()
end

--Updates saved value for given text box
function click_textbox(i, value, selected)
  if selected == false then
    ref_buttonData.textbox[i].value = value
    updateSave()
  end
end

--Makes checkboxes
function createCheckbox()
  for i, data in ipairs(ref_buttonData.checkbox) do
    local buttonIndex = spawnedButtonCount
    local funcName = "checkbox" .. i
    self.setVar(funcName, function() click_checkbox(i, buttonIndex) end)
    self.createButton({
      label          = data.state and string.char(cb_unicode[buttonIndex + 1]) or "",
      click_function = funcName,
      function_owner = self,
      position       = data.pos,
      rotation       = data.rot or { 0, 0, 0 },
      height         = data.size,
      width          = data.size,
      font_size      = data.size,
      scale          = buttonScale,
      color          = { 1, 1, 1, 0 },
      font_color     = { 1, 0, 0, 97 }
    })
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

--Makes counters
function createCounter()
  for i, data in ipairs(ref_buttonData.counter) do
    -- common parameters
    local size                      = 400
    local offsetDistance            = 3 / 4 * size * buttonScale[1] * 0.002
    local buttonParameters          = {}
    buttonParameters.function_owner = self
    buttonParameters.scale          = buttonScale
    buttonParameters.color          = buttonColor
    buttonParameters.font_color     = buttonFontColor

    --Sets up display
    local displayNumber             = spawnedButtonCount
    buttonParameters.label          = data.value
    buttonParameters.click_function = "click_none"
    buttonParameters.position       = data.pos
    buttonParameters.height         = 0
    buttonParameters.width          = 0
    buttonParameters.font_size      = size
    self.createButton(buttonParameters)
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up add 1
    local funcName = "counterAdd" .. i
    self.setVar(funcName, function() click_counter(i, displayNumber, 1) end)

    buttonParameters.label          = "+"
    buttonParameters.click_function = funcName
    buttonParameters.position       = { data.pos[1] + offsetDistance, data.pos[2], data.pos[3] - 0.005 }
    buttonParameters.height         = size * 0.55
    buttonParameters.width          = size * 0.55
    buttonParameters.font_size      = size * 0.55
    self.createButton(buttonParameters)
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up subtract 1
    local funcName = "counterSub" .. i
    self.setVar(funcName, function() click_counter(i, displayNumber, -1) end)

    buttonParameters.label          = "-"
    buttonParameters.click_function = funcName
    buttonParameters.position       = { data.pos[1] - offsetDistance, data.pos[2], data.pos[3] - 0.005 }
    self.createButton(buttonParameters)
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

function createTextbox()
  for i, data in ipairs(ref_buttonData.textbox) do
    local funcName = "textbox" .. i
    self.setVar(funcName, function(_, _, val, sel) click_textbox(i, val, sel) end)
    self.createInput({
      input_function = funcName,
      function_owner = self,
      label          = data.label,
      alignment      = 2,
      position       = data.pos,
      rotation       = data.rot or { 0, 0, 0 },
      scale          = buttonScale,
      width          = data.width,
      height         = (data.font_size * data.rows) + 40,
      font_size      = data.font_size,
      color          = buttonColor,
      font_color     = buttonFontColor,
      value          = data.value
    })
  end
end
