{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomToken": {
      "MergeDistancePixels": 15,
      "Stackable": false,
      "StandUp": false,
      "Thickness": 0.1
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "",
    "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1974294597231440911/F362CCCFF8C4BDA15CBF084A68DDD20BC245BA8A/",
    "WidthScale": 0
  },
  "Description": "Page 1",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "6b4f22",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "require(\"TheScarletKeys/CampaignLog1\")",
  "LuaScriptState": "",
  "MeasureMovement": false,
  "Name": "Custom_Token",
  "Nickname": "The Scarlet Keys - Campaign Log",
  "Snap": true,
  "States": {
    "2": {
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "Autoraise": true,
      "ColorDiffuse": {
        "b": 1,
        "g": 1,
        "r": 1
      },
      "CustomImage": {
        "CustomToken": {
          "MergeDistancePixels": 15,
          "Stackable": false,
          "StandUp": false,
          "Thickness": 0.1
        },
        "ImageScalar": 1,
        "ImageSecondaryURL": "",
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1974294597231446647/10DF67ED7E3060748A17112DDB568558605764DA/",
        "WidthScale": 0
      },
      "Description": "Page 2",
      "DragSelectable": true,
      "GMNotes": "",
      "GUID": "ce17b8",
      "Grid": true,
      "GridProjection": false,
      "Hands": false,
      "HideWhenFaceDown": false,
      "IgnoreFoW": false,
      "LayoutGroupSortIndex": 0,
      "Locked": false,
      "LuaScript": "-- Campaign Log: The Scarlet Keys (Page 2)\n\n--Set this to true while editing and false when you have finished\nlocal disableSave       = false\nlocal buttonFontColor   = { 0, 0, 0 }\nlocal buttonColor       = { 1, 1, 1 }\nlocal buttonScale       = { 0.13, 0.13, 0.13 }\nlocal defaultButtonData = {\n  checkbox = {},\n  counter = {},\n  --Add editable text boxes\n  textbox = {\n    -- San Juan\n    { pos = { -0.72, 0.11, -1.44 },\n      rot = { 0, -6, 0 } },\n    -- Quito\n    { pos = { -0.86, 0.11, -0.93 },\n      rot = { 0, -19, 0 } },\n    -- Reykjavik\n    { pos = { 0.25, 0.11, -1.21 },\n      rot = { 0, -6, 0 } },\n    -- London\n    { pos = { 0.56, 0.11, -0.92 },\n      rot = { 0, 5, 0 } },\n    -- Hong Kong\n    { pos = { -0.49, 0.11, -0.14 },\n      rot = { 0, -3, 0 } },\n    -- Kuala Lumpur\n    { pos = { -0.9, 0.11, 0.28 },\n      rot = { 0, 9, 0 } },\n    -- Manokwari\n    { pos = { -0.11, 0.11, 0.52 },\n      rot = { 0, 14, 0 } },\n    -- Tunguska\n    { pos = { 0.905, 0.11, -0.03 },\n      rot = { 0, -16, 0 } },\n    -- Kabul\n    { pos = { 0.53, 0.11, 0.61 },\n      rot = { 0, -4, 0 } },\n    -- killed investigators\n    { pos = { -0.7, 0.11, 1.7 },\n      rot       = { 0, 3, 0 },\n      rows      = 9,\n      width     = 4500,\n      font_size = 200,\n      label     = \"Click to type\",\n      value     = \"\",\n      noDefault = true\n    }\n  }\n}\n\nfunction updateSave() self.script_state = onSave() end\n\nfunction onSave() return JSON.encode(ref_buttonData) end\n\n--Startup procedure\nfunction onLoad(saved_data)\n  if disableSave == true then saved_data = \"\" end\n  if saved_data ~= \"\" then\n    local loaded_data = JSON.decode(saved_data)\n    ref_buttonData = loaded_data\n  else\n    -- default settings for all boxes\n    for _, entry in ipairs(defaultButtonData.textbox) do\n      if entry.noDefault == true then break end\n      entry.label = \"Click\"\n      entry.value = \"\"\n      entry.width = 950\n      entry.font_size = 300\n      if entry.rows == nil then entry.rows = 1 end\n    end\n\n    ref_buttonData = defaultButtonData\n  end\n\n  spawnedButtonCount = 0\n  createCheckbox()\n  createCounter()\n  createTextbox()\nend\n\n--Click functions for buttons\n--Checks or unchecks the given box\nfunction click_checkbox(tableIndex, buttonIndex)\n  if ref_buttonData.checkbox[tableIndex].state == true then\n    ref_buttonData.checkbox[tableIndex].state = false\n    self.editButton({ index = buttonIndex, label = \"\" })\n  else\n    ref_buttonData.checkbox[tableIndex].state = true\n    self.editButton({ index = buttonIndex, label = string.char(10008) })\n  end\n  updateSave()\nend\n\n--Applies value to given counter display\nfunction click_counter(tableIndex, buttonIndex, amount)\n  ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount\n  self.editButton({ index = buttonIndex, label = ref_buttonData.counter[tableIndex].value })\n  updateSave()\nend\n\n--Updates saved value for given text box\nfunction click_textbox(i, value, selected)\n  if selected == false then\n    ref_buttonData.textbox[i].value = value\n    updateSave()\n  end\nend\n\n--Makes checkboxes\nfunction createCheckbox()\n  for i, data in ipairs(ref_buttonData.checkbox) do\n    --Sets up reference function\n    local buttonNumber = spawnedButtonCount\n    local funcName = \"checkbox\" .. i\n    local func = function() click_checkbox(i, buttonNumber) end\n    self.setVar(funcName, func)\n    local label = \"\"\n    if data.state == true then label = string.char(10008) end\n    --Creates button and counts it\n    self.createButton({\n      label          = label,\n      click_function = funcName,\n      function_owner = self,\n      position       = data.pos,\n      rotation       = data.rot or { 0, 0, 0 },\n      height         = data.size,\n      width          = data.size,\n      font_size      = data.size,\n      scale          = buttonScale,\n      color          = buttonColor,\n      font_color     = buttonFontColor\n    })\n    spawnedButtonCount = spawnedButtonCount + 1\n  end\nend\n\n--Makes counters\nfunction createCounter()\n  for i, data in ipairs(ref_buttonData.counter) do\n    -- common parameters\n    local size                      = 400\n    local offsetDistance            = 3 / 4 * size * buttonScale[1] * 0.002\n    local buttonParameters          = {}\n    buttonParameters.function_owner = self\n    buttonParameters.scale          = buttonScale\n    buttonParameters.color          = buttonColor\n    buttonParameters.font_color     = buttonFontColor\n\n    --Sets up display\n    local displayNumber             = spawnedButtonCount\n    buttonParameters.label          = data.value\n    buttonParameters.click_function = \"click_none\"\n    buttonParameters.position       = data.pos\n    buttonParameters.height         = 0\n    buttonParameters.width          = 0\n    buttonParameters.font_size      = size\n    self.createButton(buttonParameters)\n    spawnedButtonCount = spawnedButtonCount + 1\n\n    --Sets up add 1\n    local funcName = \"counterAdd\" .. i\n    local func = function() click_counter(i, displayNumber, 1) end\n    self.setVar(funcName, func)\n\n    buttonParameters.label          = \"+\"\n    buttonParameters.click_function = funcName\n    buttonParameters.position       = { data.pos[1] + offsetDistance, data.pos[2], data.pos[3] - 0.005 }\n    buttonParameters.height         = size * 0.55\n    buttonParameters.width          = size * 0.55\n    buttonParameters.font_size      = size * 0.55\n    self.createButton(buttonParameters)\n    spawnedButtonCount = spawnedButtonCount + 1\n\n    --Sets up subtract 1\n    local funcName = \"counterSub\" .. i\n    local func = function() click_counter(i, displayNumber, -1) end\n    self.setVar(funcName, func)\n\n    buttonParameters.label          = \"-\"\n    buttonParameters.click_function = funcName\n    buttonParameters.position       = { data.pos[1] - offsetDistance, data.pos[2], data.pos[3] - 0.005 }\n    self.createButton(buttonParameters)\n    spawnedButtonCount = spawnedButtonCount + 1\n  end\nend\n\nfunction createTextbox()\n  for i, data in ipairs(ref_buttonData.textbox) do\n    --Sets up reference function\n    local funcName = \"textbox\" .. i\n    local func = function(_, _, val, sel) click_textbox(i, val, sel) end\n    self.setVar(funcName, func)\n    self.createInput({\n      input_function = funcName,\n      function_owner = self,\n      label          = data.label,\n      alignment      = 2,\n      position       = data.pos,\n      rotation       = data.rot or { 0, 0, 0 },\n      scale          = buttonScale,\n      width          = data.width,\n      height         = (data.font_size * data.rows) + 33,\n      font_size      = data.font_size,\n      color          = buttonColor,\n      font_color     = buttonFontColor,\n      value          = data.value\n    })\n  end\nend\n",
      "LuaScriptState": "",
      "MeasureMovement": false,
      "Name": "Custom_Token",
      "Nickname": "The Scarlet Keys - Campaign Log",
      "Snap": true,
      "Sticky": true,
      "Tags": [
        "CampaignLog"
      ],
      "Tooltip": true,
      "Transform": {
        "posX": -1.466,
        "posY": 1.58,
        "posZ": -26.93,
        "rotX": 0,
        "rotY": 270,
        "rotZ": 0,
        "scaleX": 3.25,
        "scaleY": 1,
        "scaleZ": 3.25
      },
      "Value": 0,
      "XmlUI": ""
    }
  },
  "Sticky": true,
  "Tags": [
    "CampaignLog"
  ],
  "Tooltip": true,
  "Transform": {
    "posX": -1.466,
    "posY": 1.531,
    "posZ": -26.93,
    "rotX": 0,
    "rotY": 270,
    "rotZ": 0,
    "scaleX": 3.25,
    "scaleY": 1,
    "scaleZ": 3.25
  },
  "Value": 0,
  "XmlUI": ""
}