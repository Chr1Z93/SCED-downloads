-- set true to enable debug logging
DEBUG = false

function log(message)
  if DEBUG then
    print(message)
  end
end

--[[
Known locations and clues. We check this to determine if we should
atttempt to spawn clues, first we look for <LOCATION_NAME>_<GUID> and if
we find nothing we look for <LOCATION_NAME>
format is [location_guid -> clueCount]
]]
LOCATIONS_DATA_JSON = [[
{
  "The Parliament House": {"type": "perPlayer", "value": 3, "clueSide": "front"},
  "The Harbor": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Christ the King Church": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "National Bank": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "The Culture House": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Receding Garden": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Borgarnes": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Geysir": {"type": "perPlayer", "value": 3, "clueSide": "front"},
  "Gulfoss": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Icy Cavern": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Kerid": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Long Glacier": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Lava Tunnel": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Mossy Platform": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Thingvellir": {"type": "perPlayer", "value": 3, "clueSide": "front"},
  "Eerie Cave": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Mt. Stapafell": {"type": "perPlayer", "value": 3, "clueSide": "front"},
  "Red Cloak Rift": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "The Black Church": {"type": "perPlayer", "value": 3, "clueSide": "front"},
  "Dritvik Cove": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Eldborg": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Bleak Overlook": {"type": "perPlayer", "value": 3, "clueSide": "front"},
  "Glanni Falls": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Grabrok": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Dark Pit": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Egilâ€™s Tomb": {"type": "perPlayer", "value": 3, "clueSide": "front"},
  "Iridescent Cupola": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Lake of Fire": {"type": "perPlayer", "value": 1, "clueSide": "front"},
  "Natural Bridge": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Smooth Karst": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Steaming Rift": {"type": "perPlayer", "value": 2, "clueSide": "front"},
  "Sweltering Grotto": {"type": "perPlayer", "value": 2, "clueSide": "front"}
}
]]

PLAYER_CARD_DATA_JSON = [[
{
  "Brownie 2": {
    "tokenType": "resource",
    "tokenCount": 6
  }
}
]]

HIDDEN_CARD_DATA = {
  "Stare into the Abyss",
  "Abandonment",
  "It's... Inside of Me (Love the Mist)",
  "It's... Inside of Me (Embrace the Mist)",
  "It's... Inside of Me (Worship the Mist)",
  "It's... Inside of Me (Become the Mist)"
}

LOCATIONS_DATA = JSON.decode(LOCATIONS_DATA_JSON)
PLAYER_CARD_DATA = JSON.decode(PLAYER_CARD_DATA_JSON)

function onload(save_state)
  local playArea = getObjectFromGUID('721ba2')
  if playArea then
    playArea.call("updateLocations", {self.getGUID()})
  end
  for _, matGuid in ipairs({"8b081b", "bd0ff4", "383d8b", "0840d5"}) do
    local mat = getObjectFromGUID(matGuid)
    if mat then
      mat.call("updatePlayerCards", {self.getGUID()})
    end
  end

  local dataHelper = getObjectFromGUID('708279')
  if dataHelper then
    dataHelper.call("updateHiddenCards", {self.getGUID()})
  end
end
