{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomToken": {
      "MergeDistancePixels": 15,
      "Stackable": false,
      "StandUp": false,
      "Thickness": 0.1
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "",
    "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1746813422552892356/271AF704E848C2542888FF3F9ED3583195A8CAF4/",
    "WidthScale": 0
  },
  "Description": "",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "5b3b0b",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "require(\"CyclopeanFoundations/CampaignLog1\")",
  "LuaScriptState": "",
  "MeasureMovement": false,
  "Name": "Custom_Token",
  "Nickname": "Cyclopean Foundations Campaign Log 1",
  "Snap": true,
  "States": {
    "2": {
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "Autoraise": true,
      "ColorDiffuse": {
        "b": 1,
        "g": 1,
        "r": 1
      },
      "CustomImage": {
        "CustomToken": {
          "MergeDistancePixels": 15,
          "Stackable": false,
          "StandUp": false,
          "Thickness": 0.2
        },
        "ImageScalar": 1,
        "ImageSecondaryURL": "",
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1746813561756453431/F430752BBFBB38B8BD332A3A35E81ED6CD670FC8/",
        "WidthScale": 0
      },
      "Description": "",
      "DragSelectable": true,
      "GMNotes": "",
      "GUID": "eda22b",
      "Grid": true,
      "GridProjection": false,
      "Hands": false,
      "HideWhenFaceDown": false,
      "IgnoreFoW": false,
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"CampaignLogLibrary\", function(require, _LOADED, __bundle_register, __bundle_modules)\n---@diagnostic disable: undefined-global\n\n-- returns the trauma values for the investigators from left to right (4x physical, 4x mental)\nfunction returnTrauma()\n  if returnTraumaCustom ~= nil then\n    return returnTraumaCustom()\n  else\n    return {\n      -- physical trauma from left to right\n      ref_buttonData.counter[1].value or 0,\n      ref_buttonData.counter[4].value or 0,\n      ref_buttonData.counter[7].value or 0,\n      ref_buttonData.counter[10].value or 0,\n\n      -- mental trauma from left to right\n      ref_buttonData.counter[2].value or 0,\n      ref_buttonData.counter[5].value or 0,\n      ref_buttonData.counter[8].value or 0,\n      ref_buttonData.counter[11].value or 0\n    }\n  end\nend\n\nfunction onLoad(savedData)\n  -- set this to true while editing and false when you have finished\n  disableSave       = false\n  checkBoxColor     = checkBoxColor or { 1, 1, 1, 0 }\n  checkboxFontColor = checkboxFontColor or { 0, 0, 0, 98 }\n  counterFontColor  = counterFontColor or { 0, 0, 0, 99 }\n  interfaceScale    = interfaceScale or { 0.1, 0.1, 0.1 }\n  minValue          = minValue or 0\n  maxValue          = maxValue or 99\n\n  if not disableSave and savedData and savedData ~= \"\" then\n    ref_buttonData = JSON.decode(savedData)\n  else\n    if createCampaignSpecificStuff ~= nil then\n      createCampaignSpecificStuff()\n    end\n    ref_buttonData = defaultButtonData\n  end\n\n  math.randomseed(seed or os.time())\n  createButtonsAndBoxes()\nend\n\nfunction updateSave()\n  self.script_state = disableSave and \"\" or JSON.encode(ref_buttonData)\nend\n\nfunction click_none() end\n\n-- generates a list of random characters from a list of eligible choices\nfunction generateCharList(num)\n  choices = choices or { 10007, 10008 }\n  local charList = {}\n  for i = 1, num do\n    table.insert(charList, choices[math.random(1, #choices)])\n  end\n  return charList\nend\n\nfunction click_checkbox(buttonIndex)\n  local state = ref_buttonData.checkbox[buttonIndex].state\n  ref_buttonData.checkbox[buttonIndex].state = not state\n  self.editButton({ index = buttonIndex - 1, label = (state and \"\" or string.char(cb_unicode[buttonIndex])) })\n  updateSave()\nend\n\nfunction click_counter(tableIndex, isRightClick)\n  local buttonIndex = tableIndex + #ref_buttonData.checkbox\n  local val = (ref_buttonData.counter[tableIndex].value or 0) + (isRightClick and -1 or 1)\n  local localMin = ref_buttonData.counter[tableIndex].minValue or minValue\n  local localMax = ref_buttonData.counter[tableIndex].maxValue or maxValue\n  ref_buttonData.counter[tableIndex].value = math.min(math.max(val, localMin), localMax)\n  self.editButton({ index = buttonIndex - 1, label = ref_buttonData.counter[tableIndex].value })\n  updateSave()\nend\n\nfunction click_textbox(i, value, selected)\n  if selected == false then\n    ref_buttonData.textbox[i].value = value\n    updateSave()\n  end\nend\n\nfunction createButtonsAndBoxes()\n  cb_unicode = generateCharList(#ref_buttonData.checkbox)\n  createCheckboxes()\n  createCounters()\n  createTextboxes()\nend\n\nfunction createCheckboxes()\n  for i, data in ipairs(ref_buttonData.checkbox) do\n    local funcName = \"checkbox\" .. i\n    self.setVar(funcName, function() click_checkbox(i) end)\n    self.createButton({\n      label          = data.state and string.char(cb_unicode[i]) or \"\",\n      click_function = funcName,\n      function_owner = self,\n      position       = data.pos,\n      rotation       = data.rot or { 0, 0, 0 },\n      height         = data.size or 300,\n      width          = data.size or 300,\n      font_size      = data.size or 300,\n      scale          = data.scale or interfaceScale,\n      color          = data.color or checkBoxColor,\n      font_color     = data.fontColor or checkboxFontColor\n    })\n  end\nend\n\nfunction createCounters()\n  for i, data in ipairs(ref_buttonData.counter) do\n    local buttonParameters          = {}\n    buttonParameters.function_owner = self\n    buttonParameters.scale          = data.scale or interfaceScale\n    buttonParameters.color          = data.color or { 1, 1, 1, 0 }\n    buttonParameters.font_color     = data.fontColor or counterFontColor\n    buttonParameters.label          = data.value or 0\n    buttonParameters.position       = data.pos\n    buttonParameters.height         = data.size or 400\n    buttonParameters.width          = data.size or 400\n    buttonParameters.font_size      = data.size or 400\n\n    local funcName                  = \"counter\" .. i\n    self.setVar(funcName, function(_, _, isRightClick) click_counter(i, isRightClick) end)\n    buttonParameters.click_function = funcName\n    self.createButton(buttonParameters)\n  end\nend\n\nfunction createTextboxes()\n  for i, data in ipairs(ref_buttonData.textbox) do\n    local funcName = \"textbox\" .. i\n    self.setVar(funcName, function(_, _, val, sel) click_textbox(i, val, sel) end)\n    self.createInput({\n      input_function = funcName,\n      function_owner = self,\n      label          = data.label or \"Click to type\",\n      alignment      = data.alignment or 2,\n      position       = data.pos,\n      rotation       = data.rot or { 0, 0, 0 },\n      scale          = data.scale or interfaceScale,\n      width          = data.width or 2350,\n      height         = ((data.font_size or 175) * (data.rows or 1)) + 40,\n      font_size      = data.font_size or 175,\n      color          = data.color,\n      font_color     = data.fontColor or { 0, 0, 0 },\n      value          = data.value or \"\"\n    })\n  end\nend\nend)\n__bundle_register(\"CyclopeanFoundations\/CampaignLog1\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- Campaign Log: Cyclopean Foundations\ndefaultButtonData = {\n  checkbox = {\n    --Prologue\n    {\n      pos = { -1.756, 0.11, -1.435 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Lost Moorings\n    {\n      pos = { -1.736, 0.11, -1.232 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Going Twice\n    {\n      pos = { -1.721, 0.11, -0.987 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Private Lives\n    {\n      pos = { -1.719, 0.11, -0.77 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Crumbling Masonry\n    {\n      pos = { -1.715, 0.11, -0.545 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --A House Divided\n    {\n      pos = { -1.702, 0.11, -0.328 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Across Dreadful Waters\n    {\n      pos = { -1.688, 0.11, -0.086 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Blood From Stones\n    {\n      pos = { -1.679, 0.11, 0.166 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Pyroclastic Flow\n    {\n      pos = { -1.663, 0.11, 0.445 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Tomb of Dead Dreams\n    {\n      pos = { -1.643, 0.11, 0.677 },\n      scale = { 0.2, 0.2, 0.2 }\n    },\n\n    --Epilogue\n    {\n      pos = { -1.632, 0.11, 0.948 },\n      scale = { 0.2, 0.2, 0.2 }\n    }\n  },\n  counter = {\n    --Notice\n    {\n      pos   = { -0.399, 0.11, -1.399 },\n      scale = { 0.2, 0.2, 0.2 },\n      size  = 2500\n    }\n  },\n  textbox = {\n    --Cultists Alive\n    {\n      pos       = { 0.543, 0.11, -1.447 },\n      rows      = 5,\n      width     = 3700,\n      font_size = 300\n    },\n    --Cultists Killed\n    {\n      pos       = { 1.404, 0.11, -1.418 },\n      rows      = 6,\n      width     = 4000,\n      font_size = 300\n    }\n  }\n}\n\nrequire(\"CampaignLogLibrary\")\n\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"CyclopeanFoundations\/CampaignLog1\")\nend)\nreturn __bundle_require(\"__root\")",
      "LuaScriptState": "",
      "MeasureMovement": false,
      "Name": "Custom_Token",
      "Nickname": "Cyclopean Foundations Campaign Log 2",
      "Snap": true,
      "Sticky": true,
      "Tooltip": true,
      "Transform": {
        "posX": -1.467,
        "posY": 1.581,
        "posZ": -26.942,
        "rotX": 0,
        "rotY": 270,
        "rotZ": 0,
        "scaleX": 3.9,
        "scaleY": 1,
        "scaleZ": 3.9
      },
      "Value": 0,
      "XmlUI": ""
    }
  },
  "Sticky": true,
  "Tags": [
    "CameraZoom_ignore",
    "CampaignLog",
    "CleanUpHelper_ignore"
  ],
  "Tooltip": true,
  "Transform": {
    "posX": -1.353,
    "posY": 1.581,
    "posZ": -26.603,
    "rotX": 0,
    "rotY": 270,
    "rotZ": 0,
    "scaleX": 3.9,
    "scaleY": 1,
    "scaleZ": 3.9
  },
  "Value": 0,
  "XmlUI": ""
}
