{
  "GUID": "bba2b6",
  "Name": "Custom_Model_Bag",
  "Transform": {
    "posX": 16.79782,
    "posY": 1.48149908,
    "posZ": -28.1949577,
    "rotX": 0,
    "rotY": 270,
    "rotZ": 0,
    "scaleX": 2,
    "scaleY": 0.11,
    "scaleZ": 1.69
  },
  "Nickname": "The (Unofficial) Return to The Innsmouth Conspiracy ",
  "Description": "v3",
  "ColorDiffuse": {
    "r": 1,
    "g": 1,
    "b": 1
  },
  "HideWhenFaceDown": false,
  "Hands": false,
  "CustomMesh": {
    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2021606446230436832/9485F353EEE9717261DC545E0AE772A33A9E7E73/",
    "MaterialIndex": 3,
    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/2278324073260846176/33EFCAF30567F8756F665BE5A2A6502E9C61C7F7/",
    "TypeIndex": 6,
    "CustomShader": {
      "SpecularColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "SpecularIntensity": 0.0,
      "SpecularSharpness": 2.0,
      "FresnelStrength": 0.0
    }
  },
  "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.5.2\n-- Fork of Memory Bag 2.0 by MrStump\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n  local bagObjList = self.getObjects()\n  for _, bagObj in ipairs(bagObjList) do\n    local data = bagObj.lua_script_state\n      if data ~= nil then\n        local j = JSON.decode(data)\n        if j ~= nil and j.ml ~= nil then\n          for guid, entry in pairs(j.ml) do\n            memoryList[guid] = entry\n          end\n        end\n      end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.1,-2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n  local objTable = {}\n  local curObj = {}\n\n  for guid in pairs(memoryListBackup) do\n    curObj = getObjectFromGUID(guid)\n    table.insert(objTable, curObj)\n  end\n\n  return objTable\n  -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n      objsToHaveButtons = getAllObjectsInMemory()\n    else\n      objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor + 2\n            objPos.z = objPos.z * globalScaleFactor * 0.9\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n              color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=500, width=500,\n                color=color,\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n      position={-0.6,0.1,-2.1}, rotation={0,0,0}, height=220, width=550,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={-0.6,0.3,-2.5}, rotation={0,0,0}, height=220, width=550,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n      self.createButton({\n          label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n          position={0.6,0.3,-2.1}, rotation={0,0,0}, height=220, width=550,\n          font_size=130, color={0,0,0}, font_color={0.25,1,0.25}\n      })\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0.6,0.3,-2.9}, rotation={0,0,0}, height=220, width=550,\n                font_size=130, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0.6,0.3,-2.5}, rotation={0,0,0}, height=220, width=550,\n                font_size=130, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-0.6,0.3,-2.9}, rotation={0,0,0}, height=220, width=550,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj, move)\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n       theList = moveList\n       if previousGuid ~= nil and previousGuid ~= selectedGuid then\n         local prevObj = getObjectFromGUID(previousGuid)\n         prevObj.highlightOff()\n         self.editButton({index=previousIndex, color=colorMove})\n         theList[previousGuid] = nil\n       end\n       previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n      color = {0.75,0.25,0.25,0.6}\n      if move == true then\n        color = colorMove\n      end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n      memoryList = memoryListBackup\n      broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n  for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n        broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            memoryListBackup[guid] = nil\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Removed\", {1,1,1})\n        memoryList = memoryListBackup\n        updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0.6,0.1,2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={-0.6,0.1,2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.1,-2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n---    self.createButton({\n---      label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n---      position={-2.8,0.3,0}, rotation={0,0,0}, height=350, width=800,\n---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n---    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n\tlocal angle = math.rad(obj.getRotation().y)\n  local x = desiredPos.x * math.sin(angle)\n\tlocal z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend",
  "LuaScriptState": "{\"ml\":{\"7873f9\":{\"lock\":false,\"pos\":{\"x\":64.9477,\"y\":1.5515,\"z\":19.8634},\"rot\":{\"x\":0,\"y\":90.0039,\"z\":0}},\"88893d\":{\"lock\":false,\"pos\":{\"x\":62.9681,\"y\":1.2965,\"z\":4.3727},\"rot\":{\"x\":0,\"y\":89.9772,\"z\":0}},\"cd65ed\":{\"lock\":false,\"pos\":{\"x\":52.092,\"y\":1.4815,\"z\":38.2203},\"rot\":{\"x\":0,\"y\":269.9921,\"z\":0}},\"d14543\":{\"lock\":false,\"pos\":{\"x\":58.3313,\"y\":1.2965,\"z\":48.2836},\"rot\":{\"x\":0,\"y\":89.9693,\"z\":0}},\"e090cf\":{\"lock\":false,\"pos\":{\"x\":69.2017,\"y\":1.5515,\"z\":19.8799},\"rot\":{\"x\":0,\"y\":90.0039,\"z\":0}},\"f938b7\":{\"lock\":false,\"pos\":{\"x\":57.6851,\"y\":1.2965,\"z\":29.2666},\"rot\":{\"x\":0,\"y\":89.9514,\"z\":0}}}}",
  "AttachedDecals": [
    {
      "Transform": {
        "posX": -0.0021877822,
        "posY": -0.08963572,
        "posZ": -0.00288731651,
        "rotX": 270,
        "rotY": 0,
        "rotZ": 0,
        "scaleX": 2,
        "scaleY": 2,
        "scaleZ": 2
      },
      "CustomDecal": {
        "Name": "dunwich_back",
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/",
        "Size": 7.4
      }
    }
  ],
  "ContainedObjects": [
    {
      "GUID": "7873f9",
      "Name": "Notecard",
      "Transform": {
        "rotY": 90,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "The Unofficial Return to Innsmouth",
      "Description": "\nTo unpack everything, just press all the \"Place\" buttons and you should get everything splayed nice at the top of the virtual table.\n\nPlease make sure to actually read the rules insert, there are some important notes in there that you need to be aware of.\n\nEnjoy :)",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "HideWhenFaceDown": false,
      "Hands": false
    },
    {
      "GUID": "88893d",
      "Name": "Bag",
      "Transform": {
        "rotY": 90,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Scenarios",
      "Description": "RtTIC",
      "ColorDiffuse": {
        "r": 0.0,
        "g": 0.247903466,
        "b": 0.7019608
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
      "LuaScriptState": "{\"ml\":{\"4a9996\":{\"lock\":false,\"pos\":{\"x\":49.53,\"y\":1.2966,\"z\":2.9526},\"rot\":{\"x\":0,\"y\":90.0163,\"z\":0}},\"83d38a\":{\"lock\":false,\"pos\":{\"x\":49.5079,\"y\":1.2966,\"z\":6.6046},\"rot\":{\"x\":0,\"y\":90.0115,\"z\":0}},\"8c5dd1\":{\"lock\":false,\"pos\":{\"x\":53.8931,\"y\":1.2965,\"z\":2.7602},\"rot\":{\"x\":0,\"y\":90.019,\"z\":0}},\"9637e1\":{\"lock\":false,\"pos\":{\"x\":45.7209,\"y\":1.2966,\"z\":6.3596},\"rot\":{\"x\":0,\"y\":90.0149,\"z\":0}},\"9f1504\":{\"lock\":false,\"pos\":{\"x\":53.8031,\"y\":1.2966,\"z\":6.6296},\"rot\":{\"x\":0,\"y\":90.0157,\"z\":0}},\"a2295c\":{\"lock\":false,\"pos\":{\"x\":58.0625,\"y\":1.2965,\"z\":6.4419},\"rot\":{\"x\":0,\"y\":90.016,\"z\":0}},\"cf9a09\":{\"lock\":false,\"pos\":{\"x\":45.6735,\"y\":1.2965,\"z\":2.8199},\"rot\":{\"x\":0,\"y\":90.016,\"z\":0}},\"f53c0c\":{\"lock\":false,\"pos\":{\"x\":58.2463,\"y\":1.2965,\"z\":2.9136},\"rot\":{\"x\":0,\"y\":90.018,\"z\":0}}}}",
      "ContainedObjects": [
        {
          "GUID": "4a9996",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Lair of Dagon",
          "Description": "RtTIC v2",
          "ColorDiffuse": {
            "r": 0.03979958,
            "g": 0.282095581,
            "b": 0.736933768
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"73242b\":{\"lock\":false,\"pos\":{\"x\":49.8387,\"y\":1.4951,\"z\":-0.7406},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"a17e99\":{\"lock\":false,\"pos\":{\"x\":49.6717,\"y\":1.4951,\"z\":-4.039},\"rot\":{\"x\":0,\"y\":180,\"z\":0}},\"abfb84\":{\"lock\":false,\"pos\":{\"x\":49.625,\"y\":1.4951,\"z\":-10.489},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"dfd00a\":{\"lock\":false,\"pos\":{\"x\":49.5817,\"y\":1.5121,\"z\":-7.5982},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "73242b",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887400,
              "CustomDeck": {
                "8874": {
                  "FaceURL": "https://i.imgur.com/FGgWkf0.png",
                  "BackURL": "https://i.imgur.com/Vqy0tax.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "a17e99",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 888000,
              "SidewaysCard": true,
              "CustomDeck": {
                "8880": {
                  "FaceURL": "https://i.imgur.com/4QI0Ogq.png",
                  "BackURL": "https://i.imgur.com/GqrYHJy.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "abfb84",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Stirring in his Sleep",
              "GMNotes": "{\"TtsZoopGuid\":\"239fedd8-2dab-4970-94c6-95fa3b843a87\",\"type\":\"Treachery\",\"victory\":1,\"class\":\"Mythos\",\"traits\":\"Hazard. Omen\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 886500,
              "CustomDeck": {
                "8865": {
                  "FaceURL": "https://i.imgur.com/XxpT0wp.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "dfd00a",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                879300,
                879400
              ],
              "CustomDeck": {
                "8793": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/sfzMWYe.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8794": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/HCcWatA.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "ef2d99",
                  "Name": "CardCustom",
                  "Transform": {
                    "rotY": 270,
                    "rotZ": 180,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Tidal Tunnel",
                  "Description": "Cave.",
                  "GMNotes": "{\n  \"id\": \"RtTIC_44\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"Circle\",\n    \"connections\": \"Diamond\",\n    \"uses\": [\n      {\n        \"count\": 1,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
                  "Tags": [
                    "Location",
                    "ScenarioCard"
                  ],
                  "CardID": 879300,
                  "CustomDeck": {
                    "8793": {
                      "FaceURL": "https://i.imgur.com/EfaWArI.png",
                      "BackURL": "https://i.imgur.com/sfzMWYe.png",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "5c3a62",
                  "Name": "CardCustom",
                  "Transform": {
                    "rotY": 270,
                    "rotZ": 180,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Tidal Tunnel",
                  "Description": "Cave.",
                  "GMNotes": "{\n  \"id\": \"RtTIC_45\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"Circle\",\n    \"connections\": \"Diamond\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 1,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
                  "Tags": [
                    "Location",
                    "ScenarioCard"
                  ],
                  "CardID": 879400,
                  "CustomDeck": {
                    "8794": {
                      "FaceURL": "https://i.imgur.com/EfaWArI.png",
                      "BackURL": "https://i.imgur.com/HCcWatA.png",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "GUID": "83d38a",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "In Too Deep",
          "Description": "RtTIC v2",
          "ColorDiffuse": {
            "r": 0.275961816,
            "g": 0.435096622,
            "b": 0.729965031
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"8ff7a1\":{\"lock\":false,\"pos\":{\"x\":50.464,\"y\":1.5217,\"z\":16.8057},\"rot\":{\"x\":0,\"y\":269.9999,\"z\":0}},\"dcadd8\":{\"lock\":false,\"pos\":{\"x\":50.469,\"y\":1.4951,\"z\":9.889},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e52186\":{\"lock\":false,\"pos\":{\"x\":50.3597,\"y\":1.4951,\"z\":13.0122},\"rot\":{\"x\":0,\"y\":180.0001,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "8ff7a1",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                881800,
                882000,
                882100,
                882200
              ],
              "CustomDeck": {
                "8818": {
                  "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8820": {
                  "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8821": {
                  "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8822": {
                  "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "59f795",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Innsmouth Influence",
                  "GMNotes": "{\"TtsZoopGuid\":\"b3678108-94c2-4869-965f-10668001b2a4\",\"type\":\"Treachery\",\"permanent\":true,\"traits\":\"Curse\",\"weakness\":true}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 881800,
                  "CustomDeck": {
                    "8818": {
                      "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "83280f",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Innsmouth Influence",
                  "GMNotes": "{\"TtsZoopGuid\":\"b3678108-94c2-4869-965f-10668001b2a4\",\"type\":\"Treachery\",\"permanent\":true,\"traits\":\"Curse\",\"weakness\":true}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 882000,
                  "CustomDeck": {
                    "8820": {
                      "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "be44a0",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Innsmouth Influence",
                  "GMNotes": "{\"TtsZoopGuid\":\"b3678108-94c2-4869-965f-10668001b2a4\",\"type\":\"Treachery\",\"permanent\":true,\"traits\":\"Curse\",\"weakness\":true}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 882100,
                  "CustomDeck": {
                    "8821": {
                      "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "e00002",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Innsmouth Influence",
                  "GMNotes": "{\"TtsZoopGuid\":\"b3678108-94c2-4869-965f-10668001b2a4\",\"type\":\"Treachery\",\"permanent\":true,\"traits\":\"Curse\",\"weakness\":true}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 882200,
                  "CustomDeck": {
                    "8822": {
                      "FaceURL": "https://i.imgur.com/vI4hfQ9.png",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            },
            {
              "GUID": "dcadd8",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887000,
              "CustomDeck": {
                "8870": {
                  "FaceURL": "https://i.imgur.com/X4mF8kT.png",
                  "BackURL": "https://i.imgur.com/xGU4zga.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e52186",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887800,
              "SidewaysCard": true,
              "CustomDeck": {
                "8878": {
                  "FaceURL": "https://i.imgur.com/u7wiuV1.png",
                  "BackURL": "https://i.imgur.com/nOAYobG.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "8c5dd1",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Light in the Fog",
          "Description": "RtTIC v2",
          "ColorDiffuse": {
            "r": 0.093278,
            "g": 0.3164954,
            "b": 0.7334495
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"4937de\":{\"lock\":false,\"pos\":{\"x\":53.6675,\"y\":1.4951,\"z\":-4.0726},\"rot\":{\"x\":0,\"y\":180.0001,\"z\":0}},\"d6830e\":{\"lock\":false,\"pos\":{\"x\":53.4937,\"y\":1.5265,\"z\":-10.4568},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"f6062d\":{\"lock\":false,\"pos\":{\"x\":53.6697,\"y\":1.4951,\"z\":-0.6437},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "4937de",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887900,
              "SidewaysCard": true,
              "CustomDeck": {
                "8879": {
                  "FaceURL": "https://i.imgur.com/XxYZzE9.png",
                  "BackURL": "https://i.imgur.com/r6G725e.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "d6830e",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                884300,
                884000,
                884100,
                884400,
                100100
              ],
              "CustomDeck": {
                "8843": {
                  "FaceURL": "https://i.imgur.com/Ajw4ss3.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8840": {
                  "FaceURL": "https://i.imgur.com/Ajw4ss3.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8841": {
                  "FaceURL": "https://i.imgur.com/Ajw4ss3.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8844": {
                  "FaceURL": "https://i.imgur.com/xdN850P.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "1001": {
                  "FaceURL": "https://i.imgur.com/xdN850P.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "fedf3b",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Deep One Grappler",
                  "GMNotes": "{\"TtsZoopGuid\":\"a788ea99-349f-48c5-8592-0525b296b870\",\"type\":\"Enemy\",\"class\":\"Mythos\",\"traits\":\"Humanoid. Monster. Deep One\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 884300,
                  "CustomDeck": {
                    "8843": {
                      "FaceURL": "https://i.imgur.com/Ajw4ss3.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "e00005",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Deep One Grappler",
                  "GMNotes": "{\"TtsZoopGuid\":\"a788ea99-349f-48c5-8592-0525b296b870\",\"type\":\"Enemy\",\"class\":\"Mythos\",\"traits\":\"Humanoid. Monster. Deep One\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 884000,
                  "CustomDeck": {
                    "8840": {
                      "FaceURL": "https://i.imgur.com/Ajw4ss3.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "e32c7a",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Deep One Grappler",
                  "GMNotes": "{\"TtsZoopGuid\":\"a788ea99-349f-48c5-8592-0525b296b870\",\"type\":\"Enemy\",\"class\":\"Mythos\",\"traits\":\"Humanoid. Monster. Deep One\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 884100,
                  "CustomDeck": {
                    "8841": {
                      "FaceURL": "https://i.imgur.com/Ajw4ss3.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "87671f",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Born to Breed",
                  "GMNotes": "{\"TtsZoopGuid\":\"c6f504c9-c549-45d8-ad41-695256221ab7\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Omen\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 884400,
                  "CustomDeck": {
                    "8844": {
                      "FaceURL": "https://i.imgur.com/xdN850P.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "f7dd2d",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Born to Breed",
                  "GMNotes": "{\"TtsZoopGuid\":\"c6f504c9-c549-45d8-ad41-695256221ab7\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Omen\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 100100,
                  "CustomDeck": {
                    "1001": {
                      "FaceURL": "https://i.imgur.com/xdN850P.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            },
            {
              "GUID": "f6062d",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887300,
              "CustomDeck": {
                "8873": {
                  "FaceURL": "https://i.imgur.com/NnmSGca.png",
                  "BackURL": "https://i.imgur.com/4xI2apW.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "9637e1",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Devil Reef",
          "Description": "RtTIC",
          "ColorDiffuse": {
            "r": 0.198997259,
            "g": 0.384492546,
            "b": 0.736933768
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"4e1785\":{\"lock\":false,\"pos\":{\"x\":46.1618,\"y\":1.4951,\"z\":13.4141},\"rot\":{\"x\":0,\"y\":270,\"z\":180}},\"b6dd52\":{\"lock\":false,\"pos\":{\"x\":46.0429,\"y\":1.4951,\"z\":10.1086},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00001\":{\"lock\":false,\"pos\":{\"x\":45.9969,\"y\":1.4951,\"z\":19.7721},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00002\":{\"lock\":false,\"pos\":{\"x\":46.0174,\"y\":1.4951,\"z\":16.4818},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "4e1785",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "rotZ": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Devil Reef",
              "Description": "Ocean. Island.",
              "GMNotes": "{\n  \"id\": \"RtTIC_34\",\n  \"type\": \"Location\",\n  \"traits\": \"Ocean. Island.\",\n  \"cycle\": \"The Innsmouth Conspiracy\",\n  \"locationFront\": {\n    \"icons\": \"Circle\",\n    \"connections\": \"Triangle\"\n  },\n  \"locationBack\": {\n    \"icons\": \"Triangle|Circle\",\n    \"connections\": \"Triangle|Circle|Square|Heart|Star|Diamond|Plus\"\n  }\n}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 879000,
              "CustomDeck": {
                "8790": {
                  "FaceURL": "https://i.imgur.com/FYwsdpA.png",
                  "BackURL": "https://i.imgur.com/FG2bmWm.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "b6dd52",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887100,
              "CustomDeck": {
                "8871": {
                  "FaceURL": "https://i.imgur.com/4l7ncqP.png",
                  "BackURL": "https://i.imgur.com/dUxZrGN.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e00001",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Shrine to Hydra",
              "GMNotes": "{\"TtsZoopGuid\":\"2129e791-fb42-4c5d-81f2-30a5fead77d3\",\"type\":\"Location\",\"class\":\"Mythos\",\"traits\":\"Cave\",\"locationFront\":{\"icons\":null,\"connections\":\"Diamond\",\"uses\":[{\"token\":\"clue\",\"type\":\"Clue\",\"countPerInvestigator\":1}],\"victory\":1},\"locationBack\":{\"icons\":null,\"connections\":\"Diamond\"}}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 883000,
              "CustomDeck": {
                "8830": {
                  "FaceURL": "https://i.imgur.com/zoUx9Tt.jpg",
                  "BackURL": "https://i.imgur.com/X4vY3JG.jpg",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e00002",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Fishing Vessel",
              "Description": "Riding the waves",
              "GMNotes": "{\"TtsZoopGuid\":\"288a5294-a19e-46ec-9c09-25f5670acbc6\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Vehicle\"}",
              "Tags": [
                "Asset",
                "ScenarioCard"
              ],
              "CardID": 882800,
              "CustomDeck": {
                "8828": {
                  "FaceURL": "https://i.imgur.com/lrcCoAq.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "9f1504",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Vanishing of Elina Harper",
          "Description": "RtTIC v2",
          "ColorDiffuse": {
            "r": 0.341344416,
            "g": 0.4766137,
            "b": 0.7229964
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"62e46d\":{\"lock\":false,\"pos\":{\"x\":54.61,\"y\":1.4951,\"z\":12.8981},\"rot\":{\"x\":0,\"y\":180,\"z\":0}},\"b3258b\":{\"lock\":false,\"pos\":{\"x\":54.4408,\"y\":1.5169,\"z\":16.8403},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"c0b203\":{\"lock\":false,\"pos\":{\"x\":54.4923,\"y\":1.4951,\"z\":9.829},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"f3301c\":{\"lock\":false,\"pos\":{\"x\":54.3964,\"y\":1.5121,\"z\":19.8967},\"rot\":{\"x\":0,\"y\":270.0002,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "62e46d",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887700,
              "SidewaysCard": true,
              "CustomDeck": {
                "8877": {
                  "FaceURL": "https://i.imgur.com/gHyihXY.png",
                  "BackURL": "https://i.imgur.com/ysO2Rc7.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "b3258b",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "Asset",
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                880800,
                881100,
                881200
              ],
              "CustomDeck": {
                "8808": {
                  "FaceURL": "https://i.imgur.com/MfbSjma.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8811": {
                  "FaceURL": "https://i.imgur.com/SMyxTFt.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8812": {
                  "FaceURL": "https://i.imgur.com/MG0RBJe.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "35237b",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Roderick",
                  "Description": "\"Just Roderick\"",
                  "GMNotes": "{\"TtsZoopGuid\":\"25ae1a02-512d-4ace-bcf0-a795caeaf87e\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Ally. Hybrid\",\"cost\":0}",
                  "Tags": [
                    "Asset",
                    "ScenarioCard"
                  ],
                  "CardID": 880800,
                  "CustomDeck": {
                    "8808": {
                      "FaceURL": "https://i.imgur.com/MfbSjma.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "3f0fdf",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Ron Stalwick",
                  "Description": "Spinning his yarn",
                  "GMNotes": "{\"TtsZoopGuid\":\"1bf85d3a-8850-41fa-bb4e-40e745126d65\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Ally. Hybrid\",\"cost\":0}",
                  "Tags": [
                    "Asset",
                    "ScenarioCard"
                  ],
                  "CardID": 881100,
                  "CustomDeck": {
                    "8811": {
                      "FaceURL": "https://i.imgur.com/SMyxTFt.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "567cb8",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "\"Little\" Gemma",
                  "Description": "Sees more than she lets on",
                  "GMNotes": "{\"TtsZoopGuid\":\"7148ac81-13fa-47c7-b56b-d3e755157d84\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Ally. Hybrid\",\"cost\":0}",
                  "Tags": [
                    "Asset",
                    "ScenarioCard"
                  ],
                  "CardID": 881200,
                  "CustomDeck": {
                    "8812": {
                      "FaceURL": "https://i.imgur.com/MG0RBJe.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            },
            {
              "GUID": "c0b203",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 886900,
              "CustomDeck": {
                "8869": {
                  "FaceURL": "https://i.imgur.com/ysBytS9.png",
                  "BackURL": "https://i.imgur.com/nH1kKVC.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "f3301c",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                100200,
                881000
              ],
              "CustomDeck": {
                "1002": {
                  "FaceURL": "https://i.imgur.com/2sBsKZB.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8810": {
                  "FaceURL": "https://i.imgur.com/2sBsKZB.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "a8f469",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Growing Suspicion",
                  "GMNotes": "{\"TtsZoopGuid\":\"eca65884-bdd5-41ff-8894-7eeb1998b0d1\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Scheme\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 100200,
                  "CustomDeck": {
                    "1002": {
                      "FaceURL": "https://i.imgur.com/2sBsKZB.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "e00002",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Growing Suspicion",
                  "GMNotes": "{\"TtsZoopGuid\":\"eca65884-bdd5-41ff-8894-7eeb1998b0d1\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Scheme\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 881000,
                  "CustomDeck": {
                    "8810": {
                      "FaceURL": "https://i.imgur.com/2sBsKZB.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "GUID": "a2295c",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Pit of Despair",
          "Description": "RtTIC v2",
          "ColorDiffuse": {
            "r": 0.405415982,
            "g": 0.517581642,
            "b": 0.716028
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"6b5244\":{\"lock\":false,\"pos\":{\"x\":58.2152,\"y\":1.5217,\"z\":19.8239},\"rot\":{\"x\":0,\"y\":269.9999,\"z\":0}},\"913a1c\":{\"lock\":false,\"pos\":{\"x\":58.2083,\"y\":1.4951,\"z\":13.1483},\"rot\":{\"x\":0,\"y\":180,\"z\":0}},\"a8fb7f\":{\"lock\":false,\"pos\":{\"x\":58.6262,\"y\":1.4951,\"z\":9.7701},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "6b5244",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                880100,
                879900,
                879800,
                880200
              ],
              "CustomDeck": {
                "8801": {
                  "FaceURL": "https://i.imgur.com/h0FskoW.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8799": {
                  "FaceURL": "https://i.imgur.com/h0FskoW.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8798": {
                  "FaceURL": "https://i.imgur.com/XtbjT9E.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8802": {
                  "FaceURL": "https://i.imgur.com/XtbjT9E.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "1e3930",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Lost in the Caves",
                  "GMNotes": "{\"TtsZoopGuid\":\"7adee758-d86f-418d-9867-6e23e5c685af\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Blunder\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 880100,
                  "CustomDeck": {
                    "8801": {
                      "FaceURL": "https://i.imgur.com/h0FskoW.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "e00002",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Lost in the Caves",
                  "GMNotes": "{\"TtsZoopGuid\":\"7adee758-d86f-418d-9867-6e23e5c685af\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Blunder\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 879900,
                  "CustomDeck": {
                    "8799": {
                      "FaceURL": "https://i.imgur.com/h0FskoW.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "3ccfc7",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Troubling Memories",
                  "GMNotes": "{\"TtsZoopGuid\":\"9ee0d7e4-9121-4d1a-9aa2-1d8240ccff15\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Terror\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 879800,
                  "CustomDeck": {
                    "8798": {
                      "FaceURL": "https://i.imgur.com/XtbjT9E.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "d2d1c8",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Troubling Memories",
                  "GMNotes": "{\"TtsZoopGuid\":\"9ee0d7e4-9121-4d1a-9aa2-1d8240ccff15\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Terror\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 880200,
                  "CustomDeck": {
                    "8802": {
                      "FaceURL": "https://i.imgur.com/XtbjT9E.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            },
            {
              "GUID": "913a1c",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887600,
              "SidewaysCard": true,
              "CustomDeck": {
                "8876": {
                  "FaceURL": "https://i.imgur.com/0EVvcIB.png",
                  "BackURL": "https://i.imgur.com/5oVF9MM.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "a8fb7f",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 886800,
              "CustomDeck": {
                "8868": {
                  "FaceURL": "https://i.imgur.com/yPayxYa.png",
                  "BackURL": "https://i.imgur.com/02t2wvG.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "cf9a09",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Into the Maelstrom",
          "Description": "RtTIC v2",
          "ColorDiffuse": {
            "r": 0.0,
            "g": 0.231155664,
            "b": 0.670731843
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"55876d\":{\"lock\":false,\"pos\":{\"x\":46.0127,\"y\":1.5217,\"z\":-10.5564},\"rot\":{\"x\":0,\"y\":269.9765,\"z\":0}},\"801eac\":{\"lock\":false,\"pos\":{\"x\":46.1326,\"y\":1.4951,\"z\":-0.6129},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"962029\":{\"lock\":false,\"pos\":{\"x\":46.2472,\"y\":1.5169,\"z\":-4.0865},\"rot\":{\"x\":0,\"y\":180,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "55876d",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                885300,
                885000,
                885400,
                885500
              ],
              "CustomDeck": {
                "8853": {
                  "FaceURL": "https://i.imgur.com/at3v3Wl.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8850": {
                  "FaceURL": "https://i.imgur.com/at3v3Wl.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8854": {
                  "FaceURL": "https://i.imgur.com/7tDMp59.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8855": {
                  "FaceURL": "https://i.imgur.com/5QUljom.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "0c8c13",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Stirring in their Sleep",
                  "GMNotes": "{\"TtsZoopGuid\":\"11019263-b780-410a-8c35-d8f59f5acbfe\",\"type\":\"Treachery\",\"victory\":1,\"class\":\"Mythos\",\"traits\":\"Hazard. Omen\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 885300,
                  "CustomDeck": {
                    "8853": {
                      "FaceURL": "https://i.imgur.com/at3v3Wl.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "aecd1b",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Stirring in their Sleep",
                  "GMNotes": "{\"TtsZoopGuid\":\"11019263-b780-410a-8c35-d8f59f5acbfe\",\"type\":\"Treachery\",\"victory\":1,\"class\":\"Mythos\",\"traits\":\"Hazard. Omen\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 885000,
                  "CustomDeck": {
                    "8850": {
                      "FaceURL": "https://i.imgur.com/at3v3Wl.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "e00005",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Presence of the Mother",
                  "GMNotes": "{\"TtsZoopGuid\":\"3ea9b1dc-5a28-4cc7-bf4c-8956b18bf378\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Power\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 885400,
                  "CustomDeck": {
                    "8854": {
                      "FaceURL": "https://i.imgur.com/7tDMp59.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "eddb48",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Presence of the Father",
                  "GMNotes": "{\"TtsZoopGuid\":\"087c72cd-a3d1-486d-9866-d764fdbcf26a\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Power\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 885500,
                  "CustomDeck": {
                    "8855": {
                      "FaceURL": "https://i.imgur.com/5QUljom.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            },
            {
              "GUID": "801eac",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887500,
              "CustomDeck": {
                "8875": {
                  "FaceURL": "https://i.imgur.com/exmhz7a.png",
                  "BackURL": "https://i.imgur.com/nF721Nu.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "962029",
              "Name": "Deck",
              "Transform": {
                "rotY": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Hands": false,
              "SidewaysCard": true,
              "DeckIDs": [
                888200,
                888100,
                888300
              ],
              "CustomDeck": {
                "8882": {
                  "FaceURL": "https://i.imgur.com/N9wTXhr.png",
                  "BackURL": "https://i.imgur.com/Niy1c91.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8881": {
                  "FaceURL": "https://i.imgur.com/TEOXrVk.png",
                  "BackURL": "https://i.imgur.com/731vnTi.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8883": {
                  "FaceURL": "https://i.imgur.com/gnt31MZ.png",
                  "BackURL": "https://i.imgur.com/8XsdjWI.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "5cadcf",
                  "Name": "CardCustom",
                  "Transform": {
                    "rotY": 180,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "CardID": 888200,
                  "SidewaysCard": true,
                  "CustomDeck": {
                    "8882": {
                      "FaceURL": "https://i.imgur.com/N9wTXhr.png",
                      "BackURL": "https://i.imgur.com/Niy1c91.png",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "347094",
                  "Name": "CardCustom",
                  "Transform": {
                    "rotY": 180,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "CardID": 888100,
                  "SidewaysCard": true,
                  "CustomDeck": {
                    "8881": {
                      "FaceURL": "https://i.imgur.com/TEOXrVk.png",
                      "BackURL": "https://i.imgur.com/731vnTi.png",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "344b9b",
                  "Name": "CardCustom",
                  "Transform": {
                    "rotY": 180,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "CardID": 888300,
                  "SidewaysCard": true,
                  "CustomDeck": {
                    "8883": {
                      "FaceURL": "https://i.imgur.com/gnt31MZ.png",
                      "BackURL": "https://i.imgur.com/8XsdjWI.png",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "GUID": "f53c0c",
          "Name": "Bag",
          "Transform": {
            "rotY": 90,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Horror in High Gear",
          "Description": "RtTIC v2",
          "ColorDiffuse": {
            "r": 0.137372047,
            "g": 0.347437233,
            "b": 0.736933768
          },
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
          "LuaScriptState": "{\"ml\":{\"79adfa\":{\"lock\":false,\"pos\":{\"x\":57.3385,\"y\":1.5121,\"z\":-10.7334},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"bd4576\":{\"lock\":false,\"pos\":{\"x\":57.516,\"y\":1.5121,\"z\":-7.805},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"d22e26\":{\"lock\":false,\"pos\":{\"x\":57.4919,\"y\":1.4951,\"z\":-0.7838},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}}}",
          "ContainedObjects": [
            {
              "GUID": "79adfa",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                883600,
                100000
              ],
              "CustomDeck": {
                "8836": {
                  "FaceURL": "https://i.imgur.com/V95eLp5.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "1000": {
                  "FaceURL": "https://i.imgur.com/V95eLp5.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "118580",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Wrecked!",
                  "GMNotes": "{\"TtsZoopGuid\":\"0541a439-5367-439a-82cc-ab82e656c490\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Blunder\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 883600,
                  "CustomDeck": {
                    "8836": {
                      "FaceURL": "https://i.imgur.com/V95eLp5.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "966f23",
                  "Name": "Card",
                  "Transform": {
                    "rotY": 270,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Wrecked!",
                  "GMNotes": "{\"TtsZoopGuid\":\"0541a439-5367-439a-82cc-ab82e656c490\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Blunder\"}",
                  "Tags": [
                    "ScenarioCard"
                  ],
                  "CardID": 100000,
                  "CustomDeck": {
                    "1000": {
                      "FaceURL": "https://i.imgur.com/V95eLp5.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            },
            {
              "GUID": "bd4576",
              "Name": "Deck",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "Hands": false,
              "DeckIDs": [
                879200,
                879100
              ],
              "CustomDeck": {
                "8792": {
                  "FaceURL": "https://i.imgur.com/e0GStkL.png",
                  "BackURL": "https://i.imgur.com/zTjzSTG.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                },
                "8791": {
                  "FaceURL": "https://i.imgur.com/e0GStkL.png",
                  "BackURL": "https://i.imgur.com/u68LSHC.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "ContainedObjects": [
                {
                  "GUID": "4cce24",
                  "Name": "CardCustom",
                  "Transform": {
                    "rotY": 270,
                    "rotZ": 180,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Old Innsmouth Road",
                  "Description": "Road.",
                  "GMNotes": "{\n  \"id\": \"RtTIC_38\",\n  \"type\": \"Location\",\n  \"traits\": \"Road.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 0,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
                  "Tags": [
                    "Location",
                    "ScenarioCard"
                  ],
                  "CardID": 879200,
                  "CustomDeck": {
                    "8792": {
                      "FaceURL": "https://i.imgur.com/e0GStkL.png",
                      "BackURL": "https://i.imgur.com/zTjzSTG.png",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                },
                {
                  "GUID": "0cc35e",
                  "Name": "CardCustom",
                  "Transform": {
                    "rotY": 270,
                    "rotZ": 180,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Old Innsmouth Road",
                  "Description": "Road.",
                  "GMNotes": "{\n  \"id\": \"RtTIC_37\",\n  \"type\": \"Location\",\n  \"traits\": \"Road.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 2,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
                  "Tags": [
                    "Location",
                    "ScenarioCard"
                  ],
                  "CardID": 879100,
                  "CustomDeck": {
                    "8791": {
                      "FaceURL": "https://i.imgur.com/e0GStkL.png",
                      "BackURL": "https://i.imgur.com/u68LSHC.png",
                      "NumWidth": 1,
                      "NumHeight": 1,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  }
                }
              ]
            },
            {
              "GUID": "d22e26",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "CardID": 887200,
              "CustomDeck": {
                "8872": {
                  "FaceURL": "https://i.imgur.com/xficfUa.png",
                  "BackURL": "https://i.imgur.com/yU48Nz2.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        }
      ]
    },
    {
      "GUID": "cd65ed",
      "Name": "Custom_PDF",
      "Transform": {
        "rotY": 270,
        "scaleX": 4.173984,
        "scaleY": 1.0,
        "scaleZ": 4.173984
      },
      "Nickname": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomPDF": {
        "PDFUrl": "https://derbk.com/ancientevils/wp-content/uploads/2023/06/AHLCG_RTTIC_rules_insert_12.pdf",
        "PDFPassword": "",
        "PDFPage": 0,
        "PDFPageOffset": 0
      }
    },
    {
      "GUID": "d14543",
      "Name": "Bag",
      "Transform": {
        "rotY": 90,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Player Cards",
      "Description": "RtTIC v2",
      "ColorDiffuse": {
        "r": 0.441007942,
        "g": 0.0,
        "b": 0.7019608
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
      "LuaScriptState": "{\"ml\":{\"076f2f\":{\"lock\":false,\"pos\":{\"x\":45.781,\"y\":1.4951,\"z\":54.1381},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"24e0fd\":{\"lock\":false,\"pos\":{\"x\":49.3787,\"y\":1.4951,\"z\":46.0657},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"2a436e\":{\"lock\":false,\"pos\":{\"x\":52.7981,\"y\":1.4951,\"z\":46.1104},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"52e1d1\":{\"lock\":false,\"pos\":{\"x\":52.887,\"y\":1.4951,\"z\":54.1825},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"8a77a8\":{\"lock\":false,\"pos\":{\"x\":52.9509,\"y\":1.4951,\"z\":51.6207},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"926f7b\":{\"lock\":false,\"pos\":{\"x\":45.8597,\"y\":1.4951,\"z\":51.5307},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"a9aae9\":{\"lock\":false,\"pos\":{\"x\":45.9065,\"y\":1.4951,\"z\":43.5737},\"rot\":{\"x\":0,\"y\":270.0001,\"z\":0}},\"b6652f\":{\"lock\":false,\"pos\":{\"x\":53.0228,\"y\":1.4951,\"z\":56.7418},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00006\":{\"lock\":false,\"pos\":{\"x\":49.3301,\"y\":1.4951,\"z\":51.624},\"rot\":{\"x\":0,\"y\":270.0001,\"z\":0}},\"e00007\":{\"lock\":false,\"pos\":{\"x\":49.418,\"y\":1.4951,\"z\":56.8898},\"rot\":{\"x\":0,\"y\":270.0288,\"z\":0}},\"e00008\":{\"lock\":false,\"pos\":{\"x\":49.3747,\"y\":1.4951,\"z\":54.1834},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0000d\":{\"lock\":false,\"pos\":{\"x\":45.7793,\"y\":1.4951,\"z\":56.8458},\"rot\":{\"x\":0,\"y\":270.0012,\"z\":0}},\"e00010\":{\"lock\":false,\"pos\":{\"x\":52.7826,\"y\":1.4951,\"z\":43.5069},\"rot\":{\"x\":0,\"y\":269.9844,\"z\":0}},\"e00011\":{\"lock\":false,\"pos\":{\"x\":52.7955,\"y\":1.4951,\"z\":48.7061},\"rot\":{\"x\":0,\"y\":270.0228,\"z\":0}},\"e00015\":{\"lock\":false,\"pos\":{\"x\":49.3169,\"y\":1.4951,\"z\":43.5559},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00016\":{\"lock\":false,\"pos\":{\"x\":49.3056,\"y\":1.4951,\"z\":48.7036},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0001a\":{\"lock\":false,\"pos\":{\"x\":45.7582,\"y\":1.4951,\"z\":48.8483},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}}}",
      "ContainedObjects": [
        {
          "GUID": "076f2f",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Plan of Action",
          "GMNotes": "{\"TtsZoopGuid\":\"b86306a2-4697-4291-8b45-de0cf128feae\",\"type\":\"Skill\",\"class\":\"Rogue\",\"traits\":\"Practiced. Blessed\",\"agilityIcons\":1,\"combatIcons\":1,\"intellectIcons\":1,\"wildIcons\":1,\"level\":2}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 871500,
          "CustomDeck": {
            "8715": {
              "FaceURL": "https://i.imgur.com/OEZtjvm.jpg",
              "BackURL": "https://i.imgur.com/lYdpS8o.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "24e0fd",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Token of Faith",
          "GMNotes": "{\"TtsZoopGuid\":\"11fcbfaf-b445-403d-a134-c4ee6ec883be\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Item. Charm\",\"intellectIcons\":2,\"willpowerIcons\":1,\"cost\":1,\"level\":5}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 877700,
          "CustomDeck": {
            "8777": {
              "FaceURL": "https://i.imgur.com/AD38Ide.jpg",
              "BackURL": "https://i.imgur.com/5M95e75.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "2a436e",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Sword Cane",
          "GMNotes": "{\"TtsZoopGuid\":\"15347bed-8fd2-4853-a336-d31b87edaada\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Relic. Weapon. Melee\",\"agilityIcons\":1,\"combatIcons\":1,\"willpowerIcons\":1,\"cost\":1,\"level\":3}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 878300,
          "CustomDeck": {
            "8783": {
              "FaceURL": "https://i.imgur.com/STn3cgs.jpg",
              "BackURL": "https://i.imgur.com/m5WZPOx.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "52e1d1",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Hand of Fate",
          "GMNotes": "{\"TtsZoopGuid\":\"8e6b3337-3949-48d1-a6e1-2e5f0e4f7009\",\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Spell. Blessed\",\"combatIcons\":2,\"willpowerIcons\":2,\"cost\":2,\"level\":4}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 877100,
          "CustomDeck": {
            "8771": {
              "FaceURL": "https://i.imgur.com/ZozXvhu.jpg",
              "BackURL": "https://i.imgur.com/R0UIXWR.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "8a77a8",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Blessed Blade",
          "GMNotes": "{\"TtsZoopGuid\":\"20ab168e-f4c7-45a2-bffb-8838982f239e\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Weapon. Melee. Blessed\",\"wildIcons\":1,\"cost\":2,\"level\":2}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 870200,
          "CustomDeck": {
            "8702": {
              "FaceURL": "https://i.imgur.com/tZTg3aY.jpg",
              "BackURL": "https://i.imgur.com/CpVgBv8.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "926f7b",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Tristan Botley",
          "Description": "Fixer for Hire",
          "GMNotes": "{\"TtsZoopGuid\":\"2f52ac8e-4797-480d-a0c5-03528c1e7ea8\",\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Ally. Criminal. Cursed\",\"wildIcons\":2,\"cost\":5,\"level\":5}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 878900,
          "CustomDeck": {
            "8789": {
              "FaceURL": "https://i.imgur.com/YSaeD0M.jpg",
              "BackURL": "https://i.imgur.com/U5XoBnA.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "a9aae9",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Accursed",
          "GMNotes": "{\"TtsZoopGuid\":\"e0d9b6af-1bfc-4271-a225-bbc974e91d60\",\"type\":\"Treachery\",\"traits\":\"Curse\",\"weakness\":true}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 877500,
          "CustomDeck": {
            "8775": {
              "FaceURL": "https://i.imgur.com/BnfdRNM.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b6652f",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Tides of Fate",
          "GMNotes": "{\"TtsZoopGuid\":\"515762dd-c290-4781-803f-880eb28497ac\",\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Spell. Blessed\",\"willpowerIcons\":1,\"wildIcons\":1,\"cost\":0,\"level\":2}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 855600,
          "CustomDeck": {
            "8556": {
              "FaceURL": "https://i.imgur.com/I5vVqqx.jpg",
              "BackURL": "https://i.imgur.com/Arg3KQX.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00006",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Book of Psalms",
          "GMNotes": "{\"TtsZoopGuid\":\"192428fc-d300-4e07-91a7-8a8d40ca7902\",\"type\":\"Asset\",\"uses\":[{\"count\":4,\"token\":\"resource\",\"type\":\"Secret\"}],\"class\":\"Seeker\",\"traits\":\"Item. Tome. Blessed\",\"willpowerIcons\":2,\"cost\":2,\"level\":2}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 870800,
          "CustomDeck": {
            "8708": {
              "FaceURL": "https://i.imgur.com/uw2XJtb.jpg",
              "BackURL": "https://i.imgur.com/ofr3QZS.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00007",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Cryptic Grimoire",
          "Description": "Text of the Elder Seer",
          "GMNotes": "{\"TtsZoopGuid\":\"6f53d403-8cc5-45d7-8570-827f5d572f09\",\"type\":\"Asset\",\"class\":\"Seeker\",\"traits\":\"Item. Tome. Cursed\",\"intellectIcons\":2,\"cost\":3,\"level\":4}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 855900,
          "CustomDeck": {
            "8559": {
              "FaceURL": "https://i.imgur.com/VrEoVmD.jpg",
              "BackURL": "https://i.imgur.com/RtLpXnX.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00008",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Cryptographic Cipher",
          "GMNotes": "{\"TtsZoopGuid\":\"b35831cc-b150-431e-8b79-74b950ebf4b2\",\"type\":\"Asset\",\"uses\":[{\"count\":4,\"token\":\"resource\",\"type\":\"Secret\"}],\"class\":\"Seeker\",\"traits\":\"Item. Tool\",\"intellectIcons\":2,\"cost\":3,\"level\":3}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 870700,
          "CustomDeck": {
            "8707": {
              "FaceURL": "https://i.imgur.com/MgsLJyO.jpg",
              "BackURL": "https://i.imgur.com/IJVst4P.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000d",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Under Surveillance",
          "GMNotes": "{\"TtsZoopGuid\":\"700bbbc7-2347-40dc-b643-3241721edefd\",\"type\":\"Event\",\"uses\":[{\"count\":3,\"token\":\"resource\",\"type\":\"Supply\"}],\"class\":\"Rogue\",\"traits\":\"Tactic. Trap\",\"agilityIcons\":1,\"wildIcons\":1,\"cost\":2,\"level\":3}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 871400,
          "CustomDeck": {
            "8714": {
              "FaceURL": "https://i.imgur.com/By7lmu7.jpg",
              "BackURL": "https://i.imgur.com/lGylfK9.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00010",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Abyssal Tome",
          "GMNotes": "{\"TtsZoopGuid\":\"5470d260-d596-469e-99f0-684362a40d75\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Tome\",\"combatIcons\":2,\"intellectIcons\":2,\"cost\":2,\"level\":5}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 872100,
          "CustomDeck": {
            "8721": {
              "FaceURL": "https://i.imgur.com/XgHKQBF.jpg",
              "BackURL": "https://i.imgur.com/oYa8IDM.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00011",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Keep Faith",
          "GMNotes": "{\"TtsZoopGuid\":\"e50e7f02-3517-4461-a6fb-a56717b0a897\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Fortune. Blessed\",\"wildIcons\":1,\"cost\":2,\"level\":2}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 872000,
          "CustomDeck": {
            "8720": {
              "FaceURL": "https://i.imgur.com/GGFnMTV.jpg",
              "BackURL": "https://i.imgur.com/VzU75LN.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00015",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Butterfly Effect",
          "GMNotes": "{\"TtsZoopGuid\":\"efb3e51e-0204-4225-97a9-4a5098373b19\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Paradox. Blessed. Cursed\",\"wildIcons\":1,\"cost\":0,\"level\":3}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 101200,
          "CustomDeck": {
            "1012": {
              "FaceURL": "https://i.imgur.com/dlOaHvb.jpg",
              "BackURL": "https://i.imgur.com/z8s9HIG.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00016",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Priest of Two Faiths",
          "GMNotes": "{\"TtsZoopGuid\":\"d85785a7-999c-4f5b-bfb2-7cbff6c89d34\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Ally. Blessed. Cursed\",\"wildIcons\":1,\"cost\":1,\"level\":2}",
          "Tags": [
            "Asset",
            "ScenarioCard"
          ],
          "CardID": 101300,
          "CustomDeck": {
            "1013": {
              "FaceURL": "https://i.imgur.com/Qlw6t6x.jpg",
              "BackURL": "https://i.imgur.com/HYurdc5.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0001a",
          "Name": "Card",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Manipulate Destiny",
          "GMNotes": "{\"TtsZoopGuid\":\"7a6411db-e843-4680-b149-99de75d1f306\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Spell\",\"combatIcons\":1,\"wildIcons\":1,\"cost\":1,\"level\":3}",
          "Tags": [
            "ScenarioCard"
          ],
          "CardID": 872600,
          "CustomDeck": {
            "8726": {
              "FaceURL": "https://i.imgur.com/tYanE1b.jpg",
              "BackURL": "https://i.imgur.com/RpTfd1C.jpg",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        }
      ]
    },
    {
      "GUID": "e090cf",
      "Name": "Notecard",
      "Transform": {
        "rotY": 90,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "The Unofficial Return to Innsmouth",
      "Description": "\nThis whole thing is structured the same way as a physical Return box, with everything packed away in sets. \n\nTo use it, load the regular Innsmouth campaign from the TTS mod and apply the changes from this set like you would on the tabletop. ",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "HideWhenFaceDown": false,
      "Hands": false
    },
    {
      "GUID": "f938b7",
      "Name": "Bag",
      "Transform": {
        "rotY": 90,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Encounter Sets",
      "Description": "RtTIC v2",
      "ColorDiffuse": {
        "r": 0.0,
        "g": 0.6236751,
        "b": 0.7019608
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "function updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction onload(saved_data)\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects()\n    createSetupActionButtons()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects()\n    local howManyButtons = 0\n    for _, obj in ipairs(getAllObjects()) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj) end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color={0.75,0.25,0.25,0.6},\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons()\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj)\n    local color = {0,1,0,0.6}\n    if memoryList[obj.getGUID()] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        memoryList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        self.editButton({index=index, color=color})\n        memoryList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    if next(memoryList) == nil then\n        broadcastToAll(\"You cannot submit without any selections.\", {0.75, 0.25, 0.25})\n    else\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Saved\", {1,1,1})\n        updateSave()\n    end\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot,\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local deltaPos = {}\n    local bounds = obj.getBounds()\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n",
      "LuaScriptState": "{\"ml\":{\"041045\":{\"lock\":false,\"pos\":{\"x\":48.7767,\"y\":1.5217,\"z\":29.0786},\"rot\":{\"x\":0,\"y\":269.9999,\"z\":0}},\"1196c0\":{\"lock\":false,\"pos\":{\"x\":52.6991,\"y\":1.5313,\"z\":32.3419},\"rot\":{\"x\":0,\"y\":269.9747,\"z\":180}},\"2c5dfa\":{\"lock\":false,\"pos\":{\"x\":52.825,\"y\":1.5217,\"z\":29.1701},\"rot\":{\"x\":0,\"y\":269.9804,\"z\":0}},\"6dfe0e\":{\"lock\":false,\"pos\":{\"x\":48.6888,\"y\":1.5313,\"z\":25.7885},\"rot\":{\"x\":0,\"y\":269.99,\"z\":0}},\"a35000\":{\"lock\":false,\"pos\":{\"x\":52.6508,\"y\":1.5121,\"z\":25.7102},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"fc9857\":{\"lock\":false,\"pos\":{\"x\":48.8914,\"y\":1.5169,\"z\":32.4737},\"rot\":{\"x\":0,\"y\":269.9995,\"z\":0}}}}",
      "ContainedObjects": [
        {
          "GUID": "041045",
          "Name": "Deck",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "ScenarioCard"
          ],
          "Hands": false,
          "DeckIDs": [
            100800,
            100700,
            100600,
            100500
          ],
          "CustomDeck": {
            "1008": {
              "FaceURL": "https://i.imgur.com/W1vPMIH.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "1007": {
              "FaceURL": "https://i.imgur.com/W1vPMIH.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "1006": {
              "FaceURL": "https://i.imgur.com/xJNUAIS.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "1005": {
              "FaceURL": "https://i.imgur.com/xJNUAIS.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "e0000d",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Occultation",
              "GMNotes": "{\"TtsZoopGuid\":\"af13e45d-06b4-4db8-8016-9c5516754c9d\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Omen\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 100800,
              "CustomDeck": {
                "1008": {
                  "FaceURL": "https://i.imgur.com/W1vPMIH.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e0000c",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Occultation",
              "GMNotes": "{\"TtsZoopGuid\":\"af13e45d-06b4-4db8-8016-9c5516754c9d\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Omen\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 100700,
              "CustomDeck": {
                "1007": {
                  "FaceURL": "https://i.imgur.com/W1vPMIH.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e0000b",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "King Tide",
              "GMNotes": "{\"TtsZoopGuid\":\"9a5b11d3-a171-4f75-8ab9-d83fca26fbae\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard. Omen\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 100600,
              "CustomDeck": {
                "1006": {
                  "FaceURL": "https://i.imgur.com/xJNUAIS.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e0000a",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "King Tide",
              "GMNotes": "{\"TtsZoopGuid\":\"9a5b11d3-a171-4f75-8ab9-d83fca26fbae\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard. Omen\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 100500,
              "CustomDeck": {
                "1005": {
                  "FaceURL": "https://i.imgur.com/xJNUAIS.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "1196c0",
          "Name": "Deck",
          "Transform": {
            "rotY": 270,
            "rotZ": 180,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "Location",
            "ScenarioCard"
          ],
          "Hands": false,
          "DeckIDs": [
            879600,
            879600,
            879500,
            879500,
            879700,
            879700
          ],
          "CustomDeck": {
            "8796": {
              "FaceURL": "https://i.imgur.com/EfaWArI.png",
              "BackURL": "https://i.imgur.com/HktuYF0.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8795": {
              "FaceURL": "https://i.imgur.com/EfaWArI.png",
              "BackURL": "https://i.imgur.com/P031PdB.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8797": {
              "FaceURL": "https://i.imgur.com/EfaWArI.png",
              "BackURL": "https://i.imgur.com/cRwIsSW.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "366869",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "rotZ": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Tidal Tunnel",
              "Description": "Cave.",
              "GMNotes": "{\n  \"id\": \"RtTIC_66\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 2,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 879600,
              "CustomDeck": {
                "8796": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/HktuYF0.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "a70099",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "rotZ": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Tidal Tunnel",
              "Description": "Cave.",
              "GMNotes": "{\n  \"id\": \"RtTIC_66\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 2,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 879600,
              "CustomDeck": {
                "8796": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/HktuYF0.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "9bacfc",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "rotZ": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Tidal Tunnel",
              "Description": "Cave.",
              "GMNotes": "{\n  \"id\": \"RtTIC_68\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 1,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 879500,
              "CustomDeck": {
                "8795": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/P031PdB.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "a1d958",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "rotZ": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Tidal Tunnel",
              "Description": "Cave.",
              "GMNotes": "{\n  \"id\": \"RtTIC_68\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 1,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 879500,
              "CustomDeck": {
                "8795": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/P031PdB.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "0a5fa9",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "rotZ": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Tidal Tunnel",
              "Description": "Cave.",
              "GMNotes": "{\n  \"id\": \"RtTIC_67\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 1,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 879700,
              "CustomDeck": {
                "8797": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/cRwIsSW.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "2ac89a",
              "Name": "CardCustom",
              "Transform": {
                "rotY": 270,
                "rotZ": 180,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Tidal Tunnel",
              "Description": "Cave.",
              "GMNotes": "{\n  \"id\": \"RtTIC_67\",\n  \"type\": \"Location\",\n  \"traits\": \"Cave.\",\n  \"cycle\": \"Standalone\",\n  \"locationBack\": {\n    \"icons\": \"\",\n    \"connections\": \"\",\n    \"uses\": [\n      {\n        \"countPerInvestigator\": 1,\n        \"type\": \"Clue\",\n        \"token\": \"clue\"\n      }\n    ]\n  }\n}",
              "Tags": [
                "Location",
                "ScenarioCard"
              ],
              "CardID": 879700,
              "CustomDeck": {
                "8797": {
                  "FaceURL": "https://i.imgur.com/EfaWArI.png",
                  "BackURL": "https://i.imgur.com/cRwIsSW.png",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "2c5dfa",
          "Name": "Deck",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "ScenarioCard"
          ],
          "Hands": false,
          "DeckIDs": [
            856500,
            856400,
            101600,
            101500
          ],
          "CustomDeck": {
            "8565": {
              "FaceURL": "https://i.imgur.com/ioyeUGi.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8564": {
              "FaceURL": "https://i.imgur.com/ioyeUGi.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "1016": {
              "FaceURL": "https://i.imgur.com/gPEL3d7.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "1015": {
              "FaceURL": "https://i.imgur.com/gPEL3d7.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "e0001a",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Stalked by Deep Ones",
              "GMNotes": "{\"TtsZoopGuid\":\"8a62b8a1-d541-4062-8e3b-d5681a17ff0c\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Scheme\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 856500,
              "CustomDeck": {
                "8565": {
                  "FaceURL": "https://i.imgur.com/ioyeUGi.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "a53e93",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Stalked by Deep Ones",
              "GMNotes": "{\"TtsZoopGuid\":\"8a62b8a1-d541-4062-8e3b-d5681a17ff0c\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Scheme\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 856400,
              "CustomDeck": {
                "8564": {
                  "FaceURL": "https://i.imgur.com/ioyeUGi.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "0bb005",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Deep One Ambusher",
              "Description": "Humanoid. Monster. Deep One.",
              "GMNotes": "{\"TtsZoopGuid\":\"125e3369-7290-4931-8a68-3d3af9bde6cb\",\"type\":\"Enemy\",\"class\":\"Mythos\",\"traits\":\"Humanoid. Monster. Deep One\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 101600,
              "CustomDeck": {
                "1016": {
                  "FaceURL": "https://i.imgur.com/gPEL3d7.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e00018",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Deep One Ambusher",
              "Description": "Humanoid. Monster. Deep One.",
              "GMNotes": "{\"TtsZoopGuid\":\"125e3369-7290-4931-8a68-3d3af9bde6cb\",\"type\":\"Enemy\",\"class\":\"Mythos\",\"traits\":\"Humanoid. Monster. Deep One\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 101500,
              "CustomDeck": {
                "1015": {
                  "FaceURL": "https://i.imgur.com/gPEL3d7.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "6dfe0e",
          "Name": "Deck",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "ScenarioCard"
          ],
          "Hands": false,
          "DeckIDs": [
            100900,
            101000,
            857300,
            857200,
            857500,
            857400
          ],
          "CustomDeck": {
            "1009": {
              "FaceURL": "https://i.imgur.com/Vd3ki2s.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "1010": {
              "FaceURL": "https://i.imgur.com/Vd3ki2s.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8573": {
              "FaceURL": "https://i.imgur.com/YggnLLJ.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8572": {
              "FaceURL": "https://i.imgur.com/YggnLLJ.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8575": {
              "FaceURL": "https://i.imgur.com/uDsb9Jo.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8574": {
              "FaceURL": "https://i.imgur.com/uDsb9Jo.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "e00010",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Call of the Sea",
              "GMNotes": "{\"TtsZoopGuid\":\"f25e1123-f49d-4c33-85a1-40b238666f4c\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Power\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 100900,
              "CustomDeck": {
                "1009": {
                  "FaceURL": "https://i.imgur.com/Vd3ki2s.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e00011",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Call of the Sea",
              "GMNotes": "{\"TtsZoopGuid\":\"f25e1123-f49d-4c33-85a1-40b238666f4c\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Power\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 101000,
              "CustomDeck": {
                "1010": {
                  "FaceURL": "https://i.imgur.com/Vd3ki2s.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "50c198",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Struggle for Air",
              "GMNotes": "{\"TtsZoopGuid\":\"c3181c3e-8cb2-452a-a148-f2b62ea4ac10\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 857300,
              "CustomDeck": {
                "8573": {
                  "FaceURL": "https://i.imgur.com/YggnLLJ.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "90964a",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Struggle for Air",
              "GMNotes": "{\"TtsZoopGuid\":\"c3181c3e-8cb2-452a-a148-f2b62ea4ac10\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 857200,
              "CustomDeck": {
                "8572": {
                  "FaceURL": "https://i.imgur.com/YggnLLJ.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e00013",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Rolling Tide",
              "GMNotes": "{\"TtsZoopGuid\":\"48611eef-36fe-46cf-a04e-111830633fe8\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 857500,
              "CustomDeck": {
                "8575": {
                  "FaceURL": "https://i.imgur.com/uDsb9Jo.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "ead995",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Rolling Tide",
              "GMNotes": "{\"TtsZoopGuid\":\"48611eef-36fe-46cf-a04e-111830633fe8\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 857400,
              "CustomDeck": {
                "8574": {
                  "FaceURL": "https://i.imgur.com/uDsb9Jo.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "a35000",
          "Name": "Deck",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "ScenarioCard"
          ],
          "Hands": false,
          "DeckIDs": [
            856900,
            856800
          ],
          "CustomDeck": {
            "8569": {
              "FaceURL": "https://i.imgur.com/ELm7brw.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8568": {
              "FaceURL": "https://i.imgur.com/ELm7brw.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "e00001",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Barricaded Door",
              "GMNotes": "{\"TtsZoopGuid\":\"293ceabf-123d-478b-8f80-67402737aefc\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Obstacle\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 856900,
              "CustomDeck": {
                "8569": {
                  "FaceURL": "https://i.imgur.com/ELm7brw.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e00002",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Barricaded Door",
              "GMNotes": "{\"TtsZoopGuid\":\"293ceabf-123d-478b-8f80-67402737aefc\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Obstacle\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 856800,
              "CustomDeck": {
                "8568": {
                  "FaceURL": "https://i.imgur.com/ELm7brw.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "fc9857",
          "Name": "Deck",
          "Transform": {
            "rotY": 270,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "ScenarioCard"
          ],
          "Hands": false,
          "DeckIDs": [
            100300,
            100400,
            856200
          ],
          "CustomDeck": {
            "1003": {
              "FaceURL": "https://i.imgur.com/f30BdHE.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "1004": {
              "FaceURL": "https://i.imgur.com/f30BdHE.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "8562": {
              "FaceURL": "https://i.imgur.com/7Zcc2QS.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "d529f3",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Innsmouth Haze",
              "GMNotes": "{\"TtsZoopGuid\":\"f6515c19-90dc-4eb2-81c7-36258ac5ba78\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 100300,
              "CustomDeck": {
                "1003": {
                  "FaceURL": "https://i.imgur.com/f30BdHE.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "10e6f4",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "rotZ": 5,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Innsmouth Haze",
              "GMNotes": "{\"TtsZoopGuid\":\"f6515c19-90dc-4eb2-81c7-36258ac5ba78\",\"type\":\"Treachery\",\"class\":\"Mythos\",\"traits\":\"Hazard\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 100400,
              "CustomDeck": {
                "1004": {
                  "FaceURL": "https://i.imgur.com/f30BdHE.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "4be7b7",
              "Name": "Card",
              "Transform": {
                "rotY": 270,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Immaterial One",
              "GMNotes": "{\"TtsZoopGuid\":\"f171f9ca-76cb-4813-acd6-e298f0662493\",\"type\":\"Enemy\",\"victory\":1,\"class\":\"Mythos\",\"traits\":\"Creature. Monster\"}",
              "Tags": [
                "ScenarioCard"
              ],
              "CardID": 856200,
              "CustomDeck": {
                "8562": {
                  "FaceURL": "https://i.imgur.com/7Zcc2QS.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940351785/F64D8EFB75A9E15446D24343DA0A6EEF5B3E43DB/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
