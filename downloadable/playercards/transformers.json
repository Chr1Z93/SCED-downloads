{
  "GUID": "d7674a",
  "Name": "Custom_Model_Bag",
  "Transform": {
    "posX": 63,
    "posY": 1.48,
    "posZ": 32,
    "rotX": 0,
    "rotY": 270,
    "rotZ": 0,
    "scaleX": 2.21,
    "scaleY": 0.46,
    "scaleZ": 2.42
  },
  "Nickname": "Transformers Investigators",
  "Description": "by Adran06",
  "ColorDiffuse": {
    "r": 1.0,
    "g": 1.0,
    "b": 1.0
  },
  "HideWhenFaceDown": false,
  "Hands": false,
  "CustomMesh": {
    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/62583916778515333/9F0BE0C211BE3BD1725B4B855F5D3C9C0D020394/",
    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/16782654650574925140/F8E13A3D950386B6F11284E4E3E12777386795B4/",
    "NormalURL": "",
    "ColliderURL": "",
    "Convex": true,
    "MaterialIndex": 3,
    "TypeIndex": 6,
    "CustomShader": {
      "SpecularColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "SpecularIntensity": 0.0,
      "SpecularSharpness": 2.0,
      "FresnelStrength": 0.0
    },
    "CastShadows": true
  },
  "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"MemoryBag\", function(require, _LOADED, __bundle_register, __bundle_modules)\nfunction updateSave()\n  self.script_state = JSON.encode({ ml = memoryList, setupButton = setupButton })\nend\n\nfunction onLoad(savedData)\n  if savedData and savedData ~= \"\" then\n    local loadedData = JSON.decode(savedData)\n    memoryList = loadedData.ml\n    setupButton = loadedData.setupButton\n  end\n\n  memoryList = memoryList or {}\n  self.addContextMenuItem(\"Toggle setup button\", toggleSetupButton)\n\n  -- make sure the model is loaded so that we can use the bounds\n  Wait.condition(function()\n    Wait.frames(function()\n      generateButtonData()\n      createMemoryActionButtons()\n    end, 5)\n  end, function() return not self.loading_custom end)\nend\n\nfunction generateButtonData()\n  local selfScale = self.getScale()\n  local selfBounds = self.getBoundsNormalized()\n  buttonScale = Vector(1 / selfScale.x, 1, 1 / selfScale.z)\n\n  buttonX = math.max(selfBounds.size.x / 5, 1.5) / selfScale.x\n  buttonY = -(selfBounds.size.y / 2 + selfBounds.offset.y) / selfScale.y + 0.5\n  buttonZ = {}\n  for i = 1, 4 do\n    buttonZ[i] = (selfBounds.size.z / 2 + i * 1.15 - 0.15) / selfScale.z\n  end\n\n  local upperButtonMult = 1.1\n  buttonData = {\n    [\"Add\"]       = {\n      tooltip = \"Add highlighted objects to memory\",\n      pos = { buttonX * upperButtonMult, buttonY, -buttonZ[1] },\n      fColor = { 0.25, 1, 0.25 }\n    },\n    [\"Cancel\"]    = {\n      tooltip = \"Abort setup mode\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[1] },\n    },\n    [\"Internal\"]    = {\n      tooltip = \"Copy memory from internal bags\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[4] },\n    },\n    [\"Place\"]     = {\n      pos = { buttonX, buttonY, buttonZ[1] },\n      fSize = 350,\n      w = 1200\n    },\n    [\"Recall\"]    = {\n      pos = { -buttonX, buttonY, buttonZ[1] },\n      fSize = 350,\n      w = 1200\n    },\n    [\"Remove\"]    = {\n      tooltip = \"Remove highlighted objects from memory\",\n      pos = { buttonX * upperButtonMult, buttonY, -buttonZ[2] },\n      fColor = { 1, 0.25, 0.25 }\n    },\n    [\"Reset\"]     = {\n      tooltip = \"Completely reset memory\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[3] },\n    },\n    [\"Selection\"] = {\n      tooltip = \"Add / Remove highlight for selected objects\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[2] },\n    },\n    [\"Setup\"]     = {\n      pos = { 0, buttonY, -buttonZ[1] },\n      fSize = 350\n    },\n    [\"Update\"]   = {\n      tooltip = \"Update memory for placed objects\",\n      pos = { buttonX * upperButtonMult, buttonY, -buttonZ[3] },\n      fColor = { 0.75, 0.75, 1 }\n    }\n  }\nend\n\nfunction createButtonByName(label)\n  self.createButton({\n    label = label,\n    tooltip = buttonData[label].tooltip or \"\",\n    position = buttonData[label].pos,\n    height = buttonData[label].h or 500,\n    width = buttonData[label].w or 1500,\n    font_size = buttonData[label].fSize or 325,\n    font_color = buttonData[label].fColor or { 1, 1, 1 },\n    function_owner = self,\n    color = { 0, 0, 0 },\n    scale = buttonScale,\n    click_function = \"buttonClick_\" .. string.lower(string.gsub(label, \"%s+\", \"\"))\n  })\nend\n\n-- context menu function to toggle the setup button visibility\nfunction toggleSetupButton()\n  if setupButton then\n    setupButton = false\n    broadcastToAll(\"Setup button disabled\")\n  else\n    setupButton = true\n    broadcastToAll(\"Setup button enabled\")\n  end\n  updateSave()\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_setup()\n  tempList = {}\n  self.clearButtons()\n  createButtonsOnAllObjects()\n  createSetupActionButtons()\nend\n\nfunction broadcastFeedback(str1, count, name, str2, color)\n  local bcStr = count .. \" \" .. name\n  if str1 then\n    bcStr = str1 .. \" \" .. bcStr\n  end\n  if count ~= 1 then\n    bcStr = bcStr .. \"s\"\n  end\n  if str2 then\n    bcStr = bcStr .. \" \" .. str2\n  end\n  broadcastToAll(bcStr, color)\nend\n\nfunction createButtonsOnAllObjects()\n  buttonIndexMap = {}\n\n  local buttonCount = 0\n  for _, obj in ipairs(getObjects()) do\n    if obj ~= self and obj.type ~= \"Scripting\" and obj.type ~= \"Hand\" then\n      local objPos = obj.getPosition()\n      local objBounds = obj.getBounds()\n      local offSet = Vector(0, objBounds.size.y / 2 + 1, 0)\n      local scaleVec = Vector(-1, 1, 1)\n      local buttonPos = self.positionToLocal(objPos + offSet):scale(scaleVec)\n\n      local fName = \"selectButton_\" .. buttonCount\n      _G[fName] = function() buttonClick_selectObject(obj) end\n      self.createButton({\n        click_function = fName,\n        function_owner = self,\n        position = buttonPos,\n        height = 600,\n        width = 600,\n        color = { 0.75, 0.25, 0.25, 0.75 },\n        scale = buttonScale\n      })\n      buttonIndexMap[obj.getGUID()] = buttonCount\n      buttonCount = buttonCount + 1\n    end\n  end\nend\n\nfunction createSetupActionButtons()\n  createButtonByName(\"Cancel\")\n  createButtonByName(\"Selection\")\n  createButtonByName(\"Reset\")\n  createButtonByName(\"Internal\")\n  createButtonByName(\"Add\")\n\n  if next(memoryList) then\n    createButtonByName(\"Remove\")\n    createButtonByName(\"Update\")\n  end\nend\n\nfunction buttonClick_selectObject(obj)\n  local guid = obj.getGUID()\n  local index = buttonIndexMap[guid]\n  if not index then return end\n\n  if tempList[guid] == nil then\n    self.editButton({ index = index, color = { 0, 1, 0, 0.75 } })\n    tempList[guid] = {\n      pos = roundVector(obj.getPosition(), 3),\n      rot = roundVector(obj.getRotation(), 0),\n      lock = obj.getLock()\n    }\n    obj.highlightOn({ 0, 1, 0 })\n  else\n    self.editButton({ index = index, color = { 0.75, 0.25, 0.25, 0.75 } })\n    tempList[guid] = nil\n    obj.highlightOff()\n  end\nend\n\nfunction buttonClick_cancel()\n  broadcastToAll(\"Setup Canceled\")\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_selection(_, playerColor)\n  local objList = Player[playerColor].getSelectedObjects()\n\n  if #objList == 0 then\n    broadcastToAll(\"No objects selected!\")\n  else\n    broadcastFeedback(\"Toggled selection for\", #objList, \"object\")\n    for _, obj in ipairs(objList) do\n      buttonClick_selectObject(obj)\n    end\n  end\nend\n\nfunction buttonClick_add()\n  local count = 0\n  for _ in pairs(tempList) do\n    count = count + 1\n  end\n  broadcastFeedback(\"Added\", count, \"Object\", \"from selection\")\n\n  -- copy data from tempList to memoryList\n  for guid, entry in pairs(tempList) do\n    memoryList[guid] = entry\n  end\n\n  updateSave()\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_update()\n  local count = 0\n  for guid, entry in pairs(memoryList) do\n    local obj = getObjectFromGUID(guid)\n    if obj ~= nil then\n      count = count + 1\n      memoryList[guid] = {\n        pos = roundVector(obj.getPosition(), 3),\n        rot = roundVector(obj.getRotation(), 0),\n        lock = obj.getLock()\n      }\n    end\n  end\n  broadcastFeedback(\"Updated data for\", count, \"Object\")\n  updateSave()\nend\n\nfunction buttonClick_remove()\n  local count = 0\n  for guid in pairs(tempList) do\n    count = count + 1\n    memoryList[guid] = nil\n  end\n  broadcastFeedback(_, count, \"Object\", \"Removed\", { 1, 1, 1 })\n\n  updateSave()\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_setNew()\n  local count = 0\n  for _, obj in ipairs(getObjects()) do\n    if memoryList[obj.guid] then\n      count = count + 1\n      memoryList[obj.guid].pos = roundVector(obj.getPosition(), 3)\n      memoryList[obj.guid].rot = roundVector(obj.getRotation(), 0)\n      memoryList[obj.guid].lock = obj.getLock()\n    end\n  end\n  broadcastFeedback(\"Updated Data for\", count, \"Object\", _, { 1, 1, 1 })\n  updateSave()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_reset()\n  memoryList = {}\n  updateSave()\n  removeAllHighlights()\n  broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\n  self.clearButtons()\n\n  if setupButton then\n    createButtonByName(\"Setup\")\n  end\nend\n\nfunction buttonClick_internal()\n  local count = 0\n  for _, bagObj in ipairs(self.getObjects()) do\n    local data = bagObj.lua_script_state\n    if data ~= nil then\n      local j = JSON.decode(data)\n      if j ~= nil and j.ml ~= nil then\n        count = count + 1\n        for guid, entry in pairs(j.ml) do\n          memoryList[guid] = entry\n        end\n      end\n    end\n  end\n\n  if count > 0 then\n    broadcastFeedback(\"Added\", count, \"internal bag\", \"to existing memory\")\n  end\nend\n\nfunction createMemoryActionButtons()\n  self.clearButtons()\n\n  if next(memoryList) then\n    createButtonByName(\"Place\")\n    createButtonByName(\"Recall\")\n  end\n\n  if setupButton then\n    createButtonByName(\"Setup\")\n  end\nend\n\n-- Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n  local data = self.getData()\n\n  -- get names of contained objects\n  local guidToName = {}\n  for _, bagObjData in ipairs(data.ContainedObjects or {}) do\n    guidToName[bagObjData[\"GUID\"]] = bagObjData[\"Nickname\"]\n  end\n\n  local updateGuids = {}\n  local placeCount = 0\n  local moveCount = 0\n  for guid, entry in pairs(memoryList) do\n    local obj = getObjectFromGUID(guid)\n    if obj ~= nil and (obj.getName() == guidToName[guid] or guidToName[guid] == nil) then\n      -- If obj is out on the table and has the same name (or there's no contained copy), move it\n      moveCount = moveCount + 1\n      obj.setPositionSmooth(entry.pos)\n      obj.setRotationSmooth(entry.rot)\n      obj.setLock(entry.lock)\n    elseif guidToName[guid] then\n      -- If obj is inside of the bag\n      placeCount = placeCount + 1\n      local item = self.takeObject({\n        guid = guid,\n        position = entry.pos,\n        rotation = entry.rot,\n        smooth = false\n      })\n      item.setLock(entry.lock)\n\n      if obj ~= nil then\n        updateGuids[guid] = item.getGUID()\n      end\n    end\n  end\n\n  -- update memoryList if we placed an item that got a new GUID\n  if next(updateGuids) then\n    for oldGuid, newGuid in pairs(updateGuids) do\n      memoryList[newGuid] = memoryList[oldGuid]\n      memoryList[oldGuid] = nil\n    end\n    updateSave()\n  end\n\n  if placeCount > 0 then\n    broadcastFeedback(_, placeCount, \"Object\", \"Placed\", { 1, 1, 1 })\n  end\n\n  if moveCount > 0 then\n    broadcastFeedback(_, moveCount, \"Object\", \"Moved\", { 1, 1, 1 })\n  end\n\n  if placeCount == 0 and moveCount == 0 then\n    broadcastToAll(\"Bag is empty and no matching objects were found in play\", { 1, 1, 1 })\n  end\nend\n\nfunction buttonClick_recall()\n  local count = 0\n  for guid, _ in pairs(memoryList) do\n    local obj = getObjectFromGUID(guid)\n    if obj ~= nil then\n      self.putObject(obj)\n      count = count + 1\n    end\n  end\n  broadcastFeedback(_, count, \"Object\", \"Recalled\", { 1, 1, 1 })\nend\n\nfunction removeAllHighlights()\n  for _, obj in ipairs(getObjects()) do\n    obj.highlightOff()\n  end\nend\n\n-- Round vector to the Nth decimal\nfunction roundVector(vec, dec)\n  local mult = 10 ^ (dec or 0)\n  local t = {}\n  for _, k in ipairs({ \"x\", \"y\", \"z\" }) do\n    t[k] = math.floor(vec[k] * mult + 0.5) / mult\n  end\n  return t\nend\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"MemoryBag\")\nend)\nreturn __bundle_require(\"__root\")",
  "LuaScriptState": "{\"ml\":{\"126e22\":{\"lock\":false,\"pos\":{\"x\":41.213,\"y\":1.512,\"z\":69.331},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"5621e9\":{\"lock\":false,\"pos\":{\"x\":41.211,\"y\":1.512,\"z\":69.333},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"6fb3be\":{\"lock\":false,\"pos\":{\"x\":41.487,\"y\":1.512,\"z\":52.462},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"841d2b\":{\"lock\":false,\"pos\":{\"x\":41.387,\"y\":1.512,\"z\":60.602},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"8f9922\":{\"lock\":false,\"pos\":{\"x\":41.414,\"y\":1.512,\"z\":87.499},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"dbf06d\":{\"lock\":false,\"pos\":{\"x\":41.284,\"y\":1.526,\"z\":78.164},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00003\":{\"lock\":false,\"pos\":{\"x\":44.279,\"y\":1.495,\"z\":79.943},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00004\":{\"lock\":false,\"pos\":{\"x\":44.285,\"y\":1.495,\"z\":76.375},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00006\":{\"lock\":false,\"pos\":{\"x\":46.462,\"y\":1.495,\"z\":77.586},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00007\":{\"lock\":false,\"pos\":{\"x\":46.505,\"y\":1.495,\"z\":78.809},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00010\":{\"lock\":false,\"pos\":{\"x\":44.455,\"y\":1.495,\"z\":50.623},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00011\":{\"lock\":false,\"pos\":{\"x\":44.397,\"y\":1.495,\"z\":54.224},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00013\":{\"lock\":false,\"pos\":{\"x\":46.554,\"y\":1.509,\"z\":51.794},\"rot\":{\"x\":359,\"y\":270,\"z\":0}},\"e00014\":{\"lock\":false,\"pos\":{\"x\":46.654,\"y\":1.495,\"z\":53.084},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0001a\":{\"lock\":false,\"pos\":{\"x\":44.335,\"y\":1.495,\"z\":59.065},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0001b\":{\"lock\":false,\"pos\":{\"x\":44.354,\"y\":1.495,\"z\":62.623},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0001d\":{\"lock\":false,\"pos\":{\"x\":46.517,\"y\":1.495,\"z\":60.217},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0001e\":{\"lock\":false,\"pos\":{\"x\":46.509,\"y\":1.509,\"z\":61.418},\"rot\":{\"x\":359,\"y\":270,\"z\":0}},\"e00024\":{\"lock\":false,\"pos\":{\"x\":44.389,\"y\":1.495,\"z\":85.55},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00025\":{\"lock\":false,\"pos\":{\"x\":44.389,\"y\":1.495,\"z\":89.172},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00027\":{\"lock\":false,\"pos\":{\"x\":46.543,\"y\":1.509,\"z\":86.722},\"rot\":{\"x\":359,\"y\":270,\"z\":0}},\"e00028\":{\"lock\":false,\"pos\":{\"x\":46.543,\"y\":1.509,\"z\":88.018},\"rot\":{\"x\":359,\"y\":270,\"z\":0}},\"e0002e\":{\"lock\":false,\"pos\":{\"x\":44.001,\"y\":1.495,\"z\":67.534},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0002f\":{\"lock\":false,\"pos\":{\"x\":44.001,\"y\":1.495,\"z\":71.157},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00031\":{\"lock\":false,\"pos\":{\"x\":46.659,\"y\":1.495,\"z\":68.609},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00032\":{\"lock\":false,\"pos\":{\"x\":46.42,\"y\":1.495,\"z\":69.966},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}},\"setupButton\":true}",
  "Rigidbody": {
    "Mass": 1.0,
    "Drag": 0.1,
    "AngularDrag": 0.1,
    "UseGravity": true
  },
  "ContainedObjects": [
    {
      "GUID": "6fb3be",
      "Name": "Deck",
      "Transform": {
        "posX": 41.487,
        "posY": 1.51205766,
        "posZ": 52.462,
        "rotX": -4.78857665e-08,
        "rotY": 270.0,
        "rotZ": 3.33537571e-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Hands": false,
      "DeckIDs": [
        101400,
        101300
      ],
      "CustomDeck": {
        "1014": {
          "FaceURL": "https://www.dropbox.com/scl/fi/ibh4iaow75jz6hddvlxko/b3efc546-ba62-4981-94d8-7c6ac719447c-Front-Overconfident-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=hw8vta66tfnyiqjke8c3t335p&raw=1&cachebust=1752199329999",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1013": {
          "FaceURL": "https://www.dropbox.com/scl/fi/uxb0x2dfpkrcyg7ue5rjf/78932007-1569-4581-a909-2b2207382fba-Front-I-Am-Transformed-Cheetor-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=x7u6l0vmk63y9xgj2p6bl1zq9&raw=1&cachebust=1752294587290",
          "BackURL": "https://www.dropbox.com/scl/fi/fnkldmr6k97647lehnohz/78932007-1569-4581-a909-2b2207382fba-Back-I-Am-Transformed-Cheetor-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=8v0uibdxf6ubo30ijyup5hrns&raw=1&cachebust=1752294588388",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      },
      "ContainedObjects": [
        {
          "GUID": "e00017",
          "Name": "Card",
          "Transform": {
            "posX": 0.0,
            "posY": 0.0,
            "posZ": 0.0,
            "rotX": 0.0,
            "rotY": 270.0,
            "rotZ": 0.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Overconfident",
          "GMNotes": "{\"TtsZoopGuid\":\"b3efc546-ba62-4981-94d8-7c6ac719447c\",\"id\":\"b3efc546-ba62-4981-94d8-7c6ac719447c\",\"type\":\"Treachery\",\"traits\":\"Flaw.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 101400,
          "CustomDeck": {
            "1014": {
              "FaceURL": "https://www.dropbox.com/scl/fi/ibh4iaow75jz6hddvlxko/b3efc546-ba62-4981-94d8-7c6ac719447c-Front-Overconfident-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=hw8vta66tfnyiqjke8c3t335p&raw=1&cachebust=1752199329999",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00016",
          "Name": "Card",
          "Transform": {
            "posX": 41.3355522,
            "posY": 1.60276651,
            "posZ": 52.2717667,
            "rotX": 3.52181632e-06,
            "rotY": 270.0,
            "rotZ": 178.898361,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "I Am Transformed",
          "Description": "Robot Mode",
          "GMNotes": "{\"TtsZoopGuid\":\"78932007-1569-4581-a909-2b2207382fba\",\"id\":\"78932007-1569-4581-a909-2b2207382fba\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"permanent\":true,\"uses\":[{\"count\":0,\"token\":\"resource\",\"type\":\"Speed\"}],\"startsInPlay\":true}",
          "Tags": [
            "Asset",
            "CardWithHelper",
            "PlayerCard"
          ],
          "HideWhenFaceDown": false,
          "CardID": 101300,
          "CustomDeck": {
            "1013": {
              "FaceURL": "https://www.dropbox.com/scl/fi/uxb0x2dfpkrcyg7ue5rjf/78932007-1569-4581-a909-2b2207382fba-Front-I-Am-Transformed-Cheetor-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=x7u6l0vmk63y9xgj2p6bl1zq9&raw=1&cachebust=1752294587290",
              "BackURL": "https://www.dropbox.com/scl/fi/fnkldmr6k97647lehnohz/78932007-1569-4581-a909-2b2207382fba-Back-I-Am-Transformed-Cheetor-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=8v0uibdxf6ubo30ijyup5hrns&raw=1&cachebust=1752294588388",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"IAmTransformed\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"playercards/CardsWithHelper\")\r\nlocal GUIDReferenceApi = require(\"core/GUIDReferenceApi\")\r\nlocal PlayermatApi     = require(\"playermat/PlayermatApi\")\r\nlocal TableLib         = require(\"util/TableLib\")\r\n\r\n-- intentionally global\r\nhasXML                 = true\r\nisHelperEnabled        = false\r\n\r\nfunction updateSave()\r\n  self.script_state = JSON.encode({ isHelperEnabled = isHelperEnabled })\r\nend\r\n\r\nfunction onLoad(savedData)\r\n  if savedData and savedData ~= \"\" then\r\n    local loadedData = JSON.decode(savedData)\r\n    isHelperEnabled = loadedData.isHelperEnabled\r\n  end\r\n  self.addTag(\"CardWithHelper\")\r\n  generateXml()\r\nend\r\n\r\nfunction generateXml()\r\n  local xml = {}\r\n\r\n  local mainPanel = {\r\n    tag        = \"Panel\",\r\n    attributes = { id = \"Helper\", active = isHelperEnabled },\r\n    children   = {}\r\n  }\r\n\r\n  local buttonXml = {\r\n    tag = \"Button\",\r\n    attributes = {\r\n      color        = \"#C0C0C080\",\r\n      height       = 550,\r\n      width        = 1200,\r\n      rotation     = \"0 0 180\",\r\n      scale        = \"0.1 0.1 1\",\r\n      position     = \"0 -25 -40\",\r\n      ignoreLayout = true,\r\n      padding      = \"50 50 50 50\",\r\n      onClick      = \"transform\",\r\n      text         = \"Transform\",\r\n      textColor    = \"Black\",\r\n      font         = \"font_teutonic-arkham\",\r\n      fontSize     = 200\r\n    }\r\n  }\r\n\r\n  table.insert(mainPanel.children, buttonXml)\r\n\r\n  local reverseButtonXml = TableLib.copy(buttonXml)\r\n  reverseButtonXml.attributes.position = \"0 -25 40\"\r\n  reverseButtonXml.attributes.rotation = \"0 180 180\"\r\n  table.insert(mainPanel.children, reverseButtonXml)\r\n\r\n  table.insert(xml, mainPanel)\r\n  self.UI.setXmlTable(xml)\r\nend\r\n\r\nfunction transform(player)\r\n  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())\r\n\r\n  -- look for current investigator\r\n  local invCards = PlayermatApi.getUsedInvestigatorCards()\r\n  local currentCard = invCards[matColor]\r\n  if not currentCard then\r\n    broadcastToColor(\"Can't find current investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- look for other investigator\r\n  local otherCard\r\n  for _, card in ipairs(PlayermatApi.searchAroundPlayermat(matColor, \"isCard\")) do\r\n    if card.hasTag(\"Investigator\") and card ~= currentCard then\r\n      otherCard = card\r\n      break\r\n    end\r\n  end\r\n  if not otherCard then\r\n    broadcastToColor(\"Can't find other investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- get current stat line\r\n  local skillTracker = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"InvestigatorSkillTracker\")\r\n  if not skillTracker then\r\n    broadcastToColor(\"Can't find skill tracker.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- calculate static boosts\r\n  local currentStats = skillTracker.getTable(\"stats\")\r\n\r\n  local currentMd    = JSON.decode(currentCard.getGMNotes()) or {}\r\n  local currentDiff  = {}\r\n\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    currentDiff[i] = currentStats[i] - (currentMd[skill .. \"Icons\"] or 0)\r\n  end\r\n\r\n  -- calculate new stat line\r\n  local otherMd  = JSON.decode(otherCard.getGMNotes()) or {}\r\n  local newStats = {}\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    newStats[i] = currentDiff[i] + (otherMd[skill .. \"Icons\"] or 0)\r\n  end\r\n  Wait.time(function() skillTracker.call(\"updateStats\", newStats) end, 0.25)\r\n\r\n  -- instruct mat to not touch regular action tokens\r\n  PlayermatApi.activateTransformEffect(matColor)\r\n\r\n  -- swap both cards in place\r\n  local currentPos = currentCard.getPosition() + Vector(0, 0.03, 0)\r\n  local currentRot = currentCard.getRotation()\r\n\r\n  local otherPos   = otherCard.getPosition()\r\n  local otherRot   = otherCard.getRotation()\r\n\r\n  currentCard.setPosition(otherPos)\r\n  currentCard.setRotation(otherRot)\r\n\r\n  otherCard.setPosition(currentPos)\r\n  otherCard.setRotation(currentRot)\r\n\r\n  self.flip()\r\nend\r\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"IAmTransformed\")\nend)\n__bundle_register(\"core/GUIDReferenceApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local GUIDReferenceApi = {}\n\n  local function callhandler(functionName, argument)\n    return getObjectFromGUID(\"123456\").call(functionName, argument)\n  end\n\n  -- General information:\n  --- \"owner\" is a string that describes the parent object\n  --- \"type\" is a string that describes the type of object\n\n  -- Returns the matching object\n  function GUIDReferenceApi.getObjectByOwnerAndType(owner, type)\n    return callhandler(\"getObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByType(type)\n    return callhandler(\"getObjectsByType\", type)\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByOwner(owner)\n    return callhandler(\"getObjectsByOwner\", owner)\n  end\n\n  -- Sends new information to the reference handler to edit the main index (if type/guid are omitted, entry will be removed)\n  function GUIDReferenceApi.editIndex(owner, type, guid)\n    return callhandler(\"editIndex\", { owner = owner, type = type, guid = guid })\n  end\n\n  -- Returns the owner of an object or the object it's located on\n  function GUIDReferenceApi.getOwnerOfObject(object)\n    return callhandler(\"getOwnerOfObject\", object)\n  end\n\n  function GUIDReferenceApi.removeObjectByOwnerAndType(owner, type)\n    return callhandler(\"removeObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  return GUIDReferenceApi\nend\nend)\n__bundle_register(\"playercards/CardsWithHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)\n--[[ Library for cards that have helpers\nThis file is used to share code between cards with helpers.\nIt syncs the visibility of the helper with the option panel and\nmakes sure the card has the respective tag.\nAdditionally, it will call 'initialize()' and 'shutOff()'\nin the parent file if they are present.\n\nInstructions:\n1) Define the global variables before requiring this file:\nhasXML          = true  (whether the card has an XML display)\nisHelperEnabled = false (default state of the helper, should be 'false')\n\n2) Add \"CardWithHelper\" tag to .json for the card object itself.\n\n3) Add `if isHelperEnabled then updateDisplay() end` to onLoad()\n\n----------------------------------------------------------]]\n\n-- forces a new state\nfunction setHelperState(newState)\n  if doNotTurnOff == true then return end\n  isHelperEnabled = newState\n  updateSave()\n  updateDisplay()\nend\n\n-- toggles the current state\nfunction toggleHelper(manual)\n  if manual and isHelperEnabled == true then -- do not allow helper to be forced to turn on\n    doNotTurnOff = true\n  elseif manual and isHelperEnabled == false then -- return to default behavior\n    doNotTurnOff = false\n  end\n  isHelperEnabled = not isHelperEnabled\n  updateSave()\n  updateDisplay()\nend\n\n-- updates the visibility and calls events (after a small delay to allow XML being set)\nfunction updateDisplay()\n  Wait.frames(actualDisplayUpdate, 5)\nend\n\nfunction actualDisplayUpdate()\n  if isHelperEnabled then\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Disable Helper\", toggleHelper)\n    if hasXML then self.UI.show(\"Helper\") end\n    if initialize then initialize() end\n  else\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Enable Helper\", toggleHelper)\n    if hasXML then self.UI.hide(\"Helper\") end\n    if shutOff then shutOff() end\n  end\n  if generateContextMenu then generateContextMenu() end\nend\n\nfunction onPickUp()\n  setHelperState(false)\nend\nend)\n__bundle_register(\"playermat/PlayermatApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local PlayermatApi              = {}\n  local GUIDReferenceApi          = require(\"core/GUIDReferenceApi\")\n  local SearchLib                 = require(\"util/SearchLib\")\n  local localInvestigatorPosition = Vector(-1.17, 1, -0.01)\n\n  -- General notes:\n  -------------------------------------------------------------------\n  -- \"matColor\" is a string that describes the internal \"color\" of each mat\n  -- (the starting color when the game is first loaded)\n  -- Some functions will support the additional \"All\" pseudo-color to trigger that code for each mat\n  -- If a function does not support \"All\", there will be a comment\n  -------------------------------------------------------------------\n  -- \"playerColor\" (or \"handColor\") is a string that describes the actual color of the seat\n  -------------------------------------------------------------------\n\n  -- Convenience function to look up a mat's object by color, or get all mats\n  local function getMatForColor(matColor)\n    if matColor == \"All\" then\n      return GUIDReferenceApi.getObjectsByType(\"Playermat\") or {}\n    else\n      return { matColor = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"Playermat\") }\n    end\n  end\n\n  -- Convenience function to call a function on a single mat\n  ---@param matColor string Does not support \"All\"\n  ---@param funcName string Name of the function to call\n  ---@param params any Parameter for the call\n  local function callForSingleMat(matColor, funcName, params)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.call(funcName, params)\n    end\n  end\n\n  -- Returns the color of the closest playermat\n  ---@param startPos table Starting position to get the closest mat from\n  function PlayermatApi.getMatColorByPosition(startPos)\n    local result, smallestDistance\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local distance = Vector.between(startPos, mat.getPosition()):magnitude()\n      if smallestDistance == nil or distance < smallestDistance then\n        smallestDistance = distance\n        result = matColor\n      end\n    end\n    return result\n  end\n\n  -- Returns the color of the player's hand that is seated next to the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getPlayerColor(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getVar(\"playerColor\")\n    end\n  end\n\n  -- Returns the color of the playermat that owns the playercolor's hand\n  ---@param handColor string Color of the playermat\n  function PlayermatApi.getMatColor(handColor)\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      if mat.getVar(\"playerColor\") == handColor then\n        return matColor\n      end\n    end\n  end\n\n  -- Gets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getSlotData(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getTable(\"slotData\")\n    end\n  end\n\n  -- Sets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  ---@param newSlotData table New slot data for the playermat\n  function PlayermatApi.loadSlotData(matColor, newSlotData)\n    return callForSingleMat(matColor, \"updateSlotSymbols\", newSlotData)\n  end\n\n  -- Performs a search of the deck area of the requested playermat and returns the result as table\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDeckAreaObjects(matColor)\n    return callForSingleMat(matColor, \"getDeckAreaObjects\")\n  end\n\n  -- Flips the top card of the deck (useful after deck manipulation for Norman Withers)\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.flipTopCardFromDeck(matColor)\n    return callForSingleMat(matColor, \"flipTopCardFromDeck\")\n  end\n\n  -- Returns the position of the discard pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDiscardPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDiscardPosition\"))\n  end\n\n  -- Returns the position of the draw pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDrawPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDrawPosition\"))\n  end\n\n  -- Transforms a local position into a global position\n  ---@param localPos table Local position to be transformed\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.transformLocalPosition(localPos, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.positionToWorld(localPos)\n    end\n  end\n\n  -- Returns the rotation of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.returnRotation(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getRotation()\n    end\n  end\n\n  -- Returns a table with spawn data (position and rotation) for a helper object\n  ---@param helperName string Name of the helper object\n  function PlayermatApi.getHelperSpawnData(matColor, helperName)\n    local resultTable = {}\n    for color, mat in pairs(getMatForColor(matColor)) do\n      local data = mat.call(\"getHelperSpawnData\", helperName)\n      resultTable[color] = { position = Vector(data.position), rotation = Vector(data.rotation) }\n    end\n    return resultTable\n  end\n\n  -- Triggers the Upkeep for the requested playermat\n  ---@param playerColor string Color of the calling player (for messages)\n  function PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"doUpkeepFromHotkey\", playerColor)\n    end\n  end\n\n  -- Handles discarding for the requested playermat for the provided list of objects\n  ---@param matColor string Does not support \"All\"\n  ---@param objList table List of objects to discard\n  function PlayermatApi.discardListOfObjects(matColor, objList)\n    return callForSingleMat(matColor, \"discardListOfObjects\", objList)\n  end\n\n  -- Gets data about the active investigator\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getActiveInvestigatorData(matColor)\n    return callForSingleMat(matColor, \"getActiveInvestigatorData\")\n  end\n\n  -- Sets data about the active investigator\n  ---@param newData table New active investigator data (class and id)\n  function PlayermatApi.setActiveInvestigatorData(matColor, newData)\n    return callForSingleMat(matColor, \"setActiveInvestigatorData\", newData)\n  end\n\n  -- Returns the position for encounter card drawing\n  ---@param matColor string Does not support \"All\"\n  ---@param stack boolean If true, returns the leftmost position instead of the first empty from the right\n  function PlayermatApi.getEncounterCardDrawPosition(matColor, stack)\n    return Vector(callForSingleMat(matColor, \"getEncounterCardDrawPosition\", stack))\n  end\n\n  -- Sets the requested playermat's snap points to limit snapping to matching card types or not\n  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types\n  function PlayermatApi.setLimitSnapsByType(matchCardTypes, matColor)\n    return callForSingleMat(matColor, \"setLimitSnapsByType\", matchCardTypes)\n  end\n\n  -- Sets the requested playermat's draw 1 button to visible\n  ---@param isDrawButtonVisible boolean Whether the draw 1 button should be visible or not\n  function PlayermatApi.showDrawButton(isDrawButtonVisible, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"showDrawButton\", isDrawButtonVisible)\n    end\n  end\n\n  -- Updates clue counts to account for clickable clue counters\n  ---@param showCounter boolean Whether the clickable counter should be present or not\n  function PlayermatApi.clickableClues(showCounter, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"clickableClues\", showCounter)\n    end\n  end\n\n  -- Toggles the use of class textures for the requested playermat\n  ---@param state boolean Whether the class texture should be used or not\n  function PlayermatApi.useClassTexture(state, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"useClassTexture\", state)\n    end\n  end\n\n  -- updates the texture of the playermat\n  ---@param overrideName? string Force a specific texture\n  function PlayermatApi.updateTexture(matColor, overrideName)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateTexture\", overrideName)\n    end\n  end\n\n  -- Removes all clues (to the trash for tokens and counters set to 0) for the requested playermat\n  function PlayermatApi.removeClues(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"removeClues\")\n    end\n  end\n\n  -- Reports the clue count for the requested playermat\n  function PlayermatApi.getClueCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getClueCount\") or 0)\n    end\n    return count\n  end\n\n  -- Reports the doom count for the requested playermat\n  function PlayermatApi.getDoomCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getDoomCount\") or 0)\n    end\n    return count\n  end\n\n  -- Updates the specified owned counter\n  ---@param type string Counter to target\n  ---@param newValue number Value to set the counter to\n  ---@param modifier number If newValue is not provided, the existing value will be adjusted by this modifier\n  function PlayermatApi.updateCounter(matColor, type, newValue, modifier)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateCounter\", { type = type, newValue = newValue, modifier = modifier })\n    end\n  end\n\n  -- Triggers the draw function for the specified playermat\n  ---@param number number Amount of cards to draw\n  function PlayermatApi.drawCardsWithReshuffle(matColor, number)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"drawCardsWithReshuffle\", number)\n    end\n  end\n\n  -- Returns the resource counter amount\n  ---@param matColor string Does not support \"All\"\n  ---@param type string Counter to target\n  function PlayermatApi.getCounterValue(matColor, type)\n    return callForSingleMat(matColor, \"getCounterValue\", type)\n  end\n\n  -- Returns a list of mat colors that have an investigator placed\n  function PlayermatApi.getUsedMatColors()\n    local usedColors = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        table.insert(usedColors, matColor)\n      end\n    end\n    return usedColors\n  end\n\n  -- Returns a list of investigator card objects\n  function PlayermatApi.getUsedInvestigatorCards()\n    local usedCards = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        usedCards[matColor] = searchResult[1]\n      end\n    end\n    return usedCards\n  end\n\n  -- Returns investigator name\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getInvestigatorName(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult == 1 then\n        return searchResult[1].getName()\n      end\n    end\n    return \"\"\n  end\n\n  -- Resets the specified skill tracker to \"1, 1, 1, 1\"\n  function PlayermatApi.resetSkillTracker(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"resetSkillTracker\")\n    end\n  end\n\n  -- Finds all objects on the playermat and associated set aside zone and returns a table\n  ---@param filter? string Name of the filte function (see util/SearchLib)\n  function PlayermatApi.searchAroundPlayermat(matColor, filter)\n    local objList = {}\n    for _, mat in pairs(getMatForColor(matColor)) do\n      for _, obj in ipairs(mat.call(\"searchAroundSelf\", filter)) do\n        table.insert(objList, obj)\n      end\n    end\n    return objList\n  end\n\n  -- Spawns the regular action tokens\n  function PlayermatApi.spawnActionTokens(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"spawnActionTokens\")\n    end\n  end\n\n  -- Triggers the metadata sync for all playermats\n  function PlayermatApi.syncAllCustomizableCards()\n    for _, mat in pairs(getMatForColor(\"All\")) do\n      mat.call(\"syncAllCustomizableCards\")\n    end\n  end\n\n  -- Gets the value of the \"Use Resource Counters\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getResourceCounterOption(matColor)\n    return callForSingleMat(matColor, \"getResourceCounterOption\")\n  end\n\n  -- Gets the value of the \"Show Token Splash\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getTokenSplashOption(matColor)\n    return callForSingleMat(matColor, \"getTokenSplashOption\")\n  end\n\n  -- Gets the exhaust rotation that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  ---@param convertToGlobal? boolean True if the global (Vector) rotation is requested (otherwise just local Y-rotation)\n  function PlayermatApi.getExhaustRotation(matColor, convertToGlobal)\n    return callForSingleMat(matColor, \"getExhaustRotation\", convertToGlobal)\n  end\n\n  -- moves + rotates a playermat (and related objects)\n  ---@param position? table New position for the playermat\n  ---@param rotationY? number New y-rotation for the playermat (X and Z will be 0)\n  ---@param positionOffset? table Positional offset for the playermat\n  function PlayermatApi.moveAndRotate(matColor, position, rotationY, positionOffset)\n    local params = { position = position, rotationY = rotationY, positionOffset = positionOffset }\n    return callForSingleMat(matColor, \"moveAndRotateSelf\", params)\n  end\n\n  -- Instructs the playermat to not touch the regular action tokens for the next investigator change\n  function PlayermatApi.activateTransformEffect(matColor)\n    return callForSingleMat(matColor, \"activateTransformEffect\")\n  end\n\n  return PlayermatApi\nend\nend)\n__bundle_register(\"util/SearchLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local SearchLib = {}\n  local FILTER_FUNCTIONS = {\n    isCard           = function(x) return x.type == \"Card\" end,\n    isDeck           = function(x) return x.type == \"Deck\" end,\n    isCardOrDeck     = function(x) return x.type == \"Card\" or x.type == \"Deck\" end,\n    isClue           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == false end,\n    isDoom           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == true end,\n    isInteractable   = function(x) return x.interactable end,\n    isTileOrToken    = function(x) return not x.Book and (x.type == \"Tile\" or x.type == \"Generic\") end,\n    isUniversalToken = function(x) return x.getMemo() == \"universalActionAbility\" end,\n  }\n\n  -- performs the actual search and returns a filtered list of object references\n  ---@param pos tts__Vector Global position\n  ---@param rot? tts__Vector Global rotation\n  ---@param size table Size\n  ---@param filter? string Name of the filter function\n  ---@param direction? table Direction (positive is up)\n  ---@param maxDistance? number Distance for the cast\n  ---@param debug? boolean Whether the debug boxes should be shown\n  local function returnSearchResult(pos, rot, size, filter, direction, maxDistance, debug)\n    local filterFunc = filter and FILTER_FUNCTIONS[filter]\n    local searchResult = Physics.cast({\n      origin       = pos,\n      direction    = direction or { 0, 1, 0 },\n      orientation  = rot or { 0, 0, 0 },\n      type         = 3,\n      size         = size,\n      max_distance = maxDistance or 0,\n      debug        = debug or false\n    })\n\n    -- filter the result for matching objects\n    local objList = {}\n    for _, v in ipairs(searchResult) do\n      if (not filter or filterFunc(v.hit_object)) then\n        table.insert(objList, v.hit_object)\n      end\n    end\n    return objList\n  end\n\n  -- searches the specified area\n  function SearchLib.inArea(pos, rot, size, filter, debug)\n    return returnSearchResult(pos, rot, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area on an object\n  function SearchLib.onObject(obj, filter, scale, debug)\n    scale      = scale or 1\n    local pos  = obj.getPosition() + Vector(0, 1, 0) -- offset by half the cast's height\n    local size = obj.getBounds().size:scale(scale):setAt(\"y\", 2)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area directly below an object\n  function SearchLib.belowObject(obj, filter, scale, debug)\n    scale        = scale or 1\n    local objPos = obj.getPosition()\n    local pos    = objPos + Vector(0, -objPos.y / 2, 0) -- offset by half the cast's height\n    local size   = obj.getBounds().size:scale(scale):setAt(\"y\", objPos.y)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the specified position (a single point)\n  function SearchLib.atPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches below the specified position (downwards until y = 0)\n  function SearchLib.belowPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    local direction = { 0, -1, 0 }\n    local maxDistance = pos.y\n    return returnSearchResult(pos, nil, size, filter, direction, maxDistance, debug)\n  end\n\n  return SearchLib\nend\nend)\n__bundle_register(\"util/TableLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local TableLib = {}\n\n  -- Checks if a list contains an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.contains(t, ele)\n    if t == nil then return false end\n    for k, v in ipairs(t) do\n      if v == ele then return true end\n    end\n    return false\n  end\n\n  -- Copies a table (or returns the original if not a table)\n  ---@param t table\n  function TableLib.copy(t)\n    if type(t) ~= \"table\" then return t end\n    local copy = {}\n    for tKey, tValue in next, t, nil do\n      copy[TableLib.copy(tKey)] = TableLib.copy(tValue)\n    end\n    setmetatable(copy, TableLib.copy(getmetatable(t)))\n    return copy\n  end\n\n  -- Returns the index of an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.getElementIndex(t, ele)\n    if t == nil then return nil end\n    for k, v in ipairs(t) do\n      if v == ele then return k end\n    end\n    return nil\n  end\n\n  -- Returns the keys of a table as new table\n  ---@param t table\n  ---@param filterValue? any Only keys with this value will be extracted\n  function TableLib.getKeys(t, filterValue)\n    local keys = {}\n    for k, v in pairs(t) do\n      if filterValue ~= nil then\n        if v == filterValue then\n          table.insert(keys, k)\n        end\n      else\n        table.insert(keys, k)\n      end\n    end\n    return keys\n  end\n\n  -- Returns a random list element\n  ---@param t table\n  function TableLib.pickRandom(t)\n    return t[math.random(#t)]\n  end\n\n  -- Returns a reversed list\n  ---@param t table\n  function TableLib.reverse(t)\n    local r = {}\n    for i = #t, 1, -1 do\n      table.insert(r, t[i])\n    end\n    return r\n  end\n\n  -- Shuffles a list in place (Fisher-Yates-Shuffle)\n  ---@param t table\n  function TableLib.shuffle(t)\n    local n = #t\n    while n > 1 do\n      local k = math.random(n)\n      t[n], t[k] = t[k], t[n]\n      n = n - 1\n    end\n    return t\n  end\n\n  -- Returns a copy of a list without duplicates\n  ---@param t table\n  function TableLib.removeDuplicates(t)\n    local seen = {}\n    local result = {}\n    for _, value in ipairs(t) do\n      if not seen[value] then\n        seen[value] = true\n        table.insert(result, value)\n      end\n    end\n    return result\n  end\n\n  return TableLib\nend\nend)\nreturn __bundle_require(\"__root\")",
          "LuaScriptState": "{\"isHelperEnabled\":false}"
        }
      ]
    },
    {
      "GUID": "841d2b",
      "Name": "Deck",
      "Transform": {
        "posX": 41.387,
        "posY": 1.51205766,
        "posZ": 60.602005,
        "rotX": -6.703134e-08,
        "rotY": 270.0,
        "rotZ": 2.96625018e-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Hands": false,
      "DeckIDs": [
        102000,
        101900
      ],
      "CustomDeck": {
        "1020": {
          "FaceURL": "https://www.dropbox.com/scl/fi/lsa0s9vh0ad005gcn1f7x/70fb8a3a-3bc8-438e-bbf1-75a01d9dca4a-Front-The-Last-Survivor-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=n95gum0x2gqo1vohiz2inn4hk&raw=1&cachebust=1752199345990",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1019": {
          "FaceURL": "https://www.dropbox.com/scl/fi/7n686vkup5y1lk19022m6/6ce8a8b9-27b2-4ee3-a77a-c54316de299c-Front-I-Am-Transformed-Nightscream-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=cqjsynbqfldcqrgvsuanz0mxc&raw=1&cachebust=1752425818236",
          "BackURL": "https://www.dropbox.com/scl/fi/as5irx0eq5udq2buai8jf/6ce8a8b9-27b2-4ee3-a77a-c54316de299c-Back-I-Am-Transformed-Nightscream-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=yrkk0hzifvy45fk6h25h6dggt&raw=1&cachebust=1752425820228",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      },
      "ContainedObjects": [
        {
          "GUID": "e00021",
          "Name": "Card",
          "Transform": {
            "posX": 0.0,
            "posY": 0.0,
            "posZ": 0.0,
            "rotX": 0.0,
            "rotY": 270.0,
            "rotZ": 0.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "The Last Survivor",
          "GMNotes": "{\"TtsZoopGuid\":\"70fb8a3a-3bc8-438e-bbf1-75a01d9dca4a\",\"id\":\"70fb8a3a-3bc8-438e-bbf1-75a01d9dca4a\",\"type\":\"Treachery\",\"traits\":\"Madness.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 102000,
          "CustomDeck": {
            "1020": {
              "FaceURL": "https://www.dropbox.com/scl/fi/lsa0s9vh0ad005gcn1f7x/70fb8a3a-3bc8-438e-bbf1-75a01d9dca4a-Front-The-Last-Survivor-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=n95gum0x2gqo1vohiz2inn4hk&raw=1&cachebust=1752199345990",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00020",
          "Name": "Card",
          "Transform": {
            "posX": 41.3482323,
            "posY": 1.55610609,
            "posZ": 60.6620064,
            "rotX": 0.004188696,
            "rotY": 270.0,
            "rotZ": 180.001633,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "I Am Transformed",
          "Description": "Robot Mode",
          "GMNotes": "{\"TtsZoopGuid\":\"6ce8a8b9-27b2-4ee3-a77a-c54316de299c\",\"id\":\"6ce8a8b9-27b2-4ee3-a77a-c54316de299c\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"permanent\":true,\"uses\":[{\"count\":0,\"token\":\"resource\",\"type\":\"Charge\"}],\"startsInPlay\":true}",
          "Tags": [
            "Asset",
            "CardWithHelper",
            "PlayerCard"
          ],
          "HideWhenFaceDown": false,
          "CardID": 101900,
          "CustomDeck": {
            "1019": {
              "FaceURL": "https://www.dropbox.com/scl/fi/7n686vkup5y1lk19022m6/6ce8a8b9-27b2-4ee3-a77a-c54316de299c-Front-I-Am-Transformed-Nightscream-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=cqjsynbqfldcqrgvsuanz0mxc&raw=1&cachebust=1752425818236",
              "BackURL": "https://www.dropbox.com/scl/fi/as5irx0eq5udq2buai8jf/6ce8a8b9-27b2-4ee3-a77a-c54316de299c-Back-I-Am-Transformed-Nightscream-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=yrkk0hzifvy45fk6h25h6dggt&raw=1&cachebust=1752425820228",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"IAmTransformed\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"playercards/CardsWithHelper\")\r\nlocal GUIDReferenceApi = require(\"core/GUIDReferenceApi\")\r\nlocal PlayermatApi     = require(\"playermat/PlayermatApi\")\r\nlocal TableLib         = require(\"util/TableLib\")\r\n\r\n-- intentionally global\r\nhasXML                 = true\r\nisHelperEnabled        = false\r\n\r\nfunction updateSave()\r\n  self.script_state = JSON.encode({ isHelperEnabled = isHelperEnabled })\r\nend\r\n\r\nfunction onLoad(savedData)\r\n  if savedData and savedData ~= \"\" then\r\n    local loadedData = JSON.decode(savedData)\r\n    isHelperEnabled = loadedData.isHelperEnabled\r\n  end\r\n  self.addTag(\"CardWithHelper\")\r\n  generateXml()\r\nend\r\n\r\nfunction generateXml()\r\n  local xml = {}\r\n\r\n  local mainPanel = {\r\n    tag        = \"Panel\",\r\n    attributes = { id = \"Helper\", active = isHelperEnabled },\r\n    children   = {}\r\n  }\r\n\r\n  local buttonXml = {\r\n    tag = \"Button\",\r\n    attributes = {\r\n      color        = \"#C0C0C080\",\r\n      height       = 550,\r\n      width        = 1200,\r\n      rotation     = \"0 0 180\",\r\n      scale        = \"0.1 0.1 1\",\r\n      position     = \"0 -25 -40\",\r\n      ignoreLayout = true,\r\n      padding      = \"50 50 50 50\",\r\n      onClick      = \"transform\",\r\n      text         = \"Transform\",\r\n      textColor    = \"Black\",\r\n      font         = \"font_teutonic-arkham\",\r\n      fontSize     = 200\r\n    }\r\n  }\r\n\r\n  table.insert(mainPanel.children, buttonXml)\r\n\r\n  local reverseButtonXml = TableLib.copy(buttonXml)\r\n  reverseButtonXml.attributes.position = \"0 -25 40\"\r\n  reverseButtonXml.attributes.rotation = \"0 180 180\"\r\n  table.insert(mainPanel.children, reverseButtonXml)\r\n\r\n  table.insert(xml, mainPanel)\r\n  self.UI.setXmlTable(xml)\r\nend\r\n\r\nfunction transform(player)\r\n  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())\r\n\r\n  -- look for current investigator\r\n  local invCards = PlayermatApi.getUsedInvestigatorCards()\r\n  local currentCard = invCards[matColor]\r\n  if not currentCard then\r\n    broadcastToColor(\"Can't find current investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- look for other investigator\r\n  local otherCard\r\n  for _, card in ipairs(PlayermatApi.searchAroundPlayermat(matColor, \"isCard\")) do\r\n    if card.hasTag(\"Investigator\") and card ~= currentCard then\r\n      otherCard = card\r\n      break\r\n    end\r\n  end\r\n  if not otherCard then\r\n    broadcastToColor(\"Can't find other investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- get current stat line\r\n  local skillTracker = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"InvestigatorSkillTracker\")\r\n  if not skillTracker then\r\n    broadcastToColor(\"Can't find skill tracker.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- calculate static boosts\r\n  local currentStats = skillTracker.getTable(\"stats\")\r\n\r\n  local currentMd    = JSON.decode(currentCard.getGMNotes()) or {}\r\n  local currentDiff  = {}\r\n\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    currentDiff[i] = currentStats[i] - (currentMd[skill .. \"Icons\"] or 0)\r\n  end\r\n\r\n  -- calculate new stat line\r\n  local otherMd  = JSON.decode(otherCard.getGMNotes()) or {}\r\n  local newStats = {}\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    newStats[i] = currentDiff[i] + (otherMd[skill .. \"Icons\"] or 0)\r\n  end\r\n  Wait.time(function() skillTracker.call(\"updateStats\", newStats) end, 0.25)\r\n\r\n  -- instruct mat to not touch regular action tokens\r\n  PlayermatApi.activateTransformEffect(matColor)\r\n\r\n  -- swap both cards in place\r\n  local currentPos = currentCard.getPosition() + Vector(0, 0.03, 0)\r\n  local currentRot = currentCard.getRotation()\r\n\r\n  local otherPos   = otherCard.getPosition()\r\n  local otherRot   = otherCard.getRotation()\r\n\r\n  currentCard.setPosition(otherPos)\r\n  currentCard.setRotation(otherRot)\r\n\r\n  otherCard.setPosition(currentPos)\r\n  otherCard.setRotation(currentRot)\r\n\r\n  self.flip()\r\nend\r\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"IAmTransformed\")\nend)\n__bundle_register(\"core/GUIDReferenceApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local GUIDReferenceApi = {}\n\n  local function callhandler(functionName, argument)\n    return getObjectFromGUID(\"123456\").call(functionName, argument)\n  end\n\n  -- General information:\n  --- \"owner\" is a string that describes the parent object\n  --- \"type\" is a string that describes the type of object\n\n  -- Returns the matching object\n  function GUIDReferenceApi.getObjectByOwnerAndType(owner, type)\n    return callhandler(\"getObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByType(type)\n    return callhandler(\"getObjectsByType\", type)\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByOwner(owner)\n    return callhandler(\"getObjectsByOwner\", owner)\n  end\n\n  -- Sends new information to the reference handler to edit the main index (if type/guid are omitted, entry will be removed)\n  function GUIDReferenceApi.editIndex(owner, type, guid)\n    return callhandler(\"editIndex\", { owner = owner, type = type, guid = guid })\n  end\n\n  -- Returns the owner of an object or the object it's located on\n  function GUIDReferenceApi.getOwnerOfObject(object)\n    return callhandler(\"getOwnerOfObject\", object)\n  end\n\n  function GUIDReferenceApi.removeObjectByOwnerAndType(owner, type)\n    return callhandler(\"removeObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  return GUIDReferenceApi\nend\nend)\n__bundle_register(\"playercards/CardsWithHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)\n--[[ Library for cards that have helpers\nThis file is used to share code between cards with helpers.\nIt syncs the visibility of the helper with the option panel and\nmakes sure the card has the respective tag.\nAdditionally, it will call 'initialize()' and 'shutOff()'\nin the parent file if they are present.\n\nInstructions:\n1) Define the global variables before requiring this file:\nhasXML          = true  (whether the card has an XML display)\nisHelperEnabled = false (default state of the helper, should be 'false')\n\n2) Add \"CardWithHelper\" tag to .json for the card object itself.\n\n3) Add `if isHelperEnabled then updateDisplay() end` to onLoad()\n\n----------------------------------------------------------]]\n\n-- forces a new state\nfunction setHelperState(newState)\n  if doNotTurnOff == true then return end\n  isHelperEnabled = newState\n  updateSave()\n  updateDisplay()\nend\n\n-- toggles the current state\nfunction toggleHelper(manual)\n  if manual and isHelperEnabled == true then -- do not allow helper to be forced to turn on\n    doNotTurnOff = true\n  elseif manual and isHelperEnabled == false then -- return to default behavior\n    doNotTurnOff = false\n  end\n  isHelperEnabled = not isHelperEnabled\n  updateSave()\n  updateDisplay()\nend\n\n-- updates the visibility and calls events (after a small delay to allow XML being set)\nfunction updateDisplay()\n  Wait.frames(actualDisplayUpdate, 5)\nend\n\nfunction actualDisplayUpdate()\n  if isHelperEnabled then\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Disable Helper\", toggleHelper)\n    if hasXML then self.UI.show(\"Helper\") end\n    if initialize then initialize() end\n  else\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Enable Helper\", toggleHelper)\n    if hasXML then self.UI.hide(\"Helper\") end\n    if shutOff then shutOff() end\n  end\n  if generateContextMenu then generateContextMenu() end\nend\n\nfunction onPickUp()\n  setHelperState(false)\nend\nend)\n__bundle_register(\"playermat/PlayermatApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local PlayermatApi              = {}\n  local GUIDReferenceApi          = require(\"core/GUIDReferenceApi\")\n  local SearchLib                 = require(\"util/SearchLib\")\n  local localInvestigatorPosition = Vector(-1.17, 1, -0.01)\n\n  -- General notes:\n  -------------------------------------------------------------------\n  -- \"matColor\" is a string that describes the internal \"color\" of each mat\n  -- (the starting color when the game is first loaded)\n  -- Some functions will support the additional \"All\" pseudo-color to trigger that code for each mat\n  -- If a function does not support \"All\", there will be a comment\n  -------------------------------------------------------------------\n  -- \"playerColor\" (or \"handColor\") is a string that describes the actual color of the seat\n  -------------------------------------------------------------------\n\n  -- Convenience function to look up a mat's object by color, or get all mats\n  local function getMatForColor(matColor)\n    if matColor == \"All\" then\n      return GUIDReferenceApi.getObjectsByType(\"Playermat\") or {}\n    else\n      return { matColor = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"Playermat\") }\n    end\n  end\n\n  -- Convenience function to call a function on a single mat\n  ---@param matColor string Does not support \"All\"\n  ---@param funcName string Name of the function to call\n  ---@param params any Parameter for the call\n  local function callForSingleMat(matColor, funcName, params)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.call(funcName, params)\n    end\n  end\n\n  -- Returns the color of the closest playermat\n  ---@param startPos table Starting position to get the closest mat from\n  function PlayermatApi.getMatColorByPosition(startPos)\n    local result, smallestDistance\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local distance = Vector.between(startPos, mat.getPosition()):magnitude()\n      if smallestDistance == nil or distance < smallestDistance then\n        smallestDistance = distance\n        result = matColor\n      end\n    end\n    return result\n  end\n\n  -- Returns the color of the player's hand that is seated next to the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getPlayerColor(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getVar(\"playerColor\")\n    end\n  end\n\n  -- Returns the color of the playermat that owns the playercolor's hand\n  ---@param handColor string Color of the playermat\n  function PlayermatApi.getMatColor(handColor)\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      if mat.getVar(\"playerColor\") == handColor then\n        return matColor\n      end\n    end\n  end\n\n  -- Gets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getSlotData(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getTable(\"slotData\")\n    end\n  end\n\n  -- Sets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  ---@param newSlotData table New slot data for the playermat\n  function PlayermatApi.loadSlotData(matColor, newSlotData)\n    return callForSingleMat(matColor, \"updateSlotSymbols\", newSlotData)\n  end\n\n  -- Performs a search of the deck area of the requested playermat and returns the result as table\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDeckAreaObjects(matColor)\n    return callForSingleMat(matColor, \"getDeckAreaObjects\")\n  end\n\n  -- Flips the top card of the deck (useful after deck manipulation for Norman Withers)\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.flipTopCardFromDeck(matColor)\n    return callForSingleMat(matColor, \"flipTopCardFromDeck\")\n  end\n\n  -- Returns the position of the discard pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDiscardPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDiscardPosition\"))\n  end\n\n  -- Returns the position of the draw pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDrawPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDrawPosition\"))\n  end\n\n  -- Transforms a local position into a global position\n  ---@param localPos table Local position to be transformed\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.transformLocalPosition(localPos, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.positionToWorld(localPos)\n    end\n  end\n\n  -- Returns the rotation of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.returnRotation(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getRotation()\n    end\n  end\n\n  -- Returns a table with spawn data (position and rotation) for a helper object\n  ---@param helperName string Name of the helper object\n  function PlayermatApi.getHelperSpawnData(matColor, helperName)\n    local resultTable = {}\n    for color, mat in pairs(getMatForColor(matColor)) do\n      local data = mat.call(\"getHelperSpawnData\", helperName)\n      resultTable[color] = { position = Vector(data.position), rotation = Vector(data.rotation) }\n    end\n    return resultTable\n  end\n\n  -- Triggers the Upkeep for the requested playermat\n  ---@param playerColor string Color of the calling player (for messages)\n  function PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"doUpkeepFromHotkey\", playerColor)\n    end\n  end\n\n  -- Handles discarding for the requested playermat for the provided list of objects\n  ---@param matColor string Does not support \"All\"\n  ---@param objList table List of objects to discard\n  function PlayermatApi.discardListOfObjects(matColor, objList)\n    return callForSingleMat(matColor, \"discardListOfObjects\", objList)\n  end\n\n  -- Gets data about the active investigator\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getActiveInvestigatorData(matColor)\n    return callForSingleMat(matColor, \"getActiveInvestigatorData\")\n  end\n\n  -- Sets data about the active investigator\n  ---@param newData table New active investigator data (class and id)\n  function PlayermatApi.setActiveInvestigatorData(matColor, newData)\n    return callForSingleMat(matColor, \"setActiveInvestigatorData\", newData)\n  end\n\n  -- Returns the position for encounter card drawing\n  ---@param matColor string Does not support \"All\"\n  ---@param stack boolean If true, returns the leftmost position instead of the first empty from the right\n  function PlayermatApi.getEncounterCardDrawPosition(matColor, stack)\n    return Vector(callForSingleMat(matColor, \"getEncounterCardDrawPosition\", stack))\n  end\n\n  -- Sets the requested playermat's snap points to limit snapping to matching card types or not\n  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types\n  function PlayermatApi.setLimitSnapsByType(matchCardTypes, matColor)\n    return callForSingleMat(matColor, \"setLimitSnapsByType\", matchCardTypes)\n  end\n\n  -- Sets the requested playermat's draw 1 button to visible\n  ---@param isDrawButtonVisible boolean Whether the draw 1 button should be visible or not\n  function PlayermatApi.showDrawButton(isDrawButtonVisible, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"showDrawButton\", isDrawButtonVisible)\n    end\n  end\n\n  -- Updates clue counts to account for clickable clue counters\n  ---@param showCounter boolean Whether the clickable counter should be present or not\n  function PlayermatApi.clickableClues(showCounter, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"clickableClues\", showCounter)\n    end\n  end\n\n  -- Toggles the use of class textures for the requested playermat\n  ---@param state boolean Whether the class texture should be used or not\n  function PlayermatApi.useClassTexture(state, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"useClassTexture\", state)\n    end\n  end\n\n  -- updates the texture of the playermat\n  ---@param overrideName? string Force a specific texture\n  function PlayermatApi.updateTexture(matColor, overrideName)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateTexture\", overrideName)\n    end\n  end\n\n  -- Removes all clues (to the trash for tokens and counters set to 0) for the requested playermat\n  function PlayermatApi.removeClues(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"removeClues\")\n    end\n  end\n\n  -- Reports the clue count for the requested playermat\n  function PlayermatApi.getClueCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getClueCount\") or 0)\n    end\n    return count\n  end\n\n  -- Reports the doom count for the requested playermat\n  function PlayermatApi.getDoomCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getDoomCount\") or 0)\n    end\n    return count\n  end\n\n  -- Updates the specified owned counter\n  ---@param type string Counter to target\n  ---@param newValue number Value to set the counter to\n  ---@param modifier number If newValue is not provided, the existing value will be adjusted by this modifier\n  function PlayermatApi.updateCounter(matColor, type, newValue, modifier)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateCounter\", { type = type, newValue = newValue, modifier = modifier })\n    end\n  end\n\n  -- Triggers the draw function for the specified playermat\n  ---@param number number Amount of cards to draw\n  function PlayermatApi.drawCardsWithReshuffle(matColor, number)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"drawCardsWithReshuffle\", number)\n    end\n  end\n\n  -- Returns the resource counter amount\n  ---@param matColor string Does not support \"All\"\n  ---@param type string Counter to target\n  function PlayermatApi.getCounterValue(matColor, type)\n    return callForSingleMat(matColor, \"getCounterValue\", type)\n  end\n\n  -- Returns a list of mat colors that have an investigator placed\n  function PlayermatApi.getUsedMatColors()\n    local usedColors = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        table.insert(usedColors, matColor)\n      end\n    end\n    return usedColors\n  end\n\n  -- Returns a list of investigator card objects\n  function PlayermatApi.getUsedInvestigatorCards()\n    local usedCards = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        usedCards[matColor] = searchResult[1]\n      end\n    end\n    return usedCards\n  end\n\n  -- Returns investigator name\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getInvestigatorName(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult == 1 then\n        return searchResult[1].getName()\n      end\n    end\n    return \"\"\n  end\n\n  -- Resets the specified skill tracker to \"1, 1, 1, 1\"\n  function PlayermatApi.resetSkillTracker(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"resetSkillTracker\")\n    end\n  end\n\n  -- Finds all objects on the playermat and associated set aside zone and returns a table\n  ---@param filter? string Name of the filte function (see util/SearchLib)\n  function PlayermatApi.searchAroundPlayermat(matColor, filter)\n    local objList = {}\n    for _, mat in pairs(getMatForColor(matColor)) do\n      for _, obj in ipairs(mat.call(\"searchAroundSelf\", filter)) do\n        table.insert(objList, obj)\n      end\n    end\n    return objList\n  end\n\n  -- Spawns the regular action tokens\n  function PlayermatApi.spawnActionTokens(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"spawnActionTokens\")\n    end\n  end\n\n  -- Triggers the metadata sync for all playermats\n  function PlayermatApi.syncAllCustomizableCards()\n    for _, mat in pairs(getMatForColor(\"All\")) do\n      mat.call(\"syncAllCustomizableCards\")\n    end\n  end\n\n  -- Gets the value of the \"Use Resource Counters\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getResourceCounterOption(matColor)\n    return callForSingleMat(matColor, \"getResourceCounterOption\")\n  end\n\n  -- Gets the value of the \"Show Token Splash\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getTokenSplashOption(matColor)\n    return callForSingleMat(matColor, \"getTokenSplashOption\")\n  end\n\n  -- Gets the exhaust rotation that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  ---@param convertToGlobal? boolean True if the global (Vector) rotation is requested (otherwise just local Y-rotation)\n  function PlayermatApi.getExhaustRotation(matColor, convertToGlobal)\n    return callForSingleMat(matColor, \"getExhaustRotation\", convertToGlobal)\n  end\n\n  -- moves + rotates a playermat (and related objects)\n  ---@param position? table New position for the playermat\n  ---@param rotationY? number New y-rotation for the playermat (X and Z will be 0)\n  ---@param positionOffset? table Positional offset for the playermat\n  function PlayermatApi.moveAndRotate(matColor, position, rotationY, positionOffset)\n    local params = { position = position, rotationY = rotationY, positionOffset = positionOffset }\n    return callForSingleMat(matColor, \"moveAndRotateSelf\", params)\n  end\n\n  -- Instructs the playermat to not touch the regular action tokens for the next investigator change\n  function PlayermatApi.activateTransformEffect(matColor)\n    return callForSingleMat(matColor, \"activateTransformEffect\")\n  end\n\n  return PlayermatApi\nend\nend)\n__bundle_register(\"util/SearchLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local SearchLib = {}\n  local FILTER_FUNCTIONS = {\n    isCard           = function(x) return x.type == \"Card\" end,\n    isDeck           = function(x) return x.type == \"Deck\" end,\n    isCardOrDeck     = function(x) return x.type == \"Card\" or x.type == \"Deck\" end,\n    isClue           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == false end,\n    isDoom           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == true end,\n    isInteractable   = function(x) return x.interactable end,\n    isTileOrToken    = function(x) return not x.Book and (x.type == \"Tile\" or x.type == \"Generic\") end,\n    isUniversalToken = function(x) return x.getMemo() == \"universalActionAbility\" end,\n  }\n\n  -- performs the actual search and returns a filtered list of object references\n  ---@param pos tts__Vector Global position\n  ---@param rot? tts__Vector Global rotation\n  ---@param size table Size\n  ---@param filter? string Name of the filter function\n  ---@param direction? table Direction (positive is up)\n  ---@param maxDistance? number Distance for the cast\n  ---@param debug? boolean Whether the debug boxes should be shown\n  local function returnSearchResult(pos, rot, size, filter, direction, maxDistance, debug)\n    local filterFunc = filter and FILTER_FUNCTIONS[filter]\n    local searchResult = Physics.cast({\n      origin       = pos,\n      direction    = direction or { 0, 1, 0 },\n      orientation  = rot or { 0, 0, 0 },\n      type         = 3,\n      size         = size,\n      max_distance = maxDistance or 0,\n      debug        = debug or false\n    })\n\n    -- filter the result for matching objects\n    local objList = {}\n    for _, v in ipairs(searchResult) do\n      if (not filter or filterFunc(v.hit_object)) then\n        table.insert(objList, v.hit_object)\n      end\n    end\n    return objList\n  end\n\n  -- searches the specified area\n  function SearchLib.inArea(pos, rot, size, filter, debug)\n    return returnSearchResult(pos, rot, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area on an object\n  function SearchLib.onObject(obj, filter, scale, debug)\n    scale      = scale or 1\n    local pos  = obj.getPosition() + Vector(0, 1, 0) -- offset by half the cast's height\n    local size = obj.getBounds().size:scale(scale):setAt(\"y\", 2)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area directly below an object\n  function SearchLib.belowObject(obj, filter, scale, debug)\n    scale        = scale or 1\n    local objPos = obj.getPosition()\n    local pos    = objPos + Vector(0, -objPos.y / 2, 0) -- offset by half the cast's height\n    local size   = obj.getBounds().size:scale(scale):setAt(\"y\", objPos.y)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the specified position (a single point)\n  function SearchLib.atPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches below the specified position (downwards until y = 0)\n  function SearchLib.belowPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    local direction = { 0, -1, 0 }\n    local maxDistance = pos.y\n    return returnSearchResult(pos, nil, size, filter, direction, maxDistance, debug)\n  end\n\n  return SearchLib\nend\nend)\n__bundle_register(\"util/TableLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local TableLib = {}\n\n  -- Checks if a list contains an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.contains(t, ele)\n    if t == nil then return false end\n    for k, v in ipairs(t) do\n      if v == ele then return true end\n    end\n    return false\n  end\n\n  -- Copies a table (or returns the original if not a table)\n  ---@param t table\n  function TableLib.copy(t)\n    if type(t) ~= \"table\" then return t end\n    local copy = {}\n    for tKey, tValue in next, t, nil do\n      copy[TableLib.copy(tKey)] = TableLib.copy(tValue)\n    end\n    setmetatable(copy, TableLib.copy(getmetatable(t)))\n    return copy\n  end\n\n  -- Returns the index of an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.getElementIndex(t, ele)\n    if t == nil then return nil end\n    for k, v in ipairs(t) do\n      if v == ele then return k end\n    end\n    return nil\n  end\n\n  -- Returns the keys of a table as new table\n  ---@param t table\n  ---@param filterValue? any Only keys with this value will be extracted\n  function TableLib.getKeys(t, filterValue)\n    local keys = {}\n    for k, v in pairs(t) do\n      if filterValue ~= nil then\n        if v == filterValue then\n          table.insert(keys, k)\n        end\n      else\n        table.insert(keys, k)\n      end\n    end\n    return keys\n  end\n\n  -- Returns a random list element\n  ---@param t table\n  function TableLib.pickRandom(t)\n    return t[math.random(#t)]\n  end\n\n  -- Returns a reversed list\n  ---@param t table\n  function TableLib.reverse(t)\n    local r = {}\n    for i = #t, 1, -1 do\n      table.insert(r, t[i])\n    end\n    return r\n  end\n\n  -- Shuffles a list in place (Fisher-Yates-Shuffle)\n  ---@param t table\n  function TableLib.shuffle(t)\n    local n = #t\n    while n > 1 do\n      local k = math.random(n)\n      t[n], t[k] = t[k], t[n]\n      n = n - 1\n    end\n    return t\n  end\n\n  -- Returns a copy of a list without duplicates\n  ---@param t table\n  function TableLib.removeDuplicates(t)\n    local seen = {}\n    local result = {}\n    for _, value in ipairs(t) do\n      if not seen[value] then\n        seen[value] = true\n        table.insert(result, value)\n      end\n    end\n    return result\n  end\n\n  return TableLib\nend\nend)\nreturn __bundle_require(\"__root\")"
        }
      ]
    },
    {
      "GUID": "8f9922",
      "Name": "Deck",
      "Transform": {
        "posX": 41.414,
        "posY": 1.51205778,
        "posZ": 87.49899,
        "rotX": -5.672952e-08,
        "rotY": 270.0,
        "rotZ": -8.659848e-09,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Hands": false,
      "DeckIDs": [
        102600,
        102500
      ],
      "CustomDeck": {
        "1026": {
          "FaceURL": "https://www.dropbox.com/scl/fi/umgskk3hac35vt6oqvt8d/333e768e-6415-44f9-bd3a-908b02bba9d5-Front-Rage-of-the-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=quym8edjby495uts6aesxizsk&raw=1&cachebust=1752199361955",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1025": {
          "FaceURL": "https://www.dropbox.com/scl/fi/f5q7hrpwgsjogh8t2ixse/08e0dc6b-2e96-4e6d-a6b0-b66b90e3e17e-Front-I-Am-Transformed-Optimus-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=q6di08fa31p7l08ta991jefh9&raw=1&cachebust=1752294584815",
          "BackURL": "https://www.dropbox.com/scl/fi/97d3hvbekv9vwtkq8i52y/08e0dc6b-2e96-4e6d-a6b0-b66b90e3e17e-Back-I-Am-Transformed-Optimus-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=76c05ks8eih00rol6zvdrybdf&raw=1&cachebust=1752294586081",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      },
      "ContainedObjects": [
        {
          "GUID": "e0002b",
          "Name": "Card",
          "Transform": {
            "posX": 0.0,
            "posY": 0.0,
            "posZ": 0.0,
            "rotX": 0.0,
            "rotY": 270.0,
            "rotZ": 0.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fear of Loss",
          "GMNotes": "{\"TtsZoopGuid\":\"333e768e-6415-44f9-bd3a-908b02bba9d5\",\"id\":\"333e768e-6415-44f9-bd3a-908b02bba9d5\",\"type\":\"Treachery\",\"traits\":\"Flaw.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 102600,
          "CustomDeck": {
            "1026": {
              "FaceURL": "https://www.dropbox.com/scl/fi/umgskk3hac35vt6oqvt8d/333e768e-6415-44f9-bd3a-908b02bba9d5-Front-Rage-of-the-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=quym8edjby495uts6aesxizsk&raw=1&cachebust=1752199361955",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0002a",
          "Name": "Card",
          "Transform": {
            "posX": 41.5706749,
            "posY": 1.55611324,
            "posZ": 87.61875,
            "rotX": -0.00328748184,
            "rotY": 270.0,
            "rotZ": 180.0006,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "I Am Transformed",
          "Description": "Robot Mode",
          "GMNotes": "{\"TtsZoopGuid\":\"08e0dc6b-2e96-4e6d-a6b0-b66b90e3e17e\",\"id\":\"08e0dc6b-2e96-4e6d-a6b0-b66b90e3e17e\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"permanent\":true,\"startsInPlay\":true}",
          "Tags": [
            "Asset",
            "CardWithHelper",
            "PlayerCard"
          ],
          "HideWhenFaceDown": false,
          "CardID": 102500,
          "CustomDeck": {
            "1025": {
              "FaceURL": "https://www.dropbox.com/scl/fi/f5q7hrpwgsjogh8t2ixse/08e0dc6b-2e96-4e6d-a6b0-b66b90e3e17e-Front-I-Am-Transformed-Optimus-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=q6di08fa31p7l08ta991jefh9&raw=1&cachebust=1752294584815",
              "BackURL": "https://www.dropbox.com/scl/fi/97d3hvbekv9vwtkq8i52y/08e0dc6b-2e96-4e6d-a6b0-b66b90e3e17e-Back-I-Am-Transformed-Optimus-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=76c05ks8eih00rol6zvdrybdf&raw=1&cachebust=1752294586081",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"IAmTransformed\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"playercards/CardsWithHelper\")\r\nlocal GUIDReferenceApi = require(\"core/GUIDReferenceApi\")\r\nlocal PlayermatApi     = require(\"playermat/PlayermatApi\")\r\nlocal TableLib         = require(\"util/TableLib\")\r\n\r\n-- intentionally global\r\nhasXML                 = true\r\nisHelperEnabled        = false\r\n\r\nfunction updateSave()\r\n  self.script_state = JSON.encode({ isHelperEnabled = isHelperEnabled })\r\nend\r\n\r\nfunction onLoad(savedData)\r\n  if savedData and savedData ~= \"\" then\r\n    local loadedData = JSON.decode(savedData)\r\n    isHelperEnabled = loadedData.isHelperEnabled\r\n  end\r\n  self.addTag(\"CardWithHelper\")\r\n  generateXml()\r\nend\r\n\r\nfunction generateXml()\r\n  local xml = {}\r\n\r\n  local mainPanel = {\r\n    tag        = \"Panel\",\r\n    attributes = { id = \"Helper\", active = isHelperEnabled },\r\n    children   = {}\r\n  }\r\n\r\n  local buttonXml = {\r\n    tag = \"Button\",\r\n    attributes = {\r\n      color        = \"#C0C0C080\",\r\n      height       = 550,\r\n      width        = 1200,\r\n      rotation     = \"0 0 180\",\r\n      scale        = \"0.1 0.1 1\",\r\n      position     = \"0 -25 -40\",\r\n      ignoreLayout = true,\r\n      padding      = \"50 50 50 50\",\r\n      onClick      = \"transform\",\r\n      text         = \"Transform\",\r\n      textColor    = \"Black\",\r\n      font         = \"font_teutonic-arkham\",\r\n      fontSize     = 200\r\n    }\r\n  }\r\n\r\n  table.insert(mainPanel.children, buttonXml)\r\n\r\n  local reverseButtonXml = TableLib.copy(buttonXml)\r\n  reverseButtonXml.attributes.position = \"0 -25 40\"\r\n  reverseButtonXml.attributes.rotation = \"0 180 180\"\r\n  table.insert(mainPanel.children, reverseButtonXml)\r\n\r\n  table.insert(xml, mainPanel)\r\n  self.UI.setXmlTable(xml)\r\nend\r\n\r\nfunction transform(player)\r\n  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())\r\n\r\n  -- look for current investigator\r\n  local invCards = PlayermatApi.getUsedInvestigatorCards()\r\n  local currentCard = invCards[matColor]\r\n  if not currentCard then\r\n    broadcastToColor(\"Can't find current investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- look for other investigator\r\n  local otherCard\r\n  for _, card in ipairs(PlayermatApi.searchAroundPlayermat(matColor, \"isCard\")) do\r\n    if card.hasTag(\"Investigator\") and card ~= currentCard then\r\n      otherCard = card\r\n      break\r\n    end\r\n  end\r\n  if not otherCard then\r\n    broadcastToColor(\"Can't find other investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- get current stat line\r\n  local skillTracker = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"InvestigatorSkillTracker\")\r\n  if not skillTracker then\r\n    broadcastToColor(\"Can't find skill tracker.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- calculate static boosts\r\n  local currentStats = skillTracker.getTable(\"stats\")\r\n\r\n  local currentMd    = JSON.decode(currentCard.getGMNotes()) or {}\r\n  local currentDiff  = {}\r\n\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    currentDiff[i] = currentStats[i] - (currentMd[skill .. \"Icons\"] or 0)\r\n  end\r\n\r\n  -- calculate new stat line\r\n  local otherMd  = JSON.decode(otherCard.getGMNotes()) or {}\r\n  local newStats = {}\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    newStats[i] = currentDiff[i] + (otherMd[skill .. \"Icons\"] or 0)\r\n  end\r\n  Wait.time(function() skillTracker.call(\"updateStats\", newStats) end, 0.25)\r\n\r\n  -- instruct mat to not touch regular action tokens\r\n  PlayermatApi.activateTransformEffect(matColor)\r\n\r\n  -- swap both cards in place\r\n  local currentPos = currentCard.getPosition() + Vector(0, 0.03, 0)\r\n  local currentRot = currentCard.getRotation()\r\n\r\n  local otherPos   = otherCard.getPosition()\r\n  local otherRot   = otherCard.getRotation()\r\n\r\n  currentCard.setPosition(otherPos)\r\n  currentCard.setRotation(otherRot)\r\n\r\n  otherCard.setPosition(currentPos)\r\n  otherCard.setRotation(currentRot)\r\n\r\n  self.flip()\r\nend\r\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"IAmTransformed\")\nend)\n__bundle_register(\"core/GUIDReferenceApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local GUIDReferenceApi = {}\n\n  local function callhandler(functionName, argument)\n    return getObjectFromGUID(\"123456\").call(functionName, argument)\n  end\n\n  -- General information:\n  --- \"owner\" is a string that describes the parent object\n  --- \"type\" is a string that describes the type of object\n\n  -- Returns the matching object\n  function GUIDReferenceApi.getObjectByOwnerAndType(owner, type)\n    return callhandler(\"getObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByType(type)\n    return callhandler(\"getObjectsByType\", type)\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByOwner(owner)\n    return callhandler(\"getObjectsByOwner\", owner)\n  end\n\n  -- Sends new information to the reference handler to edit the main index (if type/guid are omitted, entry will be removed)\n  function GUIDReferenceApi.editIndex(owner, type, guid)\n    return callhandler(\"editIndex\", { owner = owner, type = type, guid = guid })\n  end\n\n  -- Returns the owner of an object or the object it's located on\n  function GUIDReferenceApi.getOwnerOfObject(object)\n    return callhandler(\"getOwnerOfObject\", object)\n  end\n\n  function GUIDReferenceApi.removeObjectByOwnerAndType(owner, type)\n    return callhandler(\"removeObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  return GUIDReferenceApi\nend\nend)\n__bundle_register(\"playercards/CardsWithHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)\n--[[ Library for cards that have helpers\nThis file is used to share code between cards with helpers.\nIt syncs the visibility of the helper with the option panel and\nmakes sure the card has the respective tag.\nAdditionally, it will call 'initialize()' and 'shutOff()'\nin the parent file if they are present.\n\nInstructions:\n1) Define the global variables before requiring this file:\nhasXML          = true  (whether the card has an XML display)\nisHelperEnabled = false (default state of the helper, should be 'false')\n\n2) Add \"CardWithHelper\" tag to .json for the card object itself.\n\n3) Add `if isHelperEnabled then updateDisplay() end` to onLoad()\n\n----------------------------------------------------------]]\n\n-- forces a new state\nfunction setHelperState(newState)\n  if doNotTurnOff == true then return end\n  isHelperEnabled = newState\n  updateSave()\n  updateDisplay()\nend\n\n-- toggles the current state\nfunction toggleHelper(manual)\n  if manual and isHelperEnabled == true then -- do not allow helper to be forced to turn on\n    doNotTurnOff = true\n  elseif manual and isHelperEnabled == false then -- return to default behavior\n    doNotTurnOff = false\n  end\n  isHelperEnabled = not isHelperEnabled\n  updateSave()\n  updateDisplay()\nend\n\n-- updates the visibility and calls events (after a small delay to allow XML being set)\nfunction updateDisplay()\n  Wait.frames(actualDisplayUpdate, 5)\nend\n\nfunction actualDisplayUpdate()\n  if isHelperEnabled then\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Disable Helper\", toggleHelper)\n    if hasXML then self.UI.show(\"Helper\") end\n    if initialize then initialize() end\n  else\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Enable Helper\", toggleHelper)\n    if hasXML then self.UI.hide(\"Helper\") end\n    if shutOff then shutOff() end\n  end\n  if generateContextMenu then generateContextMenu() end\nend\n\nfunction onPickUp()\n  setHelperState(false)\nend\nend)\n__bundle_register(\"playermat/PlayermatApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local PlayermatApi              = {}\n  local GUIDReferenceApi          = require(\"core/GUIDReferenceApi\")\n  local SearchLib                 = require(\"util/SearchLib\")\n  local localInvestigatorPosition = Vector(-1.17, 1, -0.01)\n\n  -- General notes:\n  -------------------------------------------------------------------\n  -- \"matColor\" is a string that describes the internal \"color\" of each mat\n  -- (the starting color when the game is first loaded)\n  -- Some functions will support the additional \"All\" pseudo-color to trigger that code for each mat\n  -- If a function does not support \"All\", there will be a comment\n  -------------------------------------------------------------------\n  -- \"playerColor\" (or \"handColor\") is a string that describes the actual color of the seat\n  -------------------------------------------------------------------\n\n  -- Convenience function to look up a mat's object by color, or get all mats\n  local function getMatForColor(matColor)\n    if matColor == \"All\" then\n      return GUIDReferenceApi.getObjectsByType(\"Playermat\") or {}\n    else\n      return { matColor = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"Playermat\") }\n    end\n  end\n\n  -- Convenience function to call a function on a single mat\n  ---@param matColor string Does not support \"All\"\n  ---@param funcName string Name of the function to call\n  ---@param params any Parameter for the call\n  local function callForSingleMat(matColor, funcName, params)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.call(funcName, params)\n    end\n  end\n\n  -- Returns the color of the closest playermat\n  ---@param startPos table Starting position to get the closest mat from\n  function PlayermatApi.getMatColorByPosition(startPos)\n    local result, smallestDistance\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local distance = Vector.between(startPos, mat.getPosition()):magnitude()\n      if smallestDistance == nil or distance < smallestDistance then\n        smallestDistance = distance\n        result = matColor\n      end\n    end\n    return result\n  end\n\n  -- Returns the color of the player's hand that is seated next to the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getPlayerColor(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getVar(\"playerColor\")\n    end\n  end\n\n  -- Returns the color of the playermat that owns the playercolor's hand\n  ---@param handColor string Color of the playermat\n  function PlayermatApi.getMatColor(handColor)\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      if mat.getVar(\"playerColor\") == handColor then\n        return matColor\n      end\n    end\n  end\n\n  -- Gets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getSlotData(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getTable(\"slotData\")\n    end\n  end\n\n  -- Sets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  ---@param newSlotData table New slot data for the playermat\n  function PlayermatApi.loadSlotData(matColor, newSlotData)\n    return callForSingleMat(matColor, \"updateSlotSymbols\", newSlotData)\n  end\n\n  -- Performs a search of the deck area of the requested playermat and returns the result as table\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDeckAreaObjects(matColor)\n    return callForSingleMat(matColor, \"getDeckAreaObjects\")\n  end\n\n  -- Flips the top card of the deck (useful after deck manipulation for Norman Withers)\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.flipTopCardFromDeck(matColor)\n    return callForSingleMat(matColor, \"flipTopCardFromDeck\")\n  end\n\n  -- Returns the position of the discard pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDiscardPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDiscardPosition\"))\n  end\n\n  -- Returns the position of the draw pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDrawPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDrawPosition\"))\n  end\n\n  -- Transforms a local position into a global position\n  ---@param localPos table Local position to be transformed\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.transformLocalPosition(localPos, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.positionToWorld(localPos)\n    end\n  end\n\n  -- Returns the rotation of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.returnRotation(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getRotation()\n    end\n  end\n\n  -- Returns a table with spawn data (position and rotation) for a helper object\n  ---@param helperName string Name of the helper object\n  function PlayermatApi.getHelperSpawnData(matColor, helperName)\n    local resultTable = {}\n    for color, mat in pairs(getMatForColor(matColor)) do\n      local data = mat.call(\"getHelperSpawnData\", helperName)\n      resultTable[color] = { position = Vector(data.position), rotation = Vector(data.rotation) }\n    end\n    return resultTable\n  end\n\n  -- Triggers the Upkeep for the requested playermat\n  ---@param playerColor string Color of the calling player (for messages)\n  function PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"doUpkeepFromHotkey\", playerColor)\n    end\n  end\n\n  -- Handles discarding for the requested playermat for the provided list of objects\n  ---@param matColor string Does not support \"All\"\n  ---@param objList table List of objects to discard\n  function PlayermatApi.discardListOfObjects(matColor, objList)\n    return callForSingleMat(matColor, \"discardListOfObjects\", objList)\n  end\n\n  -- Gets data about the active investigator\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getActiveInvestigatorData(matColor)\n    return callForSingleMat(matColor, \"getActiveInvestigatorData\")\n  end\n\n  -- Sets data about the active investigator\n  ---@param newData table New active investigator data (class and id)\n  function PlayermatApi.setActiveInvestigatorData(matColor, newData)\n    return callForSingleMat(matColor, \"setActiveInvestigatorData\", newData)\n  end\n\n  -- Returns the position for encounter card drawing\n  ---@param matColor string Does not support \"All\"\n  ---@param stack boolean If true, returns the leftmost position instead of the first empty from the right\n  function PlayermatApi.getEncounterCardDrawPosition(matColor, stack)\n    return Vector(callForSingleMat(matColor, \"getEncounterCardDrawPosition\", stack))\n  end\n\n  -- Sets the requested playermat's snap points to limit snapping to matching card types or not\n  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types\n  function PlayermatApi.setLimitSnapsByType(matchCardTypes, matColor)\n    return callForSingleMat(matColor, \"setLimitSnapsByType\", matchCardTypes)\n  end\n\n  -- Sets the requested playermat's draw 1 button to visible\n  ---@param isDrawButtonVisible boolean Whether the draw 1 button should be visible or not\n  function PlayermatApi.showDrawButton(isDrawButtonVisible, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"showDrawButton\", isDrawButtonVisible)\n    end\n  end\n\n  -- Updates clue counts to account for clickable clue counters\n  ---@param showCounter boolean Whether the clickable counter should be present or not\n  function PlayermatApi.clickableClues(showCounter, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"clickableClues\", showCounter)\n    end\n  end\n\n  -- Toggles the use of class textures for the requested playermat\n  ---@param state boolean Whether the class texture should be used or not\n  function PlayermatApi.useClassTexture(state, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"useClassTexture\", state)\n    end\n  end\n\n  -- updates the texture of the playermat\n  ---@param overrideName? string Force a specific texture\n  function PlayermatApi.updateTexture(matColor, overrideName)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateTexture\", overrideName)\n    end\n  end\n\n  -- Removes all clues (to the trash for tokens and counters set to 0) for the requested playermat\n  function PlayermatApi.removeClues(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"removeClues\")\n    end\n  end\n\n  -- Reports the clue count for the requested playermat\n  function PlayermatApi.getClueCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getClueCount\") or 0)\n    end\n    return count\n  end\n\n  -- Reports the doom count for the requested playermat\n  function PlayermatApi.getDoomCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getDoomCount\") or 0)\n    end\n    return count\n  end\n\n  -- Updates the specified owned counter\n  ---@param type string Counter to target\n  ---@param newValue number Value to set the counter to\n  ---@param modifier number If newValue is not provided, the existing value will be adjusted by this modifier\n  function PlayermatApi.updateCounter(matColor, type, newValue, modifier)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateCounter\", { type = type, newValue = newValue, modifier = modifier })\n    end\n  end\n\n  -- Triggers the draw function for the specified playermat\n  ---@param number number Amount of cards to draw\n  function PlayermatApi.drawCardsWithReshuffle(matColor, number)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"drawCardsWithReshuffle\", number)\n    end\n  end\n\n  -- Returns the resource counter amount\n  ---@param matColor string Does not support \"All\"\n  ---@param type string Counter to target\n  function PlayermatApi.getCounterValue(matColor, type)\n    return callForSingleMat(matColor, \"getCounterValue\", type)\n  end\n\n  -- Returns a list of mat colors that have an investigator placed\n  function PlayermatApi.getUsedMatColors()\n    local usedColors = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        table.insert(usedColors, matColor)\n      end\n    end\n    return usedColors\n  end\n\n  -- Returns a list of investigator card objects\n  function PlayermatApi.getUsedInvestigatorCards()\n    local usedCards = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        usedCards[matColor] = searchResult[1]\n      end\n    end\n    return usedCards\n  end\n\n  -- Returns investigator name\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getInvestigatorName(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult == 1 then\n        return searchResult[1].getName()\n      end\n    end\n    return \"\"\n  end\n\n  -- Resets the specified skill tracker to \"1, 1, 1, 1\"\n  function PlayermatApi.resetSkillTracker(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"resetSkillTracker\")\n    end\n  end\n\n  -- Finds all objects on the playermat and associated set aside zone and returns a table\n  ---@param filter? string Name of the filte function (see util/SearchLib)\n  function PlayermatApi.searchAroundPlayermat(matColor, filter)\n    local objList = {}\n    for _, mat in pairs(getMatForColor(matColor)) do\n      for _, obj in ipairs(mat.call(\"searchAroundSelf\", filter)) do\n        table.insert(objList, obj)\n      end\n    end\n    return objList\n  end\n\n  -- Spawns the regular action tokens\n  function PlayermatApi.spawnActionTokens(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"spawnActionTokens\")\n    end\n  end\n\n  -- Triggers the metadata sync for all playermats\n  function PlayermatApi.syncAllCustomizableCards()\n    for _, mat in pairs(getMatForColor(\"All\")) do\n      mat.call(\"syncAllCustomizableCards\")\n    end\n  end\n\n  -- Gets the value of the \"Use Resource Counters\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getResourceCounterOption(matColor)\n    return callForSingleMat(matColor, \"getResourceCounterOption\")\n  end\n\n  -- Gets the value of the \"Show Token Splash\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getTokenSplashOption(matColor)\n    return callForSingleMat(matColor, \"getTokenSplashOption\")\n  end\n\n  -- Gets the exhaust rotation that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  ---@param convertToGlobal? boolean True if the global (Vector) rotation is requested (otherwise just local Y-rotation)\n  function PlayermatApi.getExhaustRotation(matColor, convertToGlobal)\n    return callForSingleMat(matColor, \"getExhaustRotation\", convertToGlobal)\n  end\n\n  -- moves + rotates a playermat (and related objects)\n  ---@param position? table New position for the playermat\n  ---@param rotationY? number New y-rotation for the playermat (X and Z will be 0)\n  ---@param positionOffset? table Positional offset for the playermat\n  function PlayermatApi.moveAndRotate(matColor, position, rotationY, positionOffset)\n    local params = { position = position, rotationY = rotationY, positionOffset = positionOffset }\n    return callForSingleMat(matColor, \"moveAndRotateSelf\", params)\n  end\n\n  -- Instructs the playermat to not touch the regular action tokens for the next investigator change\n  function PlayermatApi.activateTransformEffect(matColor)\n    return callForSingleMat(matColor, \"activateTransformEffect\")\n  end\n\n  return PlayermatApi\nend\nend)\n__bundle_register(\"util/SearchLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local SearchLib = {}\n  local FILTER_FUNCTIONS = {\n    isCard           = function(x) return x.type == \"Card\" end,\n    isDeck           = function(x) return x.type == \"Deck\" end,\n    isCardOrDeck     = function(x) return x.type == \"Card\" or x.type == \"Deck\" end,\n    isClue           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == false end,\n    isDoom           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == true end,\n    isInteractable   = function(x) return x.interactable end,\n    isTileOrToken    = function(x) return not x.Book and (x.type == \"Tile\" or x.type == \"Generic\") end,\n    isUniversalToken = function(x) return x.getMemo() == \"universalActionAbility\" end,\n  }\n\n  -- performs the actual search and returns a filtered list of object references\n  ---@param pos tts__Vector Global position\n  ---@param rot? tts__Vector Global rotation\n  ---@param size table Size\n  ---@param filter? string Name of the filter function\n  ---@param direction? table Direction (positive is up)\n  ---@param maxDistance? number Distance for the cast\n  ---@param debug? boolean Whether the debug boxes should be shown\n  local function returnSearchResult(pos, rot, size, filter, direction, maxDistance, debug)\n    local filterFunc = filter and FILTER_FUNCTIONS[filter]\n    local searchResult = Physics.cast({\n      origin       = pos,\n      direction    = direction or { 0, 1, 0 },\n      orientation  = rot or { 0, 0, 0 },\n      type         = 3,\n      size         = size,\n      max_distance = maxDistance or 0,\n      debug        = debug or false\n    })\n\n    -- filter the result for matching objects\n    local objList = {}\n    for _, v in ipairs(searchResult) do\n      if (not filter or filterFunc(v.hit_object)) then\n        table.insert(objList, v.hit_object)\n      end\n    end\n    return objList\n  end\n\n  -- searches the specified area\n  function SearchLib.inArea(pos, rot, size, filter, debug)\n    return returnSearchResult(pos, rot, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area on an object\n  function SearchLib.onObject(obj, filter, scale, debug)\n    scale      = scale or 1\n    local pos  = obj.getPosition() + Vector(0, 1, 0) -- offset by half the cast's height\n    local size = obj.getBounds().size:scale(scale):setAt(\"y\", 2)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area directly below an object\n  function SearchLib.belowObject(obj, filter, scale, debug)\n    scale        = scale or 1\n    local objPos = obj.getPosition()\n    local pos    = objPos + Vector(0, -objPos.y / 2, 0) -- offset by half the cast's height\n    local size   = obj.getBounds().size:scale(scale):setAt(\"y\", objPos.y)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the specified position (a single point)\n  function SearchLib.atPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches below the specified position (downwards until y = 0)\n  function SearchLib.belowPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    local direction = { 0, -1, 0 }\n    local maxDistance = pos.y\n    return returnSearchResult(pos, nil, size, filter, direction, maxDistance, debug)\n  end\n\n  return SearchLib\nend\nend)\n__bundle_register(\"util/TableLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local TableLib = {}\n\n  -- Checks if a list contains an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.contains(t, ele)\n    if t == nil then return false end\n    for k, v in ipairs(t) do\n      if v == ele then return true end\n    end\n    return false\n  end\n\n  -- Copies a table (or returns the original if not a table)\n  ---@param t table\n  function TableLib.copy(t)\n    if type(t) ~= \"table\" then return t end\n    local copy = {}\n    for tKey, tValue in next, t, nil do\n      copy[TableLib.copy(tKey)] = TableLib.copy(tValue)\n    end\n    setmetatable(copy, TableLib.copy(getmetatable(t)))\n    return copy\n  end\n\n  -- Returns the index of an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.getElementIndex(t, ele)\n    if t == nil then return nil end\n    for k, v in ipairs(t) do\n      if v == ele then return k end\n    end\n    return nil\n  end\n\n  -- Returns the keys of a table as new table\n  ---@param t table\n  ---@param filterValue? any Only keys with this value will be extracted\n  function TableLib.getKeys(t, filterValue)\n    local keys = {}\n    for k, v in pairs(t) do\n      if filterValue ~= nil then\n        if v == filterValue then\n          table.insert(keys, k)\n        end\n      else\n        table.insert(keys, k)\n      end\n    end\n    return keys\n  end\n\n  -- Returns a random list element\n  ---@param t table\n  function TableLib.pickRandom(t)\n    return t[math.random(#t)]\n  end\n\n  -- Returns a reversed list\n  ---@param t table\n  function TableLib.reverse(t)\n    local r = {}\n    for i = #t, 1, -1 do\n      table.insert(r, t[i])\n    end\n    return r\n  end\n\n  -- Shuffles a list in place (Fisher-Yates-Shuffle)\n  ---@param t table\n  function TableLib.shuffle(t)\n    local n = #t\n    while n > 1 do\n      local k = math.random(n)\n      t[n], t[k] = t[k], t[n]\n      n = n - 1\n    end\n    return t\n  end\n\n  -- Returns a copy of a list without duplicates\n  ---@param t table\n  function TableLib.removeDuplicates(t)\n    local seen = {}\n    local result = {}\n    for _, value in ipairs(t) do\n      if not seen[value] then\n        seen[value] = true\n        table.insert(result, value)\n      end\n    end\n    return result\n  end\n\n  return TableLib\nend\nend)\nreturn __bundle_require(\"__root\")"
        }
      ]
    },
    {
      "GUID": "dbf06d",
      "Name": "Deck",
      "Transform": {
        "posX": 41.2839737,
        "posY": 1.52649987,
        "posZ": 78.16405,
        "rotX": 9.37683353e-09,
        "rotY": 269.9995,
        "rotZ": 5.00128365e-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Tags": [
        "PlayerCard"
      ],
      "Hands": false,
      "DeckIDs": [
        100600,
        100700,
        100800,
        100500,
        100400
      ],
      "CustomDeck": {
        "1006": {
          "FaceURL": "https://www.dropbox.com/scl/fi/1zkjzibeevseil3vhjcr7/ad5530de-ca1a-42ec-8c36-23e72ecd173b-Front-Who-Are-You-1-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=4xw4lczsllrjcti50m2vewq46&raw=1&cachebust=1752500647442",
          "BackURL": "https://www.dropbox.com/scl/fi/7m5nniz5tivnionlmneso/ad5530de-ca1a-42ec-8c36-23e72ecd173b-Back-Silverbolt-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=adoqds0uoux76be2f2a0wlgbo&raw=1&cachebust=1752500650311",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1007": {
          "FaceURL": "https://www.dropbox.com/scl/fi/bbaoojwzz33jmazxcwsmj/538a1ddf-d393-44be-ac59-a6cc60595345-Front-Who-Are-You-2-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=im70hbg3fj8ml8vcuhl18gjll&raw=1&cachebust=1752500672859",
          "BackURL": "https://www.dropbox.com/scl/fi/mknh1de8595cda8shrf3w/538a1ddf-d393-44be-ac59-a6cc60595345-Back-Thrust-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=43g126oazvr8r0r5j4g56goly&raw=1&cachebust=1752500675710",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1008": {
          "FaceURL": "https://www.dropbox.com/scl/fi/v91h22w7zgg6ddtz191z6/03e8f711-ff15-49ed-9cdc-57551463cf5f-Front-Who-Are-You-3-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=e3il9ooz1reinjkjzizqhss1j&raw=1&cachebust=1752500642265",
          "BackURL": "https://www.dropbox.com/scl/fi/vjw3nfkwps9ack70oyg1q/03e8f711-ff15-49ed-9cdc-57551463cf5f-Back-Tankor-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=rrqlswyk7vrjr8laglnzhnjtg&raw=1&cachebust=1752500646126",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1005": {
          "FaceURL": "https://www.dropbox.com/scl/fi/5ax90mbazguqdiq754sko/fcf9e7bb-a73e-4a3b-ae6d-37790f811054-Front-Silverbolt-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=3u61eupo0rruqlsp3tjdwt7u6&raw=1&cachebust=1752199309885",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1004": {
          "FaceURL": "https://www.dropbox.com/scl/fi/mmlkyb40syhjp2wzn2ibv/8665d004-afd6-4950-adf3-59408c7fa7a8-Front-I-Am-Transformed-Blackarachnia-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=j7jk5p57cswbq771euyaia0u5&raw=1&cachebust=1752359210550",
          "BackURL": "https://www.dropbox.com/scl/fi/atd20jikwh6enlfsxyqwz/8665d004-afd6-4950-adf3-59408c7fa7a8-Back-I-Am-Transformed-Blackarachnia-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=aqpimjghg6zahyrudm608z28l&raw=1&cachebust=1752359212594",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      },
      "ContainedObjects": [
        {
          "GUID": "e0000b",
          "Name": "Card",
          "Transform": {
            "posX": 39.7775764,
            "posY": 3.45971012,
            "posZ": 72.98269,
            "rotX": -8.758219e-08,
            "rotY": 270.0,
            "rotZ": 7.00681753e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "\"Who Are You?\"",
          "GMNotes": "{\"TtsZoopGuid\":\"ad5530de-ca1a-42ec-8c36-23e72ecd173b\",\"id\":\"ad5530de-ca1a-42ec-8c36-23e72ecd173b\",\"type\":\"Treachery\",\"traits\":\"Madness.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 100600,
          "CustomDeck": {
            "1006": {
              "FaceURL": "https://www.dropbox.com/scl/fi/1zkjzibeevseil3vhjcr7/ad5530de-ca1a-42ec-8c36-23e72ecd173b-Front-Who-Are-You-1-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=4xw4lczsllrjcti50m2vewq46&raw=1&cachebust=1752500647442",
              "BackURL": "https://www.dropbox.com/scl/fi/7m5nniz5tivnionlmneso/ad5530de-ca1a-42ec-8c36-23e72ecd173b-Back-Silverbolt-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=adoqds0uoux76be2f2a0wlgbo&raw=1&cachebust=1752500650311",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000c",
          "Name": "Card",
          "Transform": {
            "posX": 39.7775764,
            "posY": 3.45971012,
            "posZ": 75.28269,
            "rotX": -8.758219e-08,
            "rotY": 270.0,
            "rotZ": 7.00681753e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "\"Who Are You?\"",
          "GMNotes": "{\"TtsZoopGuid\":\"538a1ddf-d393-44be-ac59-a6cc60595345\",\"id\":\"538a1ddf-d393-44be-ac59-a6cc60595345\",\"type\":\"Treachery\",\"traits\":\"Madness.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 100700,
          "CustomDeck": {
            "1007": {
              "FaceURL": "https://www.dropbox.com/scl/fi/bbaoojwzz33jmazxcwsmj/538a1ddf-d393-44be-ac59-a6cc60595345-Front-Who-Are-You-2-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=im70hbg3fj8ml8vcuhl18gjll&raw=1&cachebust=1752500672859",
              "BackURL": "https://www.dropbox.com/scl/fi/mknh1de8595cda8shrf3w/538a1ddf-d393-44be-ac59-a6cc60595345-Back-Thrust-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=43g126oazvr8r0r5j4g56goly&raw=1&cachebust=1752500675710",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000d",
          "Name": "Card",
          "Transform": {
            "posX": 39.7775764,
            "posY": 3.45971012,
            "posZ": 77.58269,
            "rotX": -8.758219e-08,
            "rotY": 270.0,
            "rotZ": 7.00681753e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "\"Who Are You?\"",
          "GMNotes": "{\"TtsZoopGuid\":\"03e8f711-ff15-49ed-9cdc-57551463cf5f\",\"id\":\"03e8f711-ff15-49ed-9cdc-57551463cf5f\",\"type\":\"Treachery\",\"traits\":\"Madness.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 100800,
          "CustomDeck": {
            "1008": {
              "FaceURL": "https://www.dropbox.com/scl/fi/v91h22w7zgg6ddtz191z6/03e8f711-ff15-49ed-9cdc-57551463cf5f-Front-Who-Are-You-3-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=e3il9ooz1reinjkjzizqhss1j&raw=1&cachebust=1752500642265",
              "BackURL": "https://www.dropbox.com/scl/fi/vjw3nfkwps9ack70oyg1q/03e8f711-ff15-49ed-9cdc-57551463cf5f-Back-Tankor-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=rrqlswyk7vrjr8laglnzhnjtg&raw=1&cachebust=1752500646126",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000a",
          "Name": "Card",
          "Transform": {
            "posX": 0.0,
            "posY": 0.0,
            "posZ": 0.0,
            "rotX": 0.0,
            "rotY": 270.0,
            "rotZ": 0.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "\"Silverbolt?\"",
          "GMNotes": "{\"TtsZoopGuid\":\"fcf9e7bb-a73e-4a3b-ae6d-37790f811054\",\"id\":\"fcf9e7bb-a73e-4a3b-ae6d-37790f811054\",\"type\":\"Treachery\",\"traits\":\"Madness.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 100500,
          "CustomDeck": {
            "1005": {
              "FaceURL": "https://www.dropbox.com/scl/fi/5ax90mbazguqdiq754sko/fcf9e7bb-a73e-4a3b-ae6d-37790f811054-Front-Silverbolt-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=3u61eupo0rruqlsp3tjdwt7u6&raw=1&cachebust=1752199309885",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "08f7ba",
          "Name": "Card",
          "Transform": {
            "posX": 40.96562,
            "posY": 1.598252,
            "posZ": 77.62582,
            "rotX": 8.971966e-05,
            "rotY": 269.999542,
            "rotZ": -0.0005716538,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "I Am Transformed",
          "Description": "Beast Mode",
          "GMNotes": "{\"TtsZoopGuid\":\"8665d004-afd6-4950-adf3-59408c7fa7a8\",\"id\":\"8665d004-afd6-4950-adf3-59408c7fa7a8\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"permanent\":true,\"startsInPlay\":true}",
          "Tags": [
            "Asset",
            "CardWithHelper",
            "PlayerCard"
          ],
          "HideWhenFaceDown": false,
          "CardID": 100400,
          "CustomDeck": {
            "1004": {
              "FaceURL": "https://www.dropbox.com/scl/fi/mmlkyb40syhjp2wzn2ibv/8665d004-afd6-4950-adf3-59408c7fa7a8-Front-I-Am-Transformed-Blackarachnia-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=j7jk5p57cswbq771euyaia0u5&raw=1&cachebust=1752359210550",
              "BackURL": "https://www.dropbox.com/scl/fi/atd20jikwh6enlfsxyqwz/8665d004-afd6-4950-adf3-59408c7fa7a8-Back-I-Am-Transformed-Blackarachnia-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=aqpimjghg6zahyrudm608z28l&raw=1&cachebust=1752359212594",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"IAmTransformed\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"playercards/CardsWithHelper\")\r\nlocal GUIDReferenceApi = require(\"core/GUIDReferenceApi\")\r\nlocal PlayermatApi     = require(\"playermat/PlayermatApi\")\r\nlocal TableLib         = require(\"util/TableLib\")\r\n\r\n-- intentionally global\r\nhasXML                 = true\r\nisHelperEnabled        = false\r\n\r\nfunction updateSave()\r\n  self.script_state = JSON.encode({ isHelperEnabled = isHelperEnabled })\r\nend\r\n\r\nfunction onLoad(savedData)\r\n  if savedData and savedData ~= \"\" then\r\n    local loadedData = JSON.decode(savedData)\r\n    isHelperEnabled = loadedData.isHelperEnabled\r\n  end\r\n  self.addTag(\"CardWithHelper\")\r\n  generateXml()\r\nend\r\n\r\nfunction generateXml()\r\n  local xml = {}\r\n\r\n  local mainPanel = {\r\n    tag        = \"Panel\",\r\n    attributes = { id = \"Helper\", active = isHelperEnabled },\r\n    children   = {}\r\n  }\r\n\r\n  local buttonXml = {\r\n    tag = \"Button\",\r\n    attributes = {\r\n      color        = \"#C0C0C080\",\r\n      height       = 550,\r\n      width        = 1200,\r\n      rotation     = \"0 0 180\",\r\n      scale        = \"0.1 0.1 1\",\r\n      position     = \"0 -25 -40\",\r\n      ignoreLayout = true,\r\n      padding      = \"50 50 50 50\",\r\n      onClick      = \"transform\",\r\n      text         = \"Transform\",\r\n      textColor    = \"Black\",\r\n      font         = \"font_teutonic-arkham\",\r\n      fontSize     = 200\r\n    }\r\n  }\r\n\r\n  table.insert(mainPanel.children, buttonXml)\r\n\r\n  local reverseButtonXml = TableLib.copy(buttonXml)\r\n  reverseButtonXml.attributes.position = \"0 -25 40\"\r\n  reverseButtonXml.attributes.rotation = \"0 180 180\"\r\n  table.insert(mainPanel.children, reverseButtonXml)\r\n\r\n  table.insert(xml, mainPanel)\r\n  self.UI.setXmlTable(xml)\r\nend\r\n\r\nfunction transform(player)\r\n  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())\r\n\r\n  -- look for current investigator\r\n  local invCards = PlayermatApi.getUsedInvestigatorCards()\r\n  local currentCard = invCards[matColor]\r\n  if not currentCard then\r\n    broadcastToColor(\"Can't find current investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- look for other investigator\r\n  local otherCard\r\n  for _, card in ipairs(PlayermatApi.searchAroundPlayermat(matColor, \"isCard\")) do\r\n    if card.hasTag(\"Investigator\") and card ~= currentCard then\r\n      otherCard = card\r\n      break\r\n    end\r\n  end\r\n  if not otherCard then\r\n    broadcastToColor(\"Can't find other investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- get current stat line\r\n  local skillTracker = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"InvestigatorSkillTracker\")\r\n  if not skillTracker then\r\n    broadcastToColor(\"Can't find skill tracker.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- calculate static boosts\r\n  local currentStats = skillTracker.getTable(\"stats\")\r\n\r\n  local currentMd    = JSON.decode(currentCard.getGMNotes()) or {}\r\n  local currentDiff  = {}\r\n\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    currentDiff[i] = currentStats[i] - (currentMd[skill .. \"Icons\"] or 0)\r\n  end\r\n\r\n  -- calculate new stat line\r\n  local otherMd  = JSON.decode(otherCard.getGMNotes()) or {}\r\n  local newStats = {}\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    newStats[i] = currentDiff[i] + (otherMd[skill .. \"Icons\"] or 0)\r\n  end\r\n  Wait.time(function() skillTracker.call(\"updateStats\", newStats) end, 0.25)\r\n\r\n  -- instruct mat to not touch regular action tokens\r\n  PlayermatApi.activateTransformEffect(matColor)\r\n\r\n  -- swap both cards in place\r\n  local currentPos = currentCard.getPosition() + Vector(0, 0.03, 0)\r\n  local currentRot = currentCard.getRotation()\r\n\r\n  local otherPos   = otherCard.getPosition()\r\n  local otherRot   = otherCard.getRotation()\r\n\r\n  currentCard.setPosition(otherPos)\r\n  currentCard.setRotation(otherRot)\r\n\r\n  otherCard.setPosition(currentPos)\r\n  otherCard.setRotation(currentRot)\r\n\r\n  self.flip()\r\nend\r\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"IAmTransformed\")\nend)\n__bundle_register(\"core/GUIDReferenceApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local GUIDReferenceApi = {}\n\n  local function callhandler(functionName, argument)\n    return getObjectFromGUID(\"123456\").call(functionName, argument)\n  end\n\n  -- General information:\n  --- \"owner\" is a string that describes the parent object\n  --- \"type\" is a string that describes the type of object\n\n  -- Returns the matching object\n  function GUIDReferenceApi.getObjectByOwnerAndType(owner, type)\n    return callhandler(\"getObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByType(type)\n    return callhandler(\"getObjectsByType\", type)\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByOwner(owner)\n    return callhandler(\"getObjectsByOwner\", owner)\n  end\n\n  -- Sends new information to the reference handler to edit the main index (if type/guid are omitted, entry will be removed)\n  function GUIDReferenceApi.editIndex(owner, type, guid)\n    return callhandler(\"editIndex\", { owner = owner, type = type, guid = guid })\n  end\n\n  -- Returns the owner of an object or the object it's located on\n  function GUIDReferenceApi.getOwnerOfObject(object)\n    return callhandler(\"getOwnerOfObject\", object)\n  end\n\n  function GUIDReferenceApi.removeObjectByOwnerAndType(owner, type)\n    return callhandler(\"removeObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  return GUIDReferenceApi\nend\nend)\n__bundle_register(\"playercards/CardsWithHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)\n--[[ Library for cards that have helpers\nThis file is used to share code between cards with helpers.\nIt syncs the visibility of the helper with the option panel and\nmakes sure the card has the respective tag.\nAdditionally, it will call 'initialize()' and 'shutOff()'\nin the parent file if they are present.\n\nInstructions:\n1) Define the global variables before requiring this file:\nhasXML          = true  (whether the card has an XML display)\nisHelperEnabled = false (default state of the helper, should be 'false')\n\n2) Add \"CardWithHelper\" tag to .json for the card object itself.\n\n3) Add `if isHelperEnabled then updateDisplay() end` to onLoad()\n\n----------------------------------------------------------]]\n\n-- forces a new state\nfunction setHelperState(newState)\n  if doNotTurnOff == true then return end\n  isHelperEnabled = newState\n  updateSave()\n  updateDisplay()\nend\n\n-- toggles the current state\nfunction toggleHelper(manual)\n  if manual and isHelperEnabled == true then -- do not allow helper to be forced to turn on\n    doNotTurnOff = true\n  elseif manual and isHelperEnabled == false then -- return to default behavior\n    doNotTurnOff = false\n  end\n  isHelperEnabled = not isHelperEnabled\n  updateSave()\n  updateDisplay()\nend\n\n-- updates the visibility and calls events (after a small delay to allow XML being set)\nfunction updateDisplay()\n  Wait.frames(actualDisplayUpdate, 5)\nend\n\nfunction actualDisplayUpdate()\n  if isHelperEnabled then\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Disable Helper\", toggleHelper)\n    if hasXML then self.UI.show(\"Helper\") end\n    if initialize then initialize() end\n  else\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Enable Helper\", toggleHelper)\n    if hasXML then self.UI.hide(\"Helper\") end\n    if shutOff then shutOff() end\n  end\n  if generateContextMenu then generateContextMenu() end\nend\n\nfunction onPickUp()\n  setHelperState(false)\nend\nend)\n__bundle_register(\"playermat/PlayermatApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local PlayermatApi              = {}\n  local GUIDReferenceApi          = require(\"core/GUIDReferenceApi\")\n  local SearchLib                 = require(\"util/SearchLib\")\n  local localInvestigatorPosition = Vector(-1.17, 1, -0.01)\n\n  -- General notes:\n  -------------------------------------------------------------------\n  -- \"matColor\" is a string that describes the internal \"color\" of each mat\n  -- (the starting color when the game is first loaded)\n  -- Some functions will support the additional \"All\" pseudo-color to trigger that code for each mat\n  -- If a function does not support \"All\", there will be a comment\n  -------------------------------------------------------------------\n  -- \"playerColor\" (or \"handColor\") is a string that describes the actual color of the seat\n  -------------------------------------------------------------------\n\n  -- Convenience function to look up a mat's object by color, or get all mats\n  local function getMatForColor(matColor)\n    if matColor == \"All\" then\n      return GUIDReferenceApi.getObjectsByType(\"Playermat\") or {}\n    else\n      return { matColor = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"Playermat\") }\n    end\n  end\n\n  -- Convenience function to call a function on a single mat\n  ---@param matColor string Does not support \"All\"\n  ---@param funcName string Name of the function to call\n  ---@param params any Parameter for the call\n  local function callForSingleMat(matColor, funcName, params)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.call(funcName, params)\n    end\n  end\n\n  -- Returns the color of the closest playermat\n  ---@param startPos table Starting position to get the closest mat from\n  function PlayermatApi.getMatColorByPosition(startPos)\n    local result, smallestDistance\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local distance = Vector.between(startPos, mat.getPosition()):magnitude()\n      if smallestDistance == nil or distance < smallestDistance then\n        smallestDistance = distance\n        result = matColor\n      end\n    end\n    return result\n  end\n\n  -- Returns the color of the player's hand that is seated next to the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getPlayerColor(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getVar(\"playerColor\")\n    end\n  end\n\n  -- Returns the color of the playermat that owns the playercolor's hand\n  ---@param handColor string Color of the playermat\n  function PlayermatApi.getMatColor(handColor)\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      if mat.getVar(\"playerColor\") == handColor then\n        return matColor\n      end\n    end\n  end\n\n  -- Gets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getSlotData(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getTable(\"slotData\")\n    end\n  end\n\n  -- Sets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  ---@param newSlotData table New slot data for the playermat\n  function PlayermatApi.loadSlotData(matColor, newSlotData)\n    return callForSingleMat(matColor, \"updateSlotSymbols\", newSlotData)\n  end\n\n  -- Performs a search of the deck area of the requested playermat and returns the result as table\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDeckAreaObjects(matColor)\n    return callForSingleMat(matColor, \"getDeckAreaObjects\")\n  end\n\n  -- Flips the top card of the deck (useful after deck manipulation for Norman Withers)\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.flipTopCardFromDeck(matColor)\n    return callForSingleMat(matColor, \"flipTopCardFromDeck\")\n  end\n\n  -- Returns the position of the discard pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDiscardPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDiscardPosition\"))\n  end\n\n  -- Returns the position of the draw pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDrawPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDrawPosition\"))\n  end\n\n  -- Transforms a local position into a global position\n  ---@param localPos table Local position to be transformed\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.transformLocalPosition(localPos, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.positionToWorld(localPos)\n    end\n  end\n\n  -- Returns the rotation of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.returnRotation(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getRotation()\n    end\n  end\n\n  -- Returns a table with spawn data (position and rotation) for a helper object\n  ---@param helperName string Name of the helper object\n  function PlayermatApi.getHelperSpawnData(matColor, helperName)\n    local resultTable = {}\n    for color, mat in pairs(getMatForColor(matColor)) do\n      local data = mat.call(\"getHelperSpawnData\", helperName)\n      resultTable[color] = { position = Vector(data.position), rotation = Vector(data.rotation) }\n    end\n    return resultTable\n  end\n\n  -- Triggers the Upkeep for the requested playermat\n  ---@param playerColor string Color of the calling player (for messages)\n  function PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"doUpkeepFromHotkey\", playerColor)\n    end\n  end\n\n  -- Handles discarding for the requested playermat for the provided list of objects\n  ---@param matColor string Does not support \"All\"\n  ---@param objList table List of objects to discard\n  function PlayermatApi.discardListOfObjects(matColor, objList)\n    return callForSingleMat(matColor, \"discardListOfObjects\", objList)\n  end\n\n  -- Gets data about the active investigator\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getActiveInvestigatorData(matColor)\n    return callForSingleMat(matColor, \"getActiveInvestigatorData\")\n  end\n\n  -- Sets data about the active investigator\n  ---@param newData table New active investigator data (class and id)\n  function PlayermatApi.setActiveInvestigatorData(matColor, newData)\n    return callForSingleMat(matColor, \"setActiveInvestigatorData\", newData)\n  end\n\n  -- Returns the position for encounter card drawing\n  ---@param matColor string Does not support \"All\"\n  ---@param stack boolean If true, returns the leftmost position instead of the first empty from the right\n  function PlayermatApi.getEncounterCardDrawPosition(matColor, stack)\n    return Vector(callForSingleMat(matColor, \"getEncounterCardDrawPosition\", stack))\n  end\n\n  -- Sets the requested playermat's snap points to limit snapping to matching card types or not\n  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types\n  function PlayermatApi.setLimitSnapsByType(matchCardTypes, matColor)\n    return callForSingleMat(matColor, \"setLimitSnapsByType\", matchCardTypes)\n  end\n\n  -- Sets the requested playermat's draw 1 button to visible\n  ---@param isDrawButtonVisible boolean Whether the draw 1 button should be visible or not\n  function PlayermatApi.showDrawButton(isDrawButtonVisible, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"showDrawButton\", isDrawButtonVisible)\n    end\n  end\n\n  -- Updates clue counts to account for clickable clue counters\n  ---@param showCounter boolean Whether the clickable counter should be present or not\n  function PlayermatApi.clickableClues(showCounter, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"clickableClues\", showCounter)\n    end\n  end\n\n  -- Toggles the use of class textures for the requested playermat\n  ---@param state boolean Whether the class texture should be used or not\n  function PlayermatApi.useClassTexture(state, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"useClassTexture\", state)\n    end\n  end\n\n  -- updates the texture of the playermat\n  ---@param overrideName? string Force a specific texture\n  function PlayermatApi.updateTexture(matColor, overrideName)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateTexture\", overrideName)\n    end\n  end\n\n  -- Removes all clues (to the trash for tokens and counters set to 0) for the requested playermat\n  function PlayermatApi.removeClues(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"removeClues\")\n    end\n  end\n\n  -- Reports the clue count for the requested playermat\n  function PlayermatApi.getClueCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getClueCount\") or 0)\n    end\n    return count\n  end\n\n  -- Reports the doom count for the requested playermat\n  function PlayermatApi.getDoomCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getDoomCount\") or 0)\n    end\n    return count\n  end\n\n  -- Updates the specified owned counter\n  ---@param type string Counter to target\n  ---@param newValue number Value to set the counter to\n  ---@param modifier number If newValue is not provided, the existing value will be adjusted by this modifier\n  function PlayermatApi.updateCounter(matColor, type, newValue, modifier)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateCounter\", { type = type, newValue = newValue, modifier = modifier })\n    end\n  end\n\n  -- Triggers the draw function for the specified playermat\n  ---@param number number Amount of cards to draw\n  function PlayermatApi.drawCardsWithReshuffle(matColor, number)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"drawCardsWithReshuffle\", number)\n    end\n  end\n\n  -- Returns the resource counter amount\n  ---@param matColor string Does not support \"All\"\n  ---@param type string Counter to target\n  function PlayermatApi.getCounterValue(matColor, type)\n    return callForSingleMat(matColor, \"getCounterValue\", type)\n  end\n\n  -- Returns a list of mat colors that have an investigator placed\n  function PlayermatApi.getUsedMatColors()\n    local usedColors = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        table.insert(usedColors, matColor)\n      end\n    end\n    return usedColors\n  end\n\n  -- Returns a list of investigator card objects\n  function PlayermatApi.getUsedInvestigatorCards()\n    local usedCards = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        usedCards[matColor] = searchResult[1]\n      end\n    end\n    return usedCards\n  end\n\n  -- Returns investigator name\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getInvestigatorName(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult == 1 then\n        return searchResult[1].getName()\n      end\n    end\n    return \"\"\n  end\n\n  -- Resets the specified skill tracker to \"1, 1, 1, 1\"\n  function PlayermatApi.resetSkillTracker(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"resetSkillTracker\")\n    end\n  end\n\n  -- Finds all objects on the playermat and associated set aside zone and returns a table\n  ---@param filter? string Name of the filte function (see util/SearchLib)\n  function PlayermatApi.searchAroundPlayermat(matColor, filter)\n    local objList = {}\n    for _, mat in pairs(getMatForColor(matColor)) do\n      for _, obj in ipairs(mat.call(\"searchAroundSelf\", filter)) do\n        table.insert(objList, obj)\n      end\n    end\n    return objList\n  end\n\n  -- Spawns the regular action tokens\n  function PlayermatApi.spawnActionTokens(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"spawnActionTokens\")\n    end\n  end\n\n  -- Triggers the metadata sync for all playermats\n  function PlayermatApi.syncAllCustomizableCards()\n    for _, mat in pairs(getMatForColor(\"All\")) do\n      mat.call(\"syncAllCustomizableCards\")\n    end\n  end\n\n  -- Gets the value of the \"Use Resource Counters\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getResourceCounterOption(matColor)\n    return callForSingleMat(matColor, \"getResourceCounterOption\")\n  end\n\n  -- Gets the value of the \"Show Token Splash\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getTokenSplashOption(matColor)\n    return callForSingleMat(matColor, \"getTokenSplashOption\")\n  end\n\n  -- Gets the exhaust rotation that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  ---@param convertToGlobal? boolean True if the global (Vector) rotation is requested (otherwise just local Y-rotation)\n  function PlayermatApi.getExhaustRotation(matColor, convertToGlobal)\n    return callForSingleMat(matColor, \"getExhaustRotation\", convertToGlobal)\n  end\n\n  -- moves + rotates a playermat (and related objects)\n  ---@param position? table New position for the playermat\n  ---@param rotationY? number New y-rotation for the playermat (X and Z will be 0)\n  ---@param positionOffset? table Positional offset for the playermat\n  function PlayermatApi.moveAndRotate(matColor, position, rotationY, positionOffset)\n    local params = { position = position, rotationY = rotationY, positionOffset = positionOffset }\n    return callForSingleMat(matColor, \"moveAndRotateSelf\", params)\n  end\n\n  -- Instructs the playermat to not touch the regular action tokens for the next investigator change\n  function PlayermatApi.activateTransformEffect(matColor)\n    return callForSingleMat(matColor, \"activateTransformEffect\")\n  end\n\n  return PlayermatApi\nend\nend)\n__bundle_register(\"util/SearchLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local SearchLib = {}\n  local FILTER_FUNCTIONS = {\n    isCard           = function(x) return x.type == \"Card\" end,\n    isDeck           = function(x) return x.type == \"Deck\" end,\n    isCardOrDeck     = function(x) return x.type == \"Card\" or x.type == \"Deck\" end,\n    isClue           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == false end,\n    isDoom           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == true end,\n    isInteractable   = function(x) return x.interactable end,\n    isTileOrToken    = function(x) return not x.Book and (x.type == \"Tile\" or x.type == \"Generic\") end,\n    isUniversalToken = function(x) return x.getMemo() == \"universalActionAbility\" end,\n  }\n\n  -- performs the actual search and returns a filtered list of object references\n  ---@param pos tts__Vector Global position\n  ---@param rot? tts__Vector Global rotation\n  ---@param size table Size\n  ---@param filter? string Name of the filter function\n  ---@param direction? table Direction (positive is up)\n  ---@param maxDistance? number Distance for the cast\n  ---@param debug? boolean Whether the debug boxes should be shown\n  local function returnSearchResult(pos, rot, size, filter, direction, maxDistance, debug)\n    local filterFunc = filter and FILTER_FUNCTIONS[filter]\n    local searchResult = Physics.cast({\n      origin       = pos,\n      direction    = direction or { 0, 1, 0 },\n      orientation  = rot or { 0, 0, 0 },\n      type         = 3,\n      size         = size,\n      max_distance = maxDistance or 0,\n      debug        = debug or false\n    })\n\n    -- filter the result for matching objects\n    local objList = {}\n    for _, v in ipairs(searchResult) do\n      if (not filter or filterFunc(v.hit_object)) then\n        table.insert(objList, v.hit_object)\n      end\n    end\n    return objList\n  end\n\n  -- searches the specified area\n  function SearchLib.inArea(pos, rot, size, filter, debug)\n    return returnSearchResult(pos, rot, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area on an object\n  function SearchLib.onObject(obj, filter, scale, debug)\n    scale      = scale or 1\n    local pos  = obj.getPosition() + Vector(0, 1, 0) -- offset by half the cast's height\n    local size = obj.getBounds().size:scale(scale):setAt(\"y\", 2)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area directly below an object\n  function SearchLib.belowObject(obj, filter, scale, debug)\n    scale        = scale or 1\n    local objPos = obj.getPosition()\n    local pos    = objPos + Vector(0, -objPos.y / 2, 0) -- offset by half the cast's height\n    local size   = obj.getBounds().size:scale(scale):setAt(\"y\", objPos.y)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the specified position (a single point)\n  function SearchLib.atPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches below the specified position (downwards until y = 0)\n  function SearchLib.belowPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    local direction = { 0, -1, 0 }\n    local maxDistance = pos.y\n    return returnSearchResult(pos, nil, size, filter, direction, maxDistance, debug)\n  end\n\n  return SearchLib\nend\nend)\n__bundle_register(\"util/TableLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local TableLib = {}\n\n  -- Checks if a list contains an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.contains(t, ele)\n    if t == nil then return false end\n    for k, v in ipairs(t) do\n      if v == ele then return true end\n    end\n    return false\n  end\n\n  -- Copies a table (or returns the original if not a table)\n  ---@param t table\n  function TableLib.copy(t)\n    if type(t) ~= \"table\" then return t end\n    local copy = {}\n    for tKey, tValue in next, t, nil do\n      copy[TableLib.copy(tKey)] = TableLib.copy(tValue)\n    end\n    setmetatable(copy, TableLib.copy(getmetatable(t)))\n    return copy\n  end\n\n  -- Returns the index of an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.getElementIndex(t, ele)\n    if t == nil then return nil end\n    for k, v in ipairs(t) do\n      if v == ele then return k end\n    end\n    return nil\n  end\n\n  -- Returns the keys of a table as new table\n  ---@param t table\n  ---@param filterValue? any Only keys with this value will be extracted\n  function TableLib.getKeys(t, filterValue)\n    local keys = {}\n    for k, v in pairs(t) do\n      if filterValue ~= nil then\n        if v == filterValue then\n          table.insert(keys, k)\n        end\n      else\n        table.insert(keys, k)\n      end\n    end\n    return keys\n  end\n\n  -- Returns a random list element\n  ---@param t table\n  function TableLib.pickRandom(t)\n    return t[math.random(#t)]\n  end\n\n  -- Returns a reversed list\n  ---@param t table\n  function TableLib.reverse(t)\n    local r = {}\n    for i = #t, 1, -1 do\n      table.insert(r, t[i])\n    end\n    return r\n  end\n\n  -- Shuffles a list in place (Fisher-Yates-Shuffle)\n  ---@param t table\n  function TableLib.shuffle(t)\n    local n = #t\n    while n > 1 do\n      local k = math.random(n)\n      t[n], t[k] = t[k], t[n]\n      n = n - 1\n    end\n    return t\n  end\n\n  -- Returns a copy of a list without duplicates\n  ---@param t table\n  function TableLib.removeDuplicates(t)\n    local seen = {}\n    local result = {}\n    for _, value in ipairs(t) do\n      if not seen[value] then\n        seen[value] = true\n        table.insert(result, value)\n      end\n    end\n    return result\n  end\n\n  return TableLib\nend\nend)\nreturn __bundle_require(\"__root\")",
          "LuaScriptState": "{\"isHelperEnabled\":false}"
        }
      ]
    },
    {
      "GUID": "e00003",
      "Name": "Card",
      "Transform": {
        "posX": 44.279,
        "posY": 1.49510384,
        "posZ": 79.943,
        "rotX": -9.08820255e-08,
        "rotY": 270.001648,
        "rotZ": -1.50669123e-07,
        "scaleX": 0.8214,
        "scaleY": 1.0,
        "scaleZ": 0.8214
      },
      "Nickname": "Blackarachnia",
      "Description": "The Spider",
      "GMNotes": "{\n  \"TtsZoopGuid\": \"f920125f-8f00-4e68-b197-fb006f980e02\",\n  \"id\": \"f920125f-8f00-4e68-b197-fb006f980e02\",\n  \"type\": \"Investigator\",\n  \"class\": \"Seeker\",\n  \"traits\": \"Beast. Clairvoyant. Scholar.\",\n  \"agilityIcons\": 3,\n  \"combatIcons\": 2,\n  \"intellectIcons\": 4,\n  \"willpowerIcons\": 3,\n  \"extraToken\": \"Reaction\",\n  \"signatures\": [\n    {\n      \"8665d004-afd6-4950-adf3-59408c7fa7a8\": 1,\n      \"fcf9e7bb-a73e-4a3b-ae6d-37790f811054\": 1\n    }\n  ],\n  \"bonded\": [\n    {\n      \"count\": 1,\n      \"id\": \"34247796-bdb8-4acf-af2a-89cdcc453967\"\n    }\n  ]\n}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 100000,
      "CustomDeck": {
        "1000": {
          "FaceURL": "https://www.dropbox.com/scl/fi/ogq33leiu4razner34rzv/f920125f-8f00-4e68-b197-fb006f980e02-Front-Blackarachnia-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=psb6954hgd79n2huhhr18gimu&raw=1&cachebust=1752500652422",
          "BackURL": "https://www.dropbox.com/scl/fi/ehpaov61fixmxc2nr24a2/f920125f-8f00-4e68-b197-fb006f980e02-Back-Blackarachnia-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=umtcuqyc7eywv5ank0ugcwp6f&raw=1&cachebust=1752500654276",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00004",
      "Name": "Card",
      "Transform": {
        "posX": 44.285,
        "posY": 1.49510384,
        "posZ": 76.375,
        "rotX": -2.5228033e-07,
        "rotY": 269.9999,
        "rotZ": 1.08463212e-07,
        "scaleX": 0.8214,
        "scaleY": 1.0,
        "scaleZ": 0.8214
      },
      "Nickname": "Blackarachnia",
      "Description": "The Specialist",
      "GMNotes": "{\n  \"TtsZoopGuid\": \"34247796-bdb8-4acf-af2a-89cdcc453967\",\n  \"id\": \"34247796-bdb8-4acf-af2a-89cdcc453967\",\n  \"type\": \"Investigator\",\n  \"class\": \"Seeker\",\n  \"traits\": \"Robot. Clairvoyant. Scholar.\",\n  \"agilityIcons\": 3,\n  \"combatIcons\": 2,\n  \"intellectIcons\": 4,\n  \"willpowerIcons\": 3,\n  \"bonded\": [\n    {\n      \"count\": 1,\n      \"id\": \"34247796-bdb8-4acf-af2a-89cdcc453967\"\n    }\n  ]\n}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 100100,
      "CustomDeck": {
        "1001": {
          "FaceURL": "https://www.dropbox.com/scl/fi/bwzi93h2b8my77odugksn/34247796-bdb8-4acf-af2a-89cdcc453967-Front-Blackarachnia-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=l10w2lf6vqn8gzw6uixxe90ht&raw=1&cachebust=1752199295475",
          "BackURL": "https://www.dropbox.com/scl/fi/ki14ooqxe17zpjqaeaxui/34247796-bdb8-4acf-af2a-89cdcc453967-Back-Blackarachnia-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=vl7azvtgydivif7wyjrabalxc&raw=1&cachebust=1752199297690",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00006",
      "Name": "Card",
      "Transform": {
        "posX": 46.462,
        "posY": 1.49510384,
        "posZ": 77.586,
        "rotX": -3.4541614e-07,
        "rotY": 270.0,
        "rotZ": 2.18245972e-07,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Blackarachnia",
      "GMNotes": "{\"TtsZoopGuid\":\"4e1f13a4-7c7e-4e6e-bd3f-4d5def1e6641\",\"id\":\"34247796-bdb8-4acf-af2a-89cdcc453967-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 100200,
      "CustomDeck": {
        "1002": {
          "FaceURL": "https://www.dropbox.com/scl/fi/7ocaw2zhs6di0xbfp1a3m/4e1f13a4-7c7e-4e6e-bd3f-4d5def1e6641-Front-Blackarachnia-mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=82lakcupjxx9limr8nh03p5hc&raw=1&cachebust=1752425910155",
          "BackURL": "https://www.dropbox.com/scl/fi/41541nbdzrnvwcyerb865/4e1f13a4-7c7e-4e6e-bd3f-4d5def1e6641-Back-Blackarachnia-mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=3vqp46rgceseasc5veuaftrxo&raw=1&cachebust=1752425912551",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00007",
      "Name": "Card",
      "Transform": {
        "posX": 46.505,
        "posY": 1.49510384,
        "posZ": 78.809,
        "rotX": -2.207858e-07,
        "rotY": 270.0,
        "rotZ": -3.77734146e-08,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Blackarachnia",
      "GMNotes": "{\"TtsZoopGuid\":\"b80eeb91-0f1f-4f06-abf3-c193a2e7238a\",\"id\":\"f920125f-8f00-4e68-b197-fb006f980e02-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 100300,
      "CustomDeck": {
        "1003": {
          "FaceURL": "https://www.dropbox.com/scl/fi/yws53ta50upyqp2heslsl/b80eeb91-0f1f-4f06-abf3-c193a2e7238a-Front-Blackarachnia-mini-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=yunf1w3bu8mqd9z7umzfmix05&raw=1&cachebust=1752249556504",
          "BackURL": "https://www.dropbox.com/scl/fi/74wabmmqz26ktpx9e556q/b80eeb91-0f1f-4f06-abf3-c193a2e7238a-Back-Blackarachnia-mini-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=x2sbwxpc3bcrjvxaez0ohwpjh&raw=1&cachebust=1752249558203",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00010",
      "Name": "Card",
      "Transform": {
        "posX": 44.454998,
        "posY": 1.49510407,
        "posZ": 50.6230049,
        "rotX": 1.35801793e-06,
        "rotY": 269.998352,
        "rotZ": 8.086617e-06,
        "scaleX": 0.8214286,
        "scaleY": 1.0,
        "scaleZ": 0.8214286
      },
      "Nickname": "Cheetor",
      "Description": "The Cheetah",
      "GMNotes": "{\"TtsZoopGuid\":\"ed31f796-90c8-4e98-8bea-1f161fb761df\",\"id\":\"ed31f796-90c8-4e98-8bea-1f161fb761df\",\"type\":\"Investigator\",\"class\":\"Survivor\",\"traits\":\"Beast. Assistant. Drifter.\",\"agilityIcons\":4,\"combatIcons\":2,\"intellectIcons\":2,\"willpowerIcons\":4,\"extraToken\":\"Reaction\",\"bonded\":[{\"count\":1,\"id\":\"ed31f796-90c8-4e98-8bea-1f161fb761df\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 100900,
      "CustomDeck": {
        "1009": {
          "FaceURL": "https://www.dropbox.com/scl/fi/tnjam4ra4w7vnl3hazsss/ed31f796-90c8-4e98-8bea-1f161fb761df-Front-Cheetor-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=r72g95u97i16y5jhabc1ues0g&raw=1&cachebust=1752500669155",
          "BackURL": "https://www.dropbox.com/scl/fi/2oade9rh73lh455y0dape/ed31f796-90c8-4e98-8bea-1f161fb761df-Back-Cheetor-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=6dnx4el445l30qbwqjddqan3e&raw=1&cachebust=1752500671368",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00011",
      "Name": "Card",
      "Transform": {
        "posX": 44.397,
        "posY": 1.49510384,
        "posZ": 54.224,
        "rotX": -1.92383212e-07,
        "rotY": 270.0,
        "rotZ": 1.05611925e-07,
        "scaleX": 0.8214286,
        "scaleY": 1.0,
        "scaleZ": 0.8214286
      },
      "Nickname": "Cheetor",
      "Description": "The Second",
      "GMNotes": "{\"TtsZoopGuid\":\"ba7e925c-03e3-4337-961a-9c010cc3c0d4\",\"id\":\"ba7e925c-03e3-4337-961a-9c010cc3c0d4\",\"type\":\"Investigator\",\"class\":\"Survivor\",\"traits\":\"Robot. Assistant. Drifter.\",\"agilityIcons\":2,\"combatIcons\":4,\"intellectIcons\":4,\"willpowerIcons\":2,\"extraToken\":\"Reaction\",\"signatures\":[{\"b3efc546-ba62-4981-94d8-7c6ac719447c\":1,\"78932007-1569-4581-a909-2b2207382fba\":1}],\"bonded\":[{\"count\":1,\"id\":\"ed31f796-90c8-4e98-8bea-1f161fb761df\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 101000,
      "CustomDeck": {
        "1010": {
          "FaceURL": "https://www.dropbox.com/scl/fi/6l0dpnqpavoq77ren9s7g/ba7e925c-03e3-4337-961a-9c010cc3c0d4-Front-Cheetor-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=2cy4p1exm9dpaslzi9se4t7li&raw=1&cachebust=1752249032296",
          "BackURL": "https://www.dropbox.com/scl/fi/ovqw06i3yb4wnexvdmbp7/ba7e925c-03e3-4337-961a-9c010cc3c0d4-Back-Cheetor-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=q2pguo1ggaw0msd7ebcmmxqaa&raw=1&cachebust=1752249033522",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00013",
      "Name": "Card",
      "Transform": {
        "posX": 46.5539474,
        "posY": 1.50930011,
        "posZ": 51.7939949,
        "rotX": 359.114563,
        "rotY": 270.000122,
        "rotZ": 4.38945463e-05,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Cheetor",
      "GMNotes": "{\"TtsZoopGuid\":\"d4df8562-1957-49a6-a064-0f2fe1642a55\",\"id\":\"ed31f796-90c8-4e98-8bea-1f161fb761df-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 101100,
      "CustomDeck": {
        "1011": {
          "FaceURL": "https://www.dropbox.com/scl/fi/5n0ph7ajb0jiq2ab1uaw6/d4df8562-1957-49a6-a064-0f2fe1642a55-Front-Cheetor-Mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=6klwqgrh5nics7jbvwc17vvs8&raw=1&cachebust=1752425914956",
          "BackURL": "https://www.dropbox.com/scl/fi/9xh1jxchznjwvi1rwg3rc/d4df8562-1957-49a6-a064-0f2fe1642a55-Back-Cheetor-Mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=8aca74087hpgfis6hz8z9xeuq&raw=1&cachebust=1752425917204",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00014",
      "Name": "Card",
      "Transform": {
        "posX": 46.654,
        "posY": 1.49510384,
        "posZ": 53.084,
        "rotX": -2.447476e-07,
        "rotY": 270.0,
        "rotZ": 2.062429e-07,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Cheetor",
      "GMNotes": "{\"TtsZoopGuid\":\"27fe79b1-e8d2-4a56-acc4-747bf81bb5d6\",\"id\":\"ba7e925c-03e3-4337-961a-9c010cc3c0d4-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 101200,
      "CustomDeck": {
        "1012": {
          "FaceURL": "https://www.dropbox.com/scl/fi/rzzdvhichn0kryho99gnm/27fe79b1-e8d2-4a56-acc4-747bf81bb5d6-Front-Cheetor-Mini-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=1mdtg5udo3mhe4holf0kvzya5&raw=1&cachebust=1752199322037",
          "BackURL": "https://www.dropbox.com/scl/fi/ooz8z0891ntmxr726qsd2/27fe79b1-e8d2-4a56-acc4-747bf81bb5d6-Back-Cheetor-Mini-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=naim4k5d2gx2iid3ey1gqvhin&raw=1&cachebust=1752199324686",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e0001a",
      "Name": "Card",
      "Transform": {
        "posX": 44.335,
        "posY": 1.49510086,
        "posZ": 59.065,
        "rotX": 2.64491973e-05,
        "rotY": 270.0005,
        "rotZ": -0.000113389375,
        "scaleX": 0.8214286,
        "scaleY": 1.0,
        "scaleZ": 0.8214286
      },
      "Nickname": "Nightscream",
      "Description": "The Bat",
      "GMNotes": "{\"TtsZoopGuid\":\"a07cc794-96e6-454b-8de5-afccc72367cb\",\"id\":\"a07cc794-96e6-454b-8de5-afccc72367cb\",\"type\":\"Investigator\",\"class\":\"Mystic\",\"traits\":\"Beast. Hunter.\",\"agilityIcons\":3,\"combatIcons\":3,\"intellectIcons\":2,\"willpowerIcons\":4,\"bonded\":[{\"count\":1,\"id\":\"a07cc794-96e6-454b-8de5-afccc72367cb\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 101500,
      "CustomDeck": {
        "1015": {
          "FaceURL": "https://www.dropbox.com/scl/fi/shyafyk0ezudrqyrxxpx5/a07cc794-96e6-454b-8de5-afccc72367cb-Front-Nightscream-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=wnrajrd3h8iym9wfd4qxhjkwp&raw=1&cachebust=1752500665621",
          "BackURL": "https://www.dropbox.com/scl/fi/4ca91m221zf7c7kzji4tn/a07cc794-96e6-454b-8de5-afccc72367cb-Back-Nightscream-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=bkemmmci9hx2aktm70d77tz0r&raw=1&cachebust=1752500667305",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e0001b",
      "Name": "Card",
      "Transform": {
        "posX": 44.35397,
        "posY": 1.49509275,
        "posZ": 62.623,
        "rotX": 0.00014211268,
        "rotY": 269.998749,
        "rotZ": -0.00046341258,
        "scaleX": 0.8214286,
        "scaleY": 1.0,
        "scaleZ": 0.8214286
      },
      "Nickname": "Nightscream",
      "Description": "The Kid",
      "GMNotes": "{\"TtsZoopGuid\":\"baf15fa1-8873-401a-863a-569aeaf52371\",\"id\":\"baf15fa1-8873-401a-863a-569aeaf52371\",\"type\":\"Investigator\",\"class\":\"Mystic\",\"traits\":\"Robot. Hunter.\",\"agilityIcons\":3,\"combatIcons\":3,\"intellectIcons\":2,\"willpowerIcons\":4,\"signatures\":[{\"70fb8a3a-3bc8-438e-bbf1-75a01d9dca4a\":1,\"6ce8a8b9-27b2-4ee3-a77a-c54316de299c\":1}],\"bonded\":[{\"count\":1,\"id\":\"a07cc794-96e6-454b-8de5-afccc72367cb\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 101600,
      "CustomDeck": {
        "1016": {
          "FaceURL": "https://www.dropbox.com/scl/fi/1yykqgg8zkkitrylbipvm/baf15fa1-8873-401a-863a-569aeaf52371-Front-Nightscream-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=08l7hol7t40y9193stq09fgls&raw=1&cachebust=1752199333740",
          "BackURL": "https://www.dropbox.com/scl/fi/1xxktmvfbymk0gqmtfe9v/baf15fa1-8873-401a-863a-569aeaf52371-Back-Nightscream-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=bqaaytqhoy2i9xid6ol0otk89&raw=1&cachebust=1752199334946",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e0001d",
      "Name": "Card",
      "Transform": {
        "posX": 46.517,
        "posY": 1.49510384,
        "posZ": 60.217,
        "rotX": 3.20442865e-07,
        "rotY": 270.0,
        "rotZ": -9.20011e-07,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Nightscream",
      "GMNotes": "{\"TtsZoopGuid\":\"6729a22c-f288-49ab-8ae9-2301ce63f270\",\"id\":\"a07cc794-96e6-454b-8de5-afccc72367cb-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 101700,
      "CustomDeck": {
        "1017": {
          "FaceURL": "https://www.dropbox.com/scl/fi/kkhnmh53g01nz00akhzyf/6729a22c-f288-49ab-8ae9-2301ce63f270-Front-Nightscream-Mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=t9dqmvf6ulnsmqwfpmmnesqwf&raw=1&cachebust=1752425919565",
          "BackURL": "https://www.dropbox.com/scl/fi/j8sl4ruc04sp5osvhxock/6729a22c-f288-49ab-8ae9-2301ce63f270-Back-Nightscream-Mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=fhq1j0ec96n5ru06hkqsj1xi9&raw=1&cachebust=1752425922037",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e0001e",
      "Name": "Card",
      "Transform": {
        "posX": 46.508934,
        "posY": 1.50880384,
        "posZ": 61.4179955,
        "rotX": 359.14566,
        "rotY": 270.005157,
        "rotZ": 0.000278601277,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Nightscream",
      "GMNotes": "{\"TtsZoopGuid\":\"3be690b8-a877-4a20-b887-d3256c36fd74\",\"id\":\"baf15fa1-8873-401a-863a-569aeaf52371-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 101800,
      "CustomDeck": {
        "1018": {
          "FaceURL": "https://www.dropbox.com/scl/fi/oxgmhu5b1urfbbyaoajwr/3be690b8-a877-4a20-b887-d3256c36fd74-Front-Nightscream-Mini-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=9qd5stbzz7w2kz4h9s760owei&raw=1&cachebust=1752199337598",
          "BackURL": "https://www.dropbox.com/scl/fi/c1d5k7724y4hk40v6v8i1/3be690b8-a877-4a20-b887-d3256c36fd74-Back-Nightscream-Mini-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=we3gs2zmvmphu6utcg3f52jkq&raw=1&cachebust=1752199340365",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00024",
      "Name": "Card",
      "Transform": {
        "posX": 44.3889961,
        "posY": 1.49510407,
        "posZ": 85.55001,
        "rotX": -6.084803e-07,
        "rotY": 269.999939,
        "rotZ": 7.47951435e-06,
        "scaleX": 0.8214286,
        "scaleY": 1.0,
        "scaleZ": 0.8214286
      },
      "Nickname": "Optimus Primal",
      "Description": "The Ape",
      "GMNotes": "{\"TtsZoopGuid\":\"a8106251-255c-45e2-8a7c-5dfeed18094b\",\"id\":\"a8106251-255c-45e2-8a7c-5dfeed18094b\",\"type\":\"Investigator\",\"class\":\"Guardian\",\"traits\":\"Beast. Dreamer. Warden.\",\"agilityIcons\":1,\"combatIcons\":5,\"intellectIcons\":2,\"willpowerIcons\":4,\"bonded\":[{\"count\":1,\"id\":\"a8106251-255c-45e2-8a7c-5dfeed18094b\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 102100,
      "CustomDeck": {
        "1021": {
          "FaceURL": "https://www.dropbox.com/scl/fi/mjcb7yu8279zua1cf5oby/a8106251-255c-45e2-8a7c-5dfeed18094b-Front-Optimus-Primal-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=wupoa5wsgiox0hoojxgjonyrk&raw=1&cachebust=1752500658388",
          "BackURL": "https://www.dropbox.com/scl/fi/4gm84w7q7ko4e4xwq32u5/a8106251-255c-45e2-8a7c-5dfeed18094b-Back-Optimus-Primal-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=dbehz6yp5195l6kzjutimgjmd&raw=1&cachebust=1752500660546",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00025",
      "Name": "Card",
      "Transform": {
        "posX": 44.3889923,
        "posY": 1.49509811,
        "posZ": 89.172,
        "rotX": 7.011956e-05,
        "rotY": 269.999359,
        "rotZ": -0.000237623259,
        "scaleX": 0.8214286,
        "scaleY": 1.0,
        "scaleZ": 0.8214286
      },
      "Nickname": "Optimus Primal",
      "Description": "The Leader",
      "GMNotes": "{\"TtsZoopGuid\":\"92e8cc2d-298c-42cf-810f-45fadbc2de47\",\"id\":\"92e8cc2d-298c-42cf-810f-45fadbc2de47\",\"type\":\"Investigator\",\"class\":\"Guardian\",\"traits\":\"Robot. Dreamer. Warden.\",\"agilityIcons\":1,\"combatIcons\":5,\"intellectIcons\":2,\"willpowerIcons\":4,\"signatures\":[{\"08e0dc6b-2e96-4e6d-a6b0-b66b90e3e17e\":1,\"333e768e-6415-44f9-bd3a-908b02bba9d5\":1}],\"bonded\":[{\"count\":1,\"id\":\"a8106251-255c-45e2-8a7c-5dfeed18094b\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 102200,
      "CustomDeck": {
        "1022": {
          "FaceURL": "https://www.dropbox.com/scl/fi/40fwlobpais3ou2naocnj/92e8cc2d-298c-42cf-810f-45fadbc2de47-Front-Optimus-Primal-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=hweyjvizfex7q8rf4s3hhbw1y&raw=1&cachebust=1752199349783",
          "BackURL": "https://www.dropbox.com/scl/fi/lby1yarlf42ud70vmag8l/92e8cc2d-298c-42cf-810f-45fadbc2de47-Back-Optimus-Primal-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=o288prhx3wprgnama28kwm0gj&raw=1&cachebust=1752199351037",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00027",
      "Name": "Card",
      "Transform": {
        "posX": 46.5429344,
        "posY": 1.50887156,
        "posZ": 86.722,
        "rotX": 359.1413,
        "rotY": 270.000183,
        "rotZ": 2.316121e-05,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Optimus Primal",
      "GMNotes": "{\"TtsZoopGuid\":\"b5dede05-e837-47f1-8265-c17751da2cb7\",\"id\":\"a8106251-255c-45e2-8a7c-5dfeed18094b-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 102300,
      "CustomDeck": {
        "1023": {
          "FaceURL": "https://www.dropbox.com/scl/fi/ze7dr2xoxy97ldv551ca0/b5dede05-e837-47f1-8265-c17751da2cb7-Front-Optimus-Mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=va9t14fwb8s1ssqqqasn64ibn&raw=1&cachebust=1752425924410",
          "BackURL": "https://www.dropbox.com/scl/fi/ba6dhgqjk906wpise26gy/b5dede05-e837-47f1-8265-c17751da2cb7-Back-Optimus-Mini-Beast-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=1eu1imoddjuxrukfqgkjmz5xw&raw=1&cachebust=1752425926893",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00028",
      "Name": "Card",
      "Transform": {
        "posX": 46.5429344,
        "posY": 1.508891,
        "posZ": 88.018,
        "rotX": 359.1398,
        "rotY": 269.999878,
        "rotZ": -0.000433845882,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Optimus Primal",
      "GMNotes": "{\"TtsZoopGuid\":\"22e670b7-da72-467e-aeeb-3cc9f77f2ac8\",\"id\":\"92e8cc2d-298c-42cf-810f-45fadbc2de47-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 102400,
      "CustomDeck": {
        "1024": {
          "FaceURL": "https://www.dropbox.com/scl/fi/l4lm3mn92roy8dflrikuv/22e670b7-da72-467e-aeeb-3cc9f77f2ac8-Front-Optimus-Mini-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=te96o3f3p3v0sg97cjlp4n2ah&raw=1&cachebust=1752199353768",
          "BackURL": "https://www.dropbox.com/scl/fi/rmvkh2zjib4r35lvpfn74/22e670b7-da72-467e-aeeb-3cc9f77f2ac8-Back-Optimus-Mini-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=ofnyng1o8lobjft8uawft4gax&raw=1&cachebust=1752199356778",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e0002e",
      "Name": "Card",
      "Transform": {
        "posX": 44.00079,
        "posY": 1.49510384,
        "posZ": 67.53391,
        "rotX": -3.68139763e-06,
        "rotY": 270.008484,
        "rotZ": 4.21555235e-08,
        "scaleX": 0.8214,
        "scaleY": 1.0,
        "scaleZ": 0.8214
      },
      "Nickname": "Rattrap",
      "Description": "The Infiltrator",
      "GMNotes": "{\"TtsZoopGuid\":\"a06213b4-2feb-4ed2-bcd3-c45c650f288c\",\"id\":\"a06213b4-2feb-4ed2-bcd3-c45c650f288c\",\"type\":\"Investigator\",\"class\":\"Rogue\",\"traits\":\"Robot. Detective. Drifter.\",\"agilityIcons\":5,\"combatIcons\":2,\"intellectIcons\":3,\"willpowerIcons\":2,\"bonded\":[{\"count\":1,\"id\":\"a06213b4-2feb-4ed2-bcd3-c45c650f288c\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 102700,
      "CustomDeck": {
        "1027": {
          "FaceURL": "https://www.dropbox.com/scl/fi/7pfy595bnfj3q3ipxwlxd/a06213b4-2feb-4ed2-bcd3-c45c650f288c-Front-Rattrap-Robot-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=si1itbb410hl0iapkkiy2nixo&raw=1&cachebust=1752500655436",
          "BackURL": "https://www.dropbox.com/scl/fi/5d40hitgydpffvuze19ls/a06213b4-2feb-4ed2-bcd3-c45c650f288c-Back-Rattrap-Robot-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=vlflfydb4e337xzegk83o56gt&raw=1&cachebust=1752500656746",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e0002f",
      "Name": "Card",
      "Transform": {
        "posX": 44.001297,
        "posY": 1.49510384,
        "posZ": 71.15739,
        "rotX": 2.22750487e-07,
        "rotY": 270.035339,
        "rotZ": -1.21177862e-07,
        "scaleX": 0.8214,
        "scaleY": 1.0,
        "scaleZ": 0.8214
      },
      "Nickname": "Rattrap",
      "Description": "The Rat",
      "GMNotes": "{\"TtsZoopGuid\":\"80621a80-d00b-4858-94c8-7dbde8259b37\",\"id\":\"80621a80-d00b-4858-94c8-7dbde8259b37\",\"type\":\"Investigator\",\"class\":\"Rogue\",\"traits\":\"Beast. Detective. Drifter.\",\"agilityIcons\":4,\"combatIcons\":2,\"intellectIcons\":4,\"willpowerIcons\":2,\"signatures\":[{\"af556e07-a8ae-4f7a-9986-55f63d3f8c8d\":1,\"f7d4346e-4907-4c2c-8318-9710408f939c\":1}],\"bonded\":[{\"count\":1,\"id\":\"a06213b4-2feb-4ed2-bcd3-c45c650f288c\"}]}",
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "CardID": 102800,
      "CustomDeck": {
        "1028": {
          "FaceURL": "https://www.dropbox.com/scl/fi/t9sw4xiqxzfqqll7s3v40/80621a80-d00b-4858-94c8-7dbde8259b37-Front-Rattrap-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=0ln88quosgja6e5fo8a3qagtq&raw=1&cachebust=1752500662276",
          "BackURL": "https://www.dropbox.com/scl/fi/de3ahdav3zmw2924pt5k3/80621a80-d00b-4858-94c8-7dbde8259b37-Back-Rattrap-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=5afjz4n6gvzqhig1k88qd07fi&raw=1&cachebust=1752500663963",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00031",
      "Name": "Card",
      "Transform": {
        "posX": 46.659,
        "posY": 1.49510384,
        "posZ": 68.609,
        "rotX": -6.650291e-08,
        "rotY": 270.0,
        "rotZ": 1.61496615e-07,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Rattrap",
      "GMNotes": "{\"TtsZoopGuid\":\"75a0a119-dbc7-4c50-a769-eaf5d4244549\",\"id\":\"a06213b4-2feb-4ed2-bcd3-c45c650f288c-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 102900,
      "CustomDeck": {
        "1029": {
          "FaceURL": "https://www.dropbox.com/scl/fi/tvsmkiis4k5k25wvs76jk/75a0a119-dbc7-4c50-a769-eaf5d4244549-Front-Rattrap-mini-Robot-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=s0jilg6um2omef275w82fdtbi&raw=1&cachebust=1752425821703",
          "BackURL": "https://www.dropbox.com/scl/fi/fgwfdu4w7supgvwwbd476/75a0a119-dbc7-4c50-a769-eaf5d4244549-Back-Rattrap-mini-Robot-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=nz4kejlkor6akrdr5ne5xoogu&raw=1&cachebust=1752425822945",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "e00032",
      "Name": "Card",
      "Transform": {
        "posX": 46.41957,
        "posY": 1.49510384,
        "posZ": 69.96599,
        "rotX": -2.8837988e-07,
        "rotY": 269.9965,
        "rotZ": 7.037582e-07,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Rattrap",
      "GMNotes": "{\"TtsZoopGuid\":\"187c6444-fd86-4498-b0eb-eac745c1dfcb\",\"id\":\"80621a80-d00b-4858-94c8-7dbde8259b37-m\",\"type\":\"Minicard\"}",
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "CardID": 103000,
      "CustomDeck": {
        "1030": {
          "FaceURL": "https://www.dropbox.com/scl/fi/2lynsq1i80k7o3kimseva/187c6444-fd86-4498-b0eb-eac745c1dfcb-Front-Rattrap-mini-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=agvj0n0380oiwmpk7md649bmk&raw=1&cachebust=1752249587301",
          "BackURL": "https://www.dropbox.com/scl/fi/smtgwxmm6vksdccs6318y/187c6444-fd86-4498-b0eb-eac745c1dfcb-Back-Rattrap-mini-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=ntc78di7a7toqp6tjcbwmruqg&raw=1&cachebust=1752249590232",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      }
    },
    {
      "GUID": "5621e9",
      "Name": "Deck",
      "Transform": {
        "posX": 41.21125,
        "posY": 1.51205766,
        "posZ": 69.33257,
        "rotX": 3.52771735e-06,
        "rotY": 269.965454,
        "rotZ": -3.67390754e-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Tags": [
        "PlayerCard"
      ],
      "Hands": false,
      "DeckIDs": [
        103100,
        103200
      ],
      "CustomDeck": {
        "1031": {
          "FaceURL": "https://www.dropbox.com/scl/fi/0gfrz1xwds08cclb4c0rp/af556e07-a8ae-4f7a-9986-55f63d3f8c8d-Front-Envy-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=l7mipirnqrwh1rmof6lwduuto&raw=1&cachebust=1752199373250",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        },
        "1032": {
          "FaceURL": "https://www.dropbox.com/scl/fi/62w042sbclif17x5rftn5/f7d4346e-4907-4c2c-8318-9710408f939c-Front-I-Am-Transformed-Rattrap-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=mgvbvbqu2nlpiqckqoo2binj5&raw=1&cachebust=1752295670221",
          "BackURL": "https://www.dropbox.com/scl/fi/e558bt9we5k03byhl69dc/f7d4346e-4907-4c2c-8318-9710408f939c-Back-I-Am-Transformed-Rattrap-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=nkg6rcnttjbtwko29yb9q3lph&raw=1&cachebust=1752295671435",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      },
      "ContainedObjects": [
        {
          "GUID": "e00034",
          "Name": "Card",
          "Transform": {
            "posX": 41.21136,
            "posY": 1.49509668,
            "posZ": 69.3325043,
            "rotX": 0.000159891119,
            "rotY": 269.9677,
            "rotZ": -0.000485053868,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Envy",
          "GMNotes": "{\"TtsZoopGuid\":\"af556e07-a8ae-4f7a-9986-55f63d3f8c8d\",\"id\":\"af556e07-a8ae-4f7a-9986-55f63d3f8c8d\",\"type\":\"Event\",\"traits\":\"Bold. Flaw.\",\"weakness\":true}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 103100,
          "CustomDeck": {
            "1031": {
              "FaceURL": "https://www.dropbox.com/scl/fi/0gfrz1xwds08cclb4c0rp/af556e07-a8ae-4f7a-9986-55f63d3f8c8d-Front-Envy-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=l7mipirnqrwh1rmof6lwduuto&raw=1&cachebust=1752199373250",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00035",
          "Name": "Card",
          "Transform": {
            "posX": 41.0737572,
            "posY": 1.54505169,
            "posZ": 69.29425,
            "rotX": 0.0001409481,
            "rotY": 269.9708,
            "rotZ": -0.003645025,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "I Am Transformed",
          "Description": "Beast Mode",
          "GMNotes": "{\"TtsZoopGuid\":\"f7d4346e-4907-4c2c-8318-9710408f939c\",\"id\":\"f7d4346e-4907-4c2c-8318-9710408f939c\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"permanent\":true,\"startsInPlay\":true}",
          "Tags": [
            "Asset",
            "CardWithHelper",
            "PlayerCard"
          ],
          "HideWhenFaceDown": false,
          "CardID": 103200,
          "CustomDeck": {
            "1032": {
              "FaceURL": "https://www.dropbox.com/scl/fi/62w042sbclif17x5rftn5/f7d4346e-4907-4c2c-8318-9710408f939c-Front-I-Am-Transformed-Rattrap-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=mgvbvbqu2nlpiqckqoo2binj5&raw=1&cachebust=1752295670221",
              "BackURL": "https://www.dropbox.com/scl/fi/e558bt9we5k03byhl69dc/f7d4346e-4907-4c2c-8318-9710408f939c-Back-I-Am-Transformed-Rattrap-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=nkg6rcnttjbtwko29yb9q3lph&raw=1&cachebust=1752295671435",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"IAmTransformed\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"playercards/CardsWithHelper\")\r\nlocal GUIDReferenceApi = require(\"core/GUIDReferenceApi\")\r\nlocal PlayermatApi     = require(\"playermat/PlayermatApi\")\r\nlocal TableLib         = require(\"util/TableLib\")\r\n\r\n-- intentionally global\r\nhasXML                 = true\r\nisHelperEnabled        = false\r\n\r\nfunction updateSave()\r\n  self.script_state = JSON.encode({ isHelperEnabled = isHelperEnabled })\r\nend\r\n\r\nfunction onLoad(savedData)\r\n  if savedData and savedData ~= \"\" then\r\n    local loadedData = JSON.decode(savedData)\r\n    isHelperEnabled = loadedData.isHelperEnabled\r\n  end\r\n  self.addTag(\"CardWithHelper\")\r\n  generateXml()\r\nend\r\n\r\nfunction generateXml()\r\n  local xml = {}\r\n\r\n  local mainPanel = {\r\n    tag        = \"Panel\",\r\n    attributes = { id = \"Helper\", active = isHelperEnabled },\r\n    children   = {}\r\n  }\r\n\r\n  local buttonXml = {\r\n    tag = \"Button\",\r\n    attributes = {\r\n      color        = \"#C0C0C080\",\r\n      height       = 550,\r\n      width        = 1200,\r\n      rotation     = \"0 0 180\",\r\n      scale        = \"0.1 0.1 1\",\r\n      position     = \"0 -25 -40\",\r\n      ignoreLayout = true,\r\n      padding      = \"50 50 50 50\",\r\n      onClick      = \"transform\",\r\n      text         = \"Transform\",\r\n      textColor    = \"Black\",\r\n      font         = \"font_teutonic-arkham\",\r\n      fontSize     = 200\r\n    }\r\n  }\r\n\r\n  table.insert(mainPanel.children, buttonXml)\r\n\r\n  local reverseButtonXml = TableLib.copy(buttonXml)\r\n  reverseButtonXml.attributes.position = \"0 -25 40\"\r\n  reverseButtonXml.attributes.rotation = \"0 180 180\"\r\n  table.insert(mainPanel.children, reverseButtonXml)\r\n\r\n  table.insert(xml, mainPanel)\r\n  self.UI.setXmlTable(xml)\r\nend\r\n\r\nfunction transform(player)\r\n  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())\r\n\r\n  -- look for current investigator\r\n  local invCards = PlayermatApi.getUsedInvestigatorCards()\r\n  local currentCard = invCards[matColor]\r\n  if not currentCard then\r\n    broadcastToColor(\"Can't find current investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- look for other investigator\r\n  local otherCard\r\n  for _, card in ipairs(PlayermatApi.searchAroundPlayermat(matColor, \"isCard\")) do\r\n    if card.hasTag(\"Investigator\") and card ~= currentCard then\r\n      otherCard = card\r\n      break\r\n    end\r\n  end\r\n  if not otherCard then\r\n    broadcastToColor(\"Can't find other investigator card.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- get current stat line\r\n  local skillTracker = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"InvestigatorSkillTracker\")\r\n  if not skillTracker then\r\n    broadcastToColor(\"Can't find skill tracker.\", player.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  -- calculate static boosts\r\n  local currentStats = skillTracker.getTable(\"stats\")\r\n\r\n  local currentMd    = JSON.decode(currentCard.getGMNotes()) or {}\r\n  local currentDiff  = {}\r\n\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    currentDiff[i] = currentStats[i] - (currentMd[skill .. \"Icons\"] or 0)\r\n  end\r\n\r\n  -- calculate new stat line\r\n  local otherMd  = JSON.decode(otherCard.getGMNotes()) or {}\r\n  local newStats = {}\r\n  for i, skill in ipairs({ \"willpower\", \"intellect\", \"combat\", \"agility\" }) do\r\n    newStats[i] = currentDiff[i] + (otherMd[skill .. \"Icons\"] or 0)\r\n  end\r\n  Wait.time(function() skillTracker.call(\"updateStats\", newStats) end, 0.25)\r\n\r\n  -- instruct mat to not touch regular action tokens\r\n  PlayermatApi.activateTransformEffect(matColor)\r\n\r\n  -- swap both cards in place\r\n  local currentPos = currentCard.getPosition() + Vector(0, 0.03, 0)\r\n  local currentRot = currentCard.getRotation()\r\n\r\n  local otherPos   = otherCard.getPosition()\r\n  local otherRot   = otherCard.getRotation()\r\n\r\n  currentCard.setPosition(otherPos)\r\n  currentCard.setRotation(otherRot)\r\n\r\n  otherCard.setPosition(currentPos)\r\n  otherCard.setRotation(currentRot)\r\n\r\n  self.flip()\r\nend\r\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"IAmTransformed\")\nend)\n__bundle_register(\"core/GUIDReferenceApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local GUIDReferenceApi = {}\n\n  local function callhandler(functionName, argument)\n    return getObjectFromGUID(\"123456\").call(functionName, argument)\n  end\n\n  -- General information:\n  --- \"owner\" is a string that describes the parent object\n  --- \"type\" is a string that describes the type of object\n\n  -- Returns the matching object\n  function GUIDReferenceApi.getObjectByOwnerAndType(owner, type)\n    return callhandler(\"getObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByType(type)\n    return callhandler(\"getObjectsByType\", type)\n  end\n\n  -- Returns all matching objects as a table with references\n  function GUIDReferenceApi.getObjectsByOwner(owner)\n    return callhandler(\"getObjectsByOwner\", owner)\n  end\n\n  -- Sends new information to the reference handler to edit the main index (if type/guid are omitted, entry will be removed)\n  function GUIDReferenceApi.editIndex(owner, type, guid)\n    return callhandler(\"editIndex\", { owner = owner, type = type, guid = guid })\n  end\n\n  -- Returns the owner of an object or the object it's located on\n  function GUIDReferenceApi.getOwnerOfObject(object)\n    return callhandler(\"getOwnerOfObject\", object)\n  end\n\n  function GUIDReferenceApi.removeObjectByOwnerAndType(owner, type)\n    return callhandler(\"removeObjectByOwnerAndType\", { owner = owner, type = type })\n  end\n\n  return GUIDReferenceApi\nend\nend)\n__bundle_register(\"playercards/CardsWithHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)\n--[[ Library for cards that have helpers\nThis file is used to share code between cards with helpers.\nIt syncs the visibility of the helper with the option panel and\nmakes sure the card has the respective tag.\nAdditionally, it will call 'initialize()' and 'shutOff()'\nin the parent file if they are present.\n\nInstructions:\n1) Define the global variables before requiring this file:\nhasXML          = true  (whether the card has an XML display)\nisHelperEnabled = false (default state of the helper, should be 'false')\n\n2) Add \"CardWithHelper\" tag to .json for the card object itself.\n\n3) Add `if isHelperEnabled then updateDisplay() end` to onLoad()\n\n----------------------------------------------------------]]\n\n-- forces a new state\nfunction setHelperState(newState)\n  if doNotTurnOff == true then return end\n  isHelperEnabled = newState\n  updateSave()\n  updateDisplay()\nend\n\n-- toggles the current state\nfunction toggleHelper(manual)\n  if manual and isHelperEnabled == true then -- do not allow helper to be forced to turn on\n    doNotTurnOff = true\n  elseif manual and isHelperEnabled == false then -- return to default behavior\n    doNotTurnOff = false\n  end\n  isHelperEnabled = not isHelperEnabled\n  updateSave()\n  updateDisplay()\nend\n\n-- updates the visibility and calls events (after a small delay to allow XML being set)\nfunction updateDisplay()\n  Wait.frames(actualDisplayUpdate, 5)\nend\n\nfunction actualDisplayUpdate()\n  if isHelperEnabled then\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Disable Helper\", toggleHelper)\n    if hasXML then self.UI.show(\"Helper\") end\n    if initialize then initialize() end\n  else\n    self.clearContextMenu()\n    self.addContextMenuItem(\"Enable Helper\", toggleHelper)\n    if hasXML then self.UI.hide(\"Helper\") end\n    if shutOff then shutOff() end\n  end\n  if generateContextMenu then generateContextMenu() end\nend\n\nfunction onPickUp()\n  setHelperState(false)\nend\nend)\n__bundle_register(\"playermat/PlayermatApi\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local PlayermatApi              = {}\n  local GUIDReferenceApi          = require(\"core/GUIDReferenceApi\")\n  local SearchLib                 = require(\"util/SearchLib\")\n  local localInvestigatorPosition = Vector(-1.17, 1, -0.01)\n\n  -- General notes:\n  -------------------------------------------------------------------\n  -- \"matColor\" is a string that describes the internal \"color\" of each mat\n  -- (the starting color when the game is first loaded)\n  -- Some functions will support the additional \"All\" pseudo-color to trigger that code for each mat\n  -- If a function does not support \"All\", there will be a comment\n  -------------------------------------------------------------------\n  -- \"playerColor\" (or \"handColor\") is a string that describes the actual color of the seat\n  -------------------------------------------------------------------\n\n  -- Convenience function to look up a mat's object by color, or get all mats\n  local function getMatForColor(matColor)\n    if matColor == \"All\" then\n      return GUIDReferenceApi.getObjectsByType(\"Playermat\") or {}\n    else\n      return { matColor = GUIDReferenceApi.getObjectByOwnerAndType(matColor, \"Playermat\") }\n    end\n  end\n\n  -- Convenience function to call a function on a single mat\n  ---@param matColor string Does not support \"All\"\n  ---@param funcName string Name of the function to call\n  ---@param params any Parameter for the call\n  local function callForSingleMat(matColor, funcName, params)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.call(funcName, params)\n    end\n  end\n\n  -- Returns the color of the closest playermat\n  ---@param startPos table Starting position to get the closest mat from\n  function PlayermatApi.getMatColorByPosition(startPos)\n    local result, smallestDistance\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local distance = Vector.between(startPos, mat.getPosition()):magnitude()\n      if smallestDistance == nil or distance < smallestDistance then\n        smallestDistance = distance\n        result = matColor\n      end\n    end\n    return result\n  end\n\n  -- Returns the color of the player's hand that is seated next to the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getPlayerColor(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getVar(\"playerColor\")\n    end\n  end\n\n  -- Returns the color of the playermat that owns the playercolor's hand\n  ---@param handColor string Color of the playermat\n  function PlayermatApi.getMatColor(handColor)\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      if mat.getVar(\"playerColor\") == handColor then\n        return matColor\n      end\n    end\n  end\n\n  -- Gets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getSlotData(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getTable(\"slotData\")\n    end\n  end\n\n  -- Sets the slot data for the playermat\n  ---@param matColor string Does not support \"All\"\n  ---@param newSlotData table New slot data for the playermat\n  function PlayermatApi.loadSlotData(matColor, newSlotData)\n    return callForSingleMat(matColor, \"updateSlotSymbols\", newSlotData)\n  end\n\n  -- Performs a search of the deck area of the requested playermat and returns the result as table\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDeckAreaObjects(matColor)\n    return callForSingleMat(matColor, \"getDeckAreaObjects\")\n  end\n\n  -- Flips the top card of the deck (useful after deck manipulation for Norman Withers)\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.flipTopCardFromDeck(matColor)\n    return callForSingleMat(matColor, \"flipTopCardFromDeck\")\n  end\n\n  -- Returns the position of the discard pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDiscardPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDiscardPosition\"))\n  end\n\n  -- Returns the position of the draw pile of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getDrawPosition(matColor)\n    return Vector(callForSingleMat(matColor, \"returnGlobalDrawPosition\"))\n  end\n\n  -- Transforms a local position into a global position\n  ---@param localPos table Local position to be transformed\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.transformLocalPosition(localPos, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.positionToWorld(localPos)\n    end\n  end\n\n  -- Returns the rotation of the requested playermat\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.returnRotation(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      return mat.getRotation()\n    end\n  end\n\n  -- Returns a table with spawn data (position and rotation) for a helper object\n  ---@param helperName string Name of the helper object\n  function PlayermatApi.getHelperSpawnData(matColor, helperName)\n    local resultTable = {}\n    for color, mat in pairs(getMatForColor(matColor)) do\n      local data = mat.call(\"getHelperSpawnData\", helperName)\n      resultTable[color] = { position = Vector(data.position), rotation = Vector(data.rotation) }\n    end\n    return resultTable\n  end\n\n  -- Triggers the Upkeep for the requested playermat\n  ---@param playerColor string Color of the calling player (for messages)\n  function PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"doUpkeepFromHotkey\", playerColor)\n    end\n  end\n\n  -- Handles discarding for the requested playermat for the provided list of objects\n  ---@param matColor string Does not support \"All\"\n  ---@param objList table List of objects to discard\n  function PlayermatApi.discardListOfObjects(matColor, objList)\n    return callForSingleMat(matColor, \"discardListOfObjects\", objList)\n  end\n\n  -- Gets data about the active investigator\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getActiveInvestigatorData(matColor)\n    return callForSingleMat(matColor, \"getActiveInvestigatorData\")\n  end\n\n  -- Sets data about the active investigator\n  ---@param newData table New active investigator data (class and id)\n  function PlayermatApi.setActiveInvestigatorData(matColor, newData)\n    return callForSingleMat(matColor, \"setActiveInvestigatorData\", newData)\n  end\n\n  -- Returns the position for encounter card drawing\n  ---@param matColor string Does not support \"All\"\n  ---@param stack boolean If true, returns the leftmost position instead of the first empty from the right\n  function PlayermatApi.getEncounterCardDrawPosition(matColor, stack)\n    return Vector(callForSingleMat(matColor, \"getEncounterCardDrawPosition\", stack))\n  end\n\n  -- Sets the requested playermat's snap points to limit snapping to matching card types or not\n  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types\n  function PlayermatApi.setLimitSnapsByType(matchCardTypes, matColor)\n    return callForSingleMat(matColor, \"setLimitSnapsByType\", matchCardTypes)\n  end\n\n  -- Sets the requested playermat's draw 1 button to visible\n  ---@param isDrawButtonVisible boolean Whether the draw 1 button should be visible or not\n  function PlayermatApi.showDrawButton(isDrawButtonVisible, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"showDrawButton\", isDrawButtonVisible)\n    end\n  end\n\n  -- Updates clue counts to account for clickable clue counters\n  ---@param showCounter boolean Whether the clickable counter should be present or not\n  function PlayermatApi.clickableClues(showCounter, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"clickableClues\", showCounter)\n    end\n  end\n\n  -- Toggles the use of class textures for the requested playermat\n  ---@param state boolean Whether the class texture should be used or not\n  function PlayermatApi.useClassTexture(state, matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"useClassTexture\", state)\n    end\n  end\n\n  -- updates the texture of the playermat\n  ---@param overrideName? string Force a specific texture\n  function PlayermatApi.updateTexture(matColor, overrideName)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateTexture\", overrideName)\n    end\n  end\n\n  -- Removes all clues (to the trash for tokens and counters set to 0) for the requested playermat\n  function PlayermatApi.removeClues(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"removeClues\")\n    end\n  end\n\n  -- Reports the clue count for the requested playermat\n  function PlayermatApi.getClueCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getClueCount\") or 0)\n    end\n    return count\n  end\n\n  -- Reports the doom count for the requested playermat\n  function PlayermatApi.getDoomCount(matColor)\n    local count = 0\n    for _, mat in pairs(getMatForColor(matColor)) do\n      count = count + (mat.call(\"getDoomCount\") or 0)\n    end\n    return count\n  end\n\n  -- Updates the specified owned counter\n  ---@param type string Counter to target\n  ---@param newValue number Value to set the counter to\n  ---@param modifier number If newValue is not provided, the existing value will be adjusted by this modifier\n  function PlayermatApi.updateCounter(matColor, type, newValue, modifier)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"updateCounter\", { type = type, newValue = newValue, modifier = modifier })\n    end\n  end\n\n  -- Triggers the draw function for the specified playermat\n  ---@param number number Amount of cards to draw\n  function PlayermatApi.drawCardsWithReshuffle(matColor, number)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"drawCardsWithReshuffle\", number)\n    end\n  end\n\n  -- Returns the resource counter amount\n  ---@param matColor string Does not support \"All\"\n  ---@param type string Counter to target\n  function PlayermatApi.getCounterValue(matColor, type)\n    return callForSingleMat(matColor, \"getCounterValue\", type)\n  end\n\n  -- Returns a list of mat colors that have an investigator placed\n  function PlayermatApi.getUsedMatColors()\n    local usedColors = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        table.insert(usedColors, matColor)\n      end\n    end\n    return usedColors\n  end\n\n  -- Returns a list of investigator card objects\n  function PlayermatApi.getUsedInvestigatorCards()\n    local usedCards = {}\n    for matColor, mat in pairs(getMatForColor(\"All\")) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult > 0 then\n        usedCards[matColor] = searchResult[1]\n      end\n    end\n    return usedCards\n  end\n\n  -- Returns investigator name\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getInvestigatorName(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      local searchPos = mat.positionToWorld(localInvestigatorPosition)\n      local searchResult = SearchLib.atPosition(searchPos, \"isCardOrDeck\")\n      if #searchResult == 1 then\n        return searchResult[1].getName()\n      end\n    end\n    return \"\"\n  end\n\n  -- Resets the specified skill tracker to \"1, 1, 1, 1\"\n  function PlayermatApi.resetSkillTracker(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"resetSkillTracker\")\n    end\n  end\n\n  -- Finds all objects on the playermat and associated set aside zone and returns a table\n  ---@param filter? string Name of the filte function (see util/SearchLib)\n  function PlayermatApi.searchAroundPlayermat(matColor, filter)\n    local objList = {}\n    for _, mat in pairs(getMatForColor(matColor)) do\n      for _, obj in ipairs(mat.call(\"searchAroundSelf\", filter)) do\n        table.insert(objList, obj)\n      end\n    end\n    return objList\n  end\n\n  -- Spawns the regular action tokens\n  function PlayermatApi.spawnActionTokens(matColor)\n    for _, mat in pairs(getMatForColor(matColor)) do\n      mat.call(\"spawnActionTokens\")\n    end\n  end\n\n  -- Triggers the metadata sync for all playermats\n  function PlayermatApi.syncAllCustomizableCards()\n    for _, mat in pairs(getMatForColor(\"All\")) do\n      mat.call(\"syncAllCustomizableCards\")\n    end\n  end\n\n  -- Gets the value of the \"Use Resource Counters\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getResourceCounterOption(matColor)\n    return callForSingleMat(matColor, \"getResourceCounterOption\")\n  end\n\n  -- Gets the value of the \"Show Token Splash\" option that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  function PlayermatApi.getTokenSplashOption(matColor)\n    return callForSingleMat(matColor, \"getTokenSplashOption\")\n  end\n\n  -- Gets the exhaust rotation that's set in the mat's option panel\n  ---@param matColor string Does not support \"All\"\n  ---@param convertToGlobal? boolean True if the global (Vector) rotation is requested (otherwise just local Y-rotation)\n  function PlayermatApi.getExhaustRotation(matColor, convertToGlobal)\n    return callForSingleMat(matColor, \"getExhaustRotation\", convertToGlobal)\n  end\n\n  -- moves + rotates a playermat (and related objects)\n  ---@param position? table New position for the playermat\n  ---@param rotationY? number New y-rotation for the playermat (X and Z will be 0)\n  ---@param positionOffset? table Positional offset for the playermat\n  function PlayermatApi.moveAndRotate(matColor, position, rotationY, positionOffset)\n    local params = { position = position, rotationY = rotationY, positionOffset = positionOffset }\n    return callForSingleMat(matColor, \"moveAndRotateSelf\", params)\n  end\n\n  -- Instructs the playermat to not touch the regular action tokens for the next investigator change\n  function PlayermatApi.activateTransformEffect(matColor)\n    return callForSingleMat(matColor, \"activateTransformEffect\")\n  end\n\n  return PlayermatApi\nend\nend)\n__bundle_register(\"util/SearchLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local SearchLib = {}\n  local FILTER_FUNCTIONS = {\n    isCard           = function(x) return x.type == \"Card\" end,\n    isDeck           = function(x) return x.type == \"Deck\" end,\n    isCardOrDeck     = function(x) return x.type == \"Card\" or x.type == \"Deck\" end,\n    isClue           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == false end,\n    isDoom           = function(x) return x.memo == \"clueDoom\" and x.is_face_down == true end,\n    isInteractable   = function(x) return x.interactable end,\n    isTileOrToken    = function(x) return not x.Book and (x.type == \"Tile\" or x.type == \"Generic\") end,\n    isUniversalToken = function(x) return x.getMemo() == \"universalActionAbility\" end,\n  }\n\n  -- performs the actual search and returns a filtered list of object references\n  ---@param pos tts__Vector Global position\n  ---@param rot? tts__Vector Global rotation\n  ---@param size table Size\n  ---@param filter? string Name of the filter function\n  ---@param direction? table Direction (positive is up)\n  ---@param maxDistance? number Distance for the cast\n  ---@param debug? boolean Whether the debug boxes should be shown\n  local function returnSearchResult(pos, rot, size, filter, direction, maxDistance, debug)\n    local filterFunc = filter and FILTER_FUNCTIONS[filter]\n    local searchResult = Physics.cast({\n      origin       = pos,\n      direction    = direction or { 0, 1, 0 },\n      orientation  = rot or { 0, 0, 0 },\n      type         = 3,\n      size         = size,\n      max_distance = maxDistance or 0,\n      debug        = debug or false\n    })\n\n    -- filter the result for matching objects\n    local objList = {}\n    for _, v in ipairs(searchResult) do\n      if (not filter or filterFunc(v.hit_object)) then\n        table.insert(objList, v.hit_object)\n      end\n    end\n    return objList\n  end\n\n  -- searches the specified area\n  function SearchLib.inArea(pos, rot, size, filter, debug)\n    return returnSearchResult(pos, rot, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area on an object\n  function SearchLib.onObject(obj, filter, scale, debug)\n    scale      = scale or 1\n    local pos  = obj.getPosition() + Vector(0, 1, 0) -- offset by half the cast's height\n    local size = obj.getBounds().size:scale(scale):setAt(\"y\", 2)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the area directly below an object\n  function SearchLib.belowObject(obj, filter, scale, debug)\n    scale        = scale or 1\n    local objPos = obj.getPosition()\n    local pos    = objPos + Vector(0, -objPos.y / 2, 0) -- offset by half the cast's height\n    local size   = obj.getBounds().size:scale(scale):setAt(\"y\", objPos.y)\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches the specified position (a single point)\n  function SearchLib.atPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)\n  end\n\n  -- searches below the specified position (downwards until y = 0)\n  function SearchLib.belowPosition(pos, filter, debug)\n    local size = { 0.1, 2, 0.1 }\n    local direction = { 0, -1, 0 }\n    local maxDistance = pos.y\n    return returnSearchResult(pos, nil, size, filter, direction, maxDistance, debug)\n  end\n\n  return SearchLib\nend\nend)\n__bundle_register(\"util/TableLib\", function(require, _LOADED, __bundle_register, __bundle_modules)\ndo\n  local TableLib = {}\n\n  -- Checks if a list contains an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.contains(t, ele)\n    if t == nil then return false end\n    for k, v in ipairs(t) do\n      if v == ele then return true end\n    end\n    return false\n  end\n\n  -- Copies a table (or returns the original if not a table)\n  ---@param t table\n  function TableLib.copy(t)\n    if type(t) ~= \"table\" then return t end\n    local copy = {}\n    for tKey, tValue in next, t, nil do\n      copy[TableLib.copy(tKey)] = TableLib.copy(tValue)\n    end\n    setmetatable(copy, TableLib.copy(getmetatable(t)))\n    return copy\n  end\n\n  -- Returns the index of an element\n  ---@param t table\n  ---@param ele any\n  function TableLib.getElementIndex(t, ele)\n    if t == nil then return nil end\n    for k, v in ipairs(t) do\n      if v == ele then return k end\n    end\n    return nil\n  end\n\n  -- Returns the keys of a table as new table\n  ---@param t table\n  ---@param filterValue? any Only keys with this value will be extracted\n  function TableLib.getKeys(t, filterValue)\n    local keys = {}\n    for k, v in pairs(t) do\n      if filterValue ~= nil then\n        if v == filterValue then\n          table.insert(keys, k)\n        end\n      else\n        table.insert(keys, k)\n      end\n    end\n    return keys\n  end\n\n  -- Returns a random list element\n  ---@param t table\n  function TableLib.pickRandom(t)\n    return t[math.random(#t)]\n  end\n\n  -- Returns a reversed list\n  ---@param t table\n  function TableLib.reverse(t)\n    local r = {}\n    for i = #t, 1, -1 do\n      table.insert(r, t[i])\n    end\n    return r\n  end\n\n  -- Shuffles a list in place (Fisher-Yates-Shuffle)\n  ---@param t table\n  function TableLib.shuffle(t)\n    local n = #t\n    while n > 1 do\n      local k = math.random(n)\n      t[n], t[k] = t[k], t[n]\n      n = n - 1\n    end\n    return t\n  end\n\n  -- Returns a copy of a list without duplicates\n  ---@param t table\n  function TableLib.removeDuplicates(t)\n    local seen = {}\n    local result = {}\n    for _, value in ipairs(t) do\n      if not seen[value] then\n        seen[value] = true\n        table.insert(result, value)\n      end\n    end\n    return result\n  end\n\n  return TableLib\nend\nend)\nreturn __bundle_require(\"__root\")",
          "LuaScriptState": "{\"isHelperEnabled\":false}"
        }
      ]
    }
  ]
}
