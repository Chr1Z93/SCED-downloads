{
  "GUID": "633d43",
  "Name": "Custom_Model_Bag",
  "Transform": {
    "posX": 33.389492,
    "posY": 1.48149884,
    "posZ": -2.93362761,
    "rotX": -2.461044E-08,
    "rotY": 269.9192,
    "rotZ": -2.309614E-07,
    "scaleX": 2.21,
    "scaleY": 0.46,
    "scaleZ": 2.42
  },
  "Nickname": "Wanda Maximoff, the Scarlet Witch",
  "Description": "by Adran06",
  "GMNotes": "",
  "AltLookAngle": {
    "x": 0.0,
    "y": 0.0,
    "z": 0.0
  },
  "ColorDiffuse": {
    "r": 1.0,
    "g": 1.0,
    "b": 1.0
  },
  "LayoutGroupSortIndex": 0,
  "Value": 0,
  "Locked": false,
  "Grid": true,
  "Snap": true,
  "IgnoreFoW": false,
  "MeasureMovement": false,
  "DragSelectable": true,
  "Autoraise": true,
  "Sticky": true,
  "Tooltip": true,
  "GridProjection": false,
  "HideWhenFaceDown": false,
  "Hands": false,
  "MaterialIndex": -1,
  "MeshIndex": -1,
  "CustomMesh": {
    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/62583916778515333/9F0BE0C211BE3BD1725B4B855F5D3C9C0D020394/",
    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/13842592530537824927/8D8A28A60364F4E33EEC10BBB3F29B98DEA26C7F/",
    "NormalURL": "",
    "ColliderURL": "",
    "Convex": true,
    "MaterialIndex": 3,
    "TypeIndex": 6,
    "CustomShader": {
      "SpecularColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "SpecularIntensity": 0.0,
      "SpecularSharpness": 2.0,
      "FresnelStrength": 0.0
    },
    "CastShadows": true
  },
  "Bag": {
    "Order": 0
  },
  "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"MemoryBag\", function(require, _LOADED, __bundle_register, __bundle_modules)\nfunction updateSave()\n  self.script_state = JSON.encode({ ml = memoryList, setupButton = setupButton })\nend\n\nfunction onLoad(savedData)\n  if savedData and savedData ~= \"\" then\n    local loadedData = JSON.decode(savedData)\n    memoryList = loadedData.ml\n    setupButton = loadedData.setupButton\n  end\n\n  memoryList = memoryList or {}\n  self.addContextMenuItem(\"Toggle setup button\", toggleSetupButton)\n\n  -- make sure the model is loaded so that we can use the bounds\n  Wait.condition(function()\n    Wait.frames(function()\n      generateButtonData()\n      createMemoryActionButtons()\n    end, 5)\n  end, function() return not self.loading_custom end)\nend\n\nfunction generateButtonData()\n  local selfScale = self.getScale()\n  local selfBounds = self.getBoundsNormalized()\n  buttonScale = Vector(1 / selfScale.x, 1, 1 / selfScale.z)\n\n  buttonX = math.max(selfBounds.size.x / 5, 1.5) / selfScale.x\n  buttonY = -(selfBounds.size.y / 2 + selfBounds.offset.y) / selfScale.y + 0.5\n  buttonZ = {}\n  for i = 1, 4 do\n    buttonZ[i] = (selfBounds.size.z / 2 + i * 1.15 - 0.15) / selfScale.z\n  end\n\n  local upperButtonMult = 1.1\n  buttonData = {\n    [\"Add\"]       = {\n      tooltip = \"Add highlighted objects to memory\",\n      pos = { buttonX * upperButtonMult, buttonY, -buttonZ[1] },\n      fColor = { 0.25, 1, 0.25 }\n    },\n    [\"Cancel\"]    = {\n      tooltip = \"Abort setup mode\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[1] },\n    },\n    [\"Internal\"]    = {\n      tooltip = \"Copy memory from internal bags\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[4] },\n    },\n    [\"Place\"]     = {\n      pos = { buttonX, buttonY, buttonZ[1] },\n      fSize = 350,\n      w = 1200\n    },\n    [\"Recall\"]    = {\n      pos = { -buttonX, buttonY, buttonZ[1] },\n      fSize = 350,\n      w = 1200\n    },\n    [\"Remove\"]    = {\n      tooltip = \"Remove highlighted objects from memory\",\n      pos = { buttonX * upperButtonMult, buttonY, -buttonZ[2] },\n      fColor = { 1, 0.25, 0.25 }\n    },\n    [\"Reset\"]     = {\n      tooltip = \"Completely reset memory\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[3] },\n    },\n    [\"Selection\"] = {\n      tooltip = \"Add / Remove highlight for selected objects\",\n      pos = { -buttonX * upperButtonMult, buttonY, -buttonZ[2] },\n    },\n    [\"Setup\"]     = {\n      pos = { 0, buttonY, -buttonZ[1] },\n      fSize = 350\n    },\n    [\"Update\"]   = {\n      tooltip = \"Update memory for placed objects\",\n      pos = { buttonX * upperButtonMult, buttonY, -buttonZ[3] },\n      fColor = { 0.75, 0.75, 1 }\n    }\n  }\nend\n\nfunction createButtonByName(label)\n  self.createButton({\n    label = label,\n    tooltip = buttonData[label].tooltip or \"\",\n    position = buttonData[label].pos,\n    height = buttonData[label].h or 500,\n    width = buttonData[label].w or 1500,\n    font_size = buttonData[label].fSize or 325,\n    font_color = buttonData[label].fColor or { 1, 1, 1 },\n    function_owner = self,\n    color = { 0, 0, 0 },\n    scale = buttonScale,\n    click_function = \"buttonClick_\" .. string.lower(string.gsub(label, \"%s+\", \"\"))\n  })\nend\n\n-- context menu function to toggle the setup button visibility\nfunction toggleSetupButton()\n  if setupButton then\n    setupButton = false\n    broadcastToAll(\"Setup button disabled\")\n  else\n    setupButton = true\n    broadcastToAll(\"Setup button enabled\")\n  end\n  updateSave()\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_setup()\n  tempList = {}\n  self.clearButtons()\n  createButtonsOnAllObjects()\n  createSetupActionButtons()\nend\n\nfunction broadcastFeedback(str1, count, name, str2, color)\n  local bcStr = count .. \" \" .. name\n  if str1 then\n    bcStr = str1 .. \" \" .. bcStr\n  end\n  if count ~= 1 then\n    bcStr = bcStr .. \"s\"\n  end\n  if str2 then\n    bcStr = bcStr .. \" \" .. str2\n  end\n  broadcastToAll(bcStr, color)\nend\n\nfunction createButtonsOnAllObjects()\n  buttonIndexMap = {}\n\n  local buttonCount = 0\n  for _, obj in ipairs(getObjects()) do\n    if obj ~= self and obj.type ~= \"Scripting\" and obj.type ~= \"Hand\" then\n      local objPos = obj.getPosition()\n      local objBounds = obj.getBounds()\n      local offSet = Vector(0, objBounds.size.y / 2 + 1, 0)\n      local scaleVec = Vector(-1, 1, 1)\n      local buttonPos = self.positionToLocal(objPos + offSet):scale(scaleVec)\n\n      local fName = \"selectButton_\" .. buttonCount\n      _G[fName] = function() buttonClick_selectObject(obj) end\n      self.createButton({\n        click_function = fName,\n        function_owner = self,\n        position = buttonPos,\n        height = 600,\n        width = 600,\n        color = { 0.75, 0.25, 0.25, 0.75 },\n        scale = buttonScale\n      })\n      buttonIndexMap[obj.getGUID()] = buttonCount\n      buttonCount = buttonCount + 1\n    end\n  end\nend\n\nfunction createSetupActionButtons()\n  createButtonByName(\"Cancel\")\n  createButtonByName(\"Selection\")\n  createButtonByName(\"Reset\")\n  createButtonByName(\"Internal\")\n  createButtonByName(\"Add\")\n\n  if next(memoryList) then\n    createButtonByName(\"Remove\")\n    createButtonByName(\"Update\")\n  end\nend\n\nfunction buttonClick_selectObject(obj)\n  local guid = obj.getGUID()\n  local index = buttonIndexMap[guid]\n  if not index then return end\n\n  if tempList[guid] == nil then\n    self.editButton({ index = index, color = { 0, 1, 0, 0.75 } })\n    tempList[guid] = {\n      pos = roundVector(obj.getPosition(), 3),\n      rot = roundVector(obj.getRotation(), 0),\n      lock = obj.getLock()\n    }\n    obj.highlightOn({ 0, 1, 0 })\n  else\n    self.editButton({ index = index, color = { 0.75, 0.25, 0.25, 0.75 } })\n    tempList[guid] = nil\n    obj.highlightOff()\n  end\nend\n\nfunction buttonClick_cancel()\n  broadcastToAll(\"Setup Canceled\")\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_selection(_, playerColor)\n  local objList = Player[playerColor].getSelectedObjects()\n\n  if #objList == 0 then\n    broadcastToAll(\"No objects selected!\")\n  else\n    broadcastFeedback(\"Toggled selection for\", #objList, \"object\")\n    for _, obj in ipairs(objList) do\n      buttonClick_selectObject(obj)\n    end\n  end\nend\n\nfunction buttonClick_add()\n  local count = 0\n  for _ in pairs(tempList) do\n    count = count + 1\n  end\n  broadcastFeedback(\"Added\", count, \"Object\", \"from selection\")\n\n  -- copy data from tempList to memoryList\n  for guid, entry in pairs(tempList) do\n    memoryList[guid] = entry\n  end\n\n  updateSave()\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_update()\n  local count = 0\n  for guid, entry in pairs(memoryList) do\n    local obj = getObjectFromGUID(guid)\n    if obj ~= nil then\n      count = count + 1\n      memoryList[guid] = {\n        pos = roundVector(obj.getPosition(), 3),\n        rot = roundVector(obj.getRotation(), 0),\n        lock = obj.getLock()\n      }\n    end\n  end\n  broadcastFeedback(\"Updated data for\", count, \"Object\")\n  updateSave()\nend\n\nfunction buttonClick_remove()\n  local count = 0\n  for guid in pairs(tempList) do\n    count = count + 1\n    memoryList[guid] = nil\n  end\n  broadcastFeedback(_, count, \"Object\", \"Removed\", { 1, 1, 1 })\n\n  updateSave()\n  removeAllHighlights()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_setNew()\n  local count = 0\n  for _, obj in ipairs(getObjects()) do\n    if memoryList[obj.guid] then\n      count = count + 1\n      memoryList[obj.guid].pos = roundVector(obj.getPosition(), 3)\n      memoryList[obj.guid].rot = roundVector(obj.getRotation(), 0)\n      memoryList[obj.guid].lock = obj.getLock()\n    end\n  end\n  broadcastFeedback(\"Updated Data for\", count, \"Object\", _, { 1, 1, 1 })\n  updateSave()\n  createMemoryActionButtons()\nend\n\nfunction buttonClick_reset()\n  memoryList = {}\n  updateSave()\n  removeAllHighlights()\n  broadcastToAll(\"Tool Reset\", { 1, 1, 1 })\n  self.clearButtons()\n\n  if setupButton then\n    createButtonByName(\"Setup\")\n  end\nend\n\nfunction buttonClick_internal()\n  local count = 0\n  for _, bagObj in ipairs(self.getObjects()) do\n    local data = bagObj.lua_script_state\n    if data ~= nil then\n      local j = JSON.decode(data)\n      if j ~= nil and j.ml ~= nil then\n        count = count + 1\n        for guid, entry in pairs(j.ml) do\n          memoryList[guid] = entry\n        end\n      end\n    end\n  end\n\n  if count > 0 then\n    broadcastFeedback(\"Added\", count, \"internal bag\", \"to existing memory\")\n  end\nend\n\nfunction createMemoryActionButtons()\n  self.clearButtons()\n\n  if next(memoryList) then\n    createButtonByName(\"Place\")\n    createButtonByName(\"Recall\")\n  end\n\n  if setupButton then\n    createButtonByName(\"Setup\")\n  end\nend\n\n-- Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n  local data = self.getData()\n\n  -- get names of contained objects\n  local guidToName = {}\n  for _, bagObjData in ipairs(data.ContainedObjects or {}) do\n    guidToName[bagObjData[\"GUID\"]] = bagObjData[\"Nickname\"]\n  end\n\n  local updateGuids = {}\n  local placeCount = 0\n  local moveCount = 0\n  for guid, entry in pairs(memoryList) do\n    local obj = getObjectFromGUID(guid)\n    if obj ~= nil and (obj.getName() == guidToName[guid] or guidToName[guid] == nil) then\n      -- If obj is out on the table and has the same name (or there's no contained copy), move it\n      moveCount = moveCount + 1\n      obj.setPositionSmooth(entry.pos)\n      obj.setRotationSmooth(entry.rot)\n      obj.setLock(entry.lock)\n    elseif guidToName[guid] then\n      -- If obj is inside of the bag\n      placeCount = placeCount + 1\n      local item = self.takeObject({\n        guid = guid,\n        position = entry.pos,\n        rotation = entry.rot,\n        smooth = false\n      })\n      item.setLock(entry.lock)\n\n      if obj ~= nil then\n        updateGuids[guid] = item.getGUID()\n      end\n    end\n  end\n\n  -- update memoryList if we placed an item that got a new GUID\n  if next(updateGuids) then\n    for oldGuid, newGuid in pairs(updateGuids) do\n      memoryList[newGuid] = memoryList[oldGuid]\n      memoryList[oldGuid] = nil\n    end\n    updateSave()\n  end\n\n  if placeCount > 0 then\n    broadcastFeedback(_, placeCount, \"Object\", \"Placed\", { 1, 1, 1 })\n  end\n\n  if moveCount > 0 then\n    broadcastFeedback(_, moveCount, \"Object\", \"Moved\", { 1, 1, 1 })\n  end\n\n  if placeCount == 0 and moveCount == 0 then\n    broadcastToAll(\"Bag is empty and no matching objects were found in play\", { 1, 1, 1 })\n  end\nend\n\nfunction buttonClick_recall()\n  local count = 0\n  for guid, _ in pairs(memoryList) do\n    local obj = getObjectFromGUID(guid)\n    if obj ~= nil then\n      self.putObject(obj)\n      count = count + 1\n    end\n  end\n  broadcastFeedback(_, count, \"Object\", \"Recalled\", { 1, 1, 1 })\nend\n\nfunction removeAllHighlights()\n  for _, obj in ipairs(getObjects()) do\n    obj.highlightOff()\n  end\nend\n\n-- Round vector to the Nth decimal\nfunction roundVector(vec, dec)\n  local mult = 10 ^ (dec or 0)\n  local t = {}\n  for _, k in ipairs({ \"x\", \"y\", \"z\" }) do\n    t[k] = math.floor(vec[k] * mult + 0.5) / mult\n  end\n  return t\nend\nend)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"MemoryBag\")\nend)\nreturn __bundle_require(\"__root\")",
  "LuaScriptState": "{\"ml\":{\"00b85a\":{\"lock\":false,\"pos\":{\"x\":37.073,\"y\":1.623,\"z\":70.91},\"rot\":{\"x\":0,\"y\":90,\"z\":0}},\"038f4e\":{\"lock\":false,\"pos\":{\"x\":-40.295,\"y\":1.534,\"z\":15.403},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"10dd82\":{\"lock\":false,\"pos\":{\"x\":-17.04,\"y\":1.534,\"z\":-7.65},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"2a9dcc\":{\"lock\":false,\"pos\":{\"x\":-10.814,\"y\":1.335,\"z\":10.305},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"3176ac\":{\"lock\":false,\"pos\":{\"x\":-10.699,\"y\":1.579,\"z\":7.491},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"360b2e\":{\"lock\":false,\"pos\":{\"x\":-3.929,\"y\":1.729,\"z\":5.72},\"rot\":{\"x\":0,\"y\":270,\"z\":180}},\"3f41dc\":{\"lock\":false,\"pos\":{\"x\":-43.414,\"y\":1.534,\"z\":-10.47},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"5e4560\":{\"lock\":false,\"pos\":{\"x\":-20.21,\"y\":1.534,\"z\":15.346},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"610995\":{\"lock\":false,\"pos\":{\"x\":-2.94,\"y\":1.618,\"z\":0.393},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"67ffc1\":{\"lock\":false,\"pos\":{\"x\":41.09,\"y\":1.526,\"z\":67.969},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"69f385\":{\"lock\":false,\"pos\":{\"x\":-43.44,\"y\":1.534,\"z\":7.65},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"6a0b1d\":{\"lock\":false,\"pos\":{\"x\":-16.992,\"y\":1.534,\"z\":10.279},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"6b7ba9\":{\"lock\":false,\"pos\":{\"x\":-2.183,\"y\":1.566,\"z\":15.974},\"rot\":{\"x\":0,\"y\":0,\"z\":0}},\"6cc2ce\":{\"lock\":false,\"pos\":{\"x\":-26.702,\"y\":1.56,\"z\":-1.295},\"rot\":{\"x\":0,\"y\":270,\"z\":180}},\"7757d6\":{\"lock\":false,\"pos\":{\"x\":-26.819,\"y\":1.579,\"z\":1.448},\"rot\":{\"x\":0,\"y\":270,\"z\":180}},\"780680\":{\"lock\":false,\"pos\":{\"x\":-23.64,\"y\":1.534,\"z\":-15.3},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"7a167a\":{\"lock\":false,\"pos\":{\"x\":1.694,\"y\":1.558,\"z\":14.242},\"rot\":{\"x\":0,\"y\":225,\"z\":0}},\"7a2a3c\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.486,\"z\":48},\"rot\":{\"x\":0,\"y\":270,\"z\":360}},\"7a6449\":{\"lock\":false,\"pos\":{\"x\":-10.236,\"y\":1.579,\"z\":6.932},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"7e83ab\":{\"lock\":false,\"pos\":{\"x\":-23.64,\"y\":1.534,\"z\":15.3},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"84d70e\":{\"lock\":false,\"pos\":{\"x\":-43.44,\"y\":1.534,\"z\":-7.65},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"90b00d\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.481,\"z\":60},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"90e046\":{\"lock\":false,\"pos\":{\"x\":-3.85,\"y\":1.597,\"z\":-10.39},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"91b7a1\":{\"lock\":false,\"pos\":{\"x\":-20.081,\"y\":1.534,\"z\":-15.409},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"95ac7a\":{\"lock\":false,\"pos\":{\"x\":-5.197,\"y\":1.618,\"z\":16.391},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"9ebd99\":{\"lock\":false,\"pos\":{\"x\":-2.94,\"y\":1.618,\"z\":-5.104},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"9fbab8\":{\"lock\":false,\"pos\":{\"x\":-36.84,\"y\":1.534,\"z\":15.3},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"aa6689\":{\"lock\":false,\"pos\":{\"x\":-40.432,\"y\":1.534,\"z\":-15.292},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"c89373\":{\"lock\":false,\"pos\":{\"x\":-43.329,\"y\":1.534,\"z\":10.491},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"d1beb1\":{\"lock\":false,\"pos\":{\"x\":-0.891,\"y\":1.597,\"z\":-3.966},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00002\":{\"lock\":false,\"pos\":{\"x\":41.306,\"y\":1.495,\"z\":73.246},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00003\":{\"lock\":false,\"pos\":{\"x\":-0.891,\"y\":1.597,\"z\":-7.128},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00004\":{\"lock\":false,\"pos\":{\"x\":41.222,\"y\":1.495,\"z\":70.371},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00005\":{\"lock\":false,\"pos\":{\"x\":-3.179,\"y\":1.597,\"z\":-3.966},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00020\":{\"lock\":false,\"pos\":{\"x\":-30.24,\"y\":1.534,\"z\":0},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0002d\":{\"lock\":false,\"pos\":{\"x\":-17.064,\"y\":1.534,\"z\":-10.48},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0002e\":{\"lock\":false,\"pos\":{\"x\":-36.84,\"y\":1.534,\"z\":0},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00035\":{\"lock\":false,\"pos\":{\"x\":-30.24,\"y\":1.534,\"z\":-7.65},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e0004a\":{\"lock\":false,\"pos\":{\"x\":-30.24,\"y\":1.534,\"z\":7.65},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e00059\":{\"lock\":false,\"pos\":{\"x\":-23.64,\"y\":1.534,\"z\":0},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"e09b1c\":{\"lock\":false,\"pos\":{\"x\":-17.04,\"y\":1.534,\"z\":7.65},\"rot\":{\"x\":0,\"y\":270,\"z\":0}},\"ea0620\":{\"lock\":false,\"pos\":{\"x\":-36.84,\"y\":1.534,\"z\":-15.3},\"rot\":{\"x\":0,\"y\":270,\"z\":0}}},\"setupButton\":false}",
  "XmlUI": "",
  "Rigidbody": {
    "Mass": 1.0,
    "Drag": 0.1,
    "AngularDrag": 0.1,
    "UseGravity": true
  },
  "ContainedObjects": [
    {
      "GUID": "e00002",
      "Name": "Card",
      "Transform": {
        "posX": 41.3058739,
        "posY": 1.49510384,
        "posZ": 73.24598,
        "rotX": -1.94148328E-07,
        "rotY": 270.0,
        "rotZ": 2.23100116E-07,
        "scaleX": 0.8214286,
        "scaleY": 1.0,
        "scaleZ": 0.8214286
      },
      "Nickname": "Wanda Maximoff",
      "Description": "The Scarlet Witch",
      "GMNotes": "{\"TtsZoopGuid\":\"aa79c89d-3f9b-469a-a430-ecf7ff5ab805\",\"id\":\"aa79c89d-3f9b-469a-a430-ecf7ff5ab805\",\"type\":\"Investigator\",\"class\":\"Mystic\",\"traits\":\"Sorcerer. Drifter. Chosen.\",\"agilityIcons\":2,\"combatIcons\":3,\"intellectIcons\":3,\"willpowerIcons\":4,\"signatures\":[{\"signatures\":{\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\":4,\"3d51d71b-ac3c-4a3e-8a6f-fb5d4e3d021a\":1}}]}",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Tags": [
        "Investigator",
        "PlayerCard"
      ],
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 100000,
      "SidewaysCard": false,
      "CustomDeck": {
        "1000": {
          "FaceURL": "https://www.dropbox.com/scl/fi/jfn8wg6oyq7p12mgrtznf/Chaos-Mage-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=p5l8e44vfx49yoemamhhn00im&raw=1&cachebust=1744835811401",
          "BackURL": "https://www.dropbox.com/scl/fi/5ungshh64dpjwlxvo4fmu/Chaos-Mage-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=gs54z68hggvwqkznbphxziybm&raw=1&cachebust=1744835813439",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "67ffc1",
      "Name": "Deck",
      "Transform": {
        "posX": 41.0899544,
        "posY": 1.52649963,
        "posZ": 67.9694443,
        "rotX": 6.985259E-07,
        "rotY": 270.000122,
        "rotZ": -5.96554457E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Tags": [
        "Asset",
        "PlayerCard"
      ],
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": false,
      "SidewaysCard": false,
      "DeckIDs": [
        100200,
        100300,
        100300,
        100300,
        100300
      ],
      "CustomDeck": {
        "1002": {
          "FaceURL": "https://www.dropbox.com/scl/fi/gtk3xuqow4th8x5rwqxx0/Chaos-Magic-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=7k3wlo8buo9euwgy98z2zmceq&raw=1&cachebust=1744835814882",
          "BackURL": "https://www.dropbox.com/scl/fi/r810by63gkbmnzrcuoo33/Chaos-Magic-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=v0s70idysyp2xdhl8bdgugsw7&raw=1&cachebust=1744835817380",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        },
        "1003": {
          "FaceURL": "https://www.dropbox.com/scl/fi/bu3pj77qmufv18tfgz7to/Winds-of-Destiny-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=zawas3nhuuunme3ayhhhr3a1k&raw=1&cachebust=1744835818765",
          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "e00006",
          "Name": "Card",
          "Transform": {
            "posX": -0.51879853,
            "posY": 0.97353375,
            "posZ": -0.424932539,
            "rotX": -0.000770388753,
            "rotY": 269.999847,
            "rotZ": 0.00480214925,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Chaos Magic",
          "Description": "",
          "GMNotes": "{\"TtsZoopGuid\":\"3d51d71b-ac3c-4a3e-8a6f-fb5d4e3d021a\",\"id\":\"3d51d71b-ac3c-4a3e-8a6f-fb5d4e3d021a\",\"type\":\"ScenarioReference\",\"class\":\"Mythos\",\"tokens\":{\"front\":{\"Cultist\":{\"modifier\":-999,\"description\":\"The next time you reveal a chaos token this round, you may cancel that chaos token and return it to the bag. If you do, reveal a new chaos token.\"},\"Skull\":{\"modifier\":-999,\"description\":\"Draw the Xth card of a chaos deck, where X is the revealed token's modifier, or the bottom card of the chaos deck with the fewest cards. You may play that card.\"},\"Tablet\":{\"modifier\":-999,\"description\":\"Look at the top card of each chaos deck. You may commit 1 of those cards to this skill test.\"},\"Elder Thing\":{\"modifier\":-999,\"description\":\"Look at the top card of each of your decks, place any of those cards on the bottom of their decks. You may move 1 damage and/or horror from a card at your location to another card at your location.\"}},\"back\":{\"Cultist\":{\"modifier\":-999,\"description\":\"The next time you reveal a chaos token this round, reveal 2 chaos tokens instead of 1. Choose one of those tokens to resolve, and ignore the other.\"},\"Skull\":{\"modifier\":-999,\"description\":\"Look at the Xth card of a chaos deck, where X is the revealed token's modifier. Draw the Xth card of a chaos deck, or the bottom card of the chaos deck with the fewest cards. You may play that card.\"},\"Tablet\":{\"modifier\":-999,\"description\":\"Look at the top card of each chaos deck. You may commit any of those cards to this skill test.\"},\"Elder Thing\":{\"modifier\":-999,\"description\":\"Look at the top card of each of your decks, place any of those cards on the bottom of their decks and/or shuffle those decks. You may move up to 2 damage and/or horror between cards at your location.\"}}}}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "ScenarioCard"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 100200,
          "SidewaysCard": false,
          "CustomDeck": {
            "1002": {
              "FaceURL": "https://www.dropbox.com/scl/fi/gtk3xuqow4th8x5rwqxx0/Chaos-Magic-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=7k3wlo8buo9euwgy98z2zmceq&raw=1&cachebust=1744835814882",
              "BackURL": "https://www.dropbox.com/scl/fi/r810by63gkbmnzrcuoo33/Chaos-Magic-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=v0s70idysyp2xdhl8bdgugsw7&raw=1&cachebust=1744835817380",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "e00007",
          "Name": "Card",
          "Transform": {
            "posX": -0.19238767,
            "posY": 0.973593831,
            "posZ": 1.9252131,
            "rotX": -0.000118535667,
            "rotY": 269.999847,
            "rotZ": 0.00074384216,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Winds of Destiny",
          "Description": "",
          "GMNotes": "{\"TtsZoopGuid\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"id\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"cost\":0,\"willpowerIcons\":1,\"wildIcons\":2}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 100300,
          "SidewaysCard": false,
          "CustomDeck": {
            "1003": {
              "FaceURL": "https://www.dropbox.com/scl/fi/bu3pj77qmufv18tfgz7to/Winds-of-Destiny-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=zawas3nhuuunme3ayhhhr3a1k&raw=1&cachebust=1744835818765",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "41d3fb",
          "Name": "Card",
          "Transform": {
            "posX": -0.191741616,
            "posY": 1.01189446,
            "posZ": 1.69765329,
            "rotX": 0.00227023941,
            "rotY": 269.999939,
            "rotZ": 359.99234,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Winds of Destiny",
          "Description": "",
          "GMNotes": "{\"TtsZoopGuid\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"id\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"cost\":0,\"willpowerIcons\":1,\"wildIcons\":2}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 100300,
          "SidewaysCard": false,
          "CustomDeck": {
            "1003": {
              "FaceURL": "https://www.dropbox.com/scl/fi/bu3pj77qmufv18tfgz7to/Winds-of-Destiny-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=zawas3nhuuunme3ayhhhr3a1k&raw=1&cachebust=1744835818765",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "e00007",
          "Name": "Card",
          "Transform": {
            "posX": -0.299086571,
            "posY": 1.052318,
            "posZ": 2.64882374,
            "rotX": -0.00416103331,
            "rotY": 269.999939,
            "rotZ": 359.981262,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Winds of Destiny",
          "Description": "",
          "GMNotes": "{\"TtsZoopGuid\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"id\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"cost\":0,\"willpowerIcons\":1,\"wildIcons\":2}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 100300,
          "SidewaysCard": false,
          "CustomDeck": {
            "1003": {
              "FaceURL": "https://www.dropbox.com/scl/fi/bu3pj77qmufv18tfgz7to/Winds-of-Destiny-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=zawas3nhuuunme3ayhhhr3a1k&raw=1&cachebust=1744835818765",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "e00007",
          "Name": "Card",
          "Transform": {
            "posX": 0.513174355,
            "posY": 1.05989921,
            "posZ": 1.814702,
            "rotX": 0.0005390697,
            "rotY": 269.999939,
            "rotZ": -0.000407468644,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Winds of Destiny",
          "Description": "",
          "GMNotes": "{\"TtsZoopGuid\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"id\":\"8b32eb09-f63b-4d1c-86a5-eebe772821f6\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent.\",\"cost\":0,\"willpowerIcons\":1,\"wildIcons\":2}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 100300,
          "SidewaysCard": false,
          "CustomDeck": {
            "1003": {
              "FaceURL": "https://www.dropbox.com/scl/fi/bu3pj77qmufv18tfgz7to/Winds-of-Destiny-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=zawas3nhuuunme3ayhhhr3a1k&raw=1&cachebust=1744835818765",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "e00004",
      "Name": "Card",
      "Transform": {
        "posX": 41.22176,
        "posY": 1.49510384,
        "posZ": 70.37094,
        "rotX": -1.59692843E-06,
        "rotY": 270.000061,
        "rotZ": 1.04921844E-06,
        "scaleX": 0.6,
        "scaleY": 1.0,
        "scaleZ": 0.6
      },
      "Nickname": "Wanda Maximoff",
      "Description": "",
      "GMNotes": "{\"TtsZoopGuid\":\"16764c8e-6d9a-4245-92ab-fb1603e6c92f\",\"id\":\"aa79c89d-3f9b-469a-a430-ecf7ff5ab805-m\",\"type\":\"Minicard\"}",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Tags": [
        "Minicard",
        "ScenarioCard"
      ],
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 100100,
      "SidewaysCard": false,
      "CustomDeck": {
        "1001": {
          "FaceURL": "https://www.dropbox.com/scl/fi/0gzb4f4bj08gp1pdbu404/Scarlet-Witch-mini-resolution-300-compressionquality-1.00-bleed-0.0-Front.png?rlkey=zmzcq1wch7k7oi3bvfwd2nn1p&raw=1&cachebust=1730176499301",
          "BackURL": "https://www.dropbox.com/scl/fi/o8yuos6yehfb5t0dkshpc/Scarlet-Witch-mini-resolution-300-compressionquality-1.00-bleed-0.0-Back.png?rlkey=qgriq6amuqxhmhe4oq8ljsbbp&raw=1&cachebust=1730176502468",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": true,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "00b85a",
      "Name": "Custom_Model_Bag",
      "Transform": {
        "posX": 37.0732155,
        "posY": 1.62349892,
        "posZ": 70.90959,
        "rotX": -8.14373266E-07,
        "rotY": 90.00003,
        "rotZ": 4.26758362E-07,
        "scaleX": 3.54999781,
        "scaleY": 3.54999781,
        "scaleZ": 3.54999781
      },
      "Nickname": "Deck Splitter",
      "Description": "By: MrStump",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.9999998,
        "g": 0.992160261,
        "b": 0.9999998
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Number": 0,
      "CustomMesh": {
        "MeshURL": "http://pastebin.com/raw/mxW2ba0r",
        "DiffuseURL": "http://i.imgur.com/SGRhJHC.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 1,
        "TypeIndex": 6,
        "CustomShader": {
          "SpecularColor": {
            "r": 0.8745098,
            "g": 0.8117647,
            "b": 0.745098054
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 3.0,
          "FresnelStrength": 0.1
        },
        "CastShadows": true
      },
      "Bag": {
        "Order": 0
      },
      "LuaScript": "--[[ Deck Splitter by MrStump ]]--\r\n\r\n--Distance used between cards. Scales with card size, probably would only need changing with special cards\r\ncardOffset = 2.5\r\n\r\n--[[Runs on start]]\r\nfunction onload()\r\n    deckRegistered = false\r\n    suspendDetection = false\r\r\nend\r\n\r\n--[[Runs every time anything touches the bag (or it touches anything)]]\r\nfunction onCollisionEnter(collisionInfo)\r\n    --Get the name of the object touching the bag and check if it is that of a deck/custom deck\r\n    local collidingObject = collisionInfo.collision_object\r\n    local collidingObjectName = tostring(collidingObject)\r\n    local deckType1 = 'Deck(Clone) (LuaGameObjectScript)'\r\n    local deckType2 = 'DeckCustom(Clone) (LuaGameObjectScript)'\r\n    if collidingObjectName == deckType1 or collidingObjectName == deckType2 then\r\n        --Gets number of items in this tool\r\n        local decksInBag = #self.getObjects()\r\n        --Initializes the tool, creating variables for later use\r\n        if decksInBag == 1 and deckRegistered == false then\r\n            deck = collidingObject\r\n            deckCount = deck.getQuantity()\r\n            distanceScale = deck.getScale().x\r\n            deckRegistered = true\r\n            stacks = 2\r\n            cards = math.floor(deckCount/2)\r\n            spawnButtons()\r\n        --Runs if you put other objects in the bag before the deck\r\n        elseif decksInBag > 1 then\r\n            broadcastToAll('Too many decks/objects in the deck splitting tool.\\nPlease remove all objects and try again.', {1,1,1})\r\n            resetTool()\r\n        end\r\n    end\r\nend\r\n\r\n--[[Creates the buttons]]\r\nfunction spawnButtons()\r\n    buttonParams.countDisplay.label = 'Cards In Deck: ' .. deckCount\r\n    buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n    buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n    for i, v in pairs(buttonParams) do\r\n        self.createButton(v)\r\n    end\r\nend\r\n\r\n--[[Clears all information]]\r\nfunction resetTool()\r\n    deckRegistered = false\r\n    self.clearButtons()\r\nend\r\n\r\n--[[Watches for a deck to be removed by the player, resetting the tool.]]\r\nfunction update()\r\n    --suspendDetection is only true when the script is removing the deck(to split out cards)\r\n    if suspendDetection == false then\r\n        --deckRegistered is only true when 1 and only 1 deck is in the tool\r\n        --#self.getObjects() is seeing if there are 0 decks in the tool\r\n        if deckRegistered == true and #self.getObjects() == 0 then\r\n            resetTool()\r\n        end\r\n    end\r\nend\r\n\r\n--[[These 4 functions are the + and - for the stacks. Sets our desired # of stacks]]\r\nfunction stacksP1()\r\n    --Makes sure we don't try to make more stacks than we have cards\r\n    if stacks < deckCount then\r\n        stacks = stacks + 1\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction stacksP5()\r\n    if stacks < (deckCount - 4) then\r\n        stacks = stacks + 5\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction stacksM1()\r\n    --Makes sure we never go below 2 stacks.\r\n    if stacks > 2 then\r\n        stacks = stacks - 1\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction stacksM5()\r\n    if stacks > 6 then\r\n        stacks = stacks - 5\r\n        cards = math.floor(deckCount/stacks)\r\n        buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\n\r\n--[[These 4 functions are the + and - for cards (number of cards in a stack).]]\r\nfunction cardsP1()\r\n    --Makes sure we can't put more cards into a pile than is possible\r\n    if cards < math.floor(deckCount/stacks) then\r\n        cards = cards + 1\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction cardsP5()\r\n    if cards < (math.floor(deckCount/stacks) - 4) then\r\n        cards = cards + 5\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction cardsM1()\r\n    if cards > 1 then\r\n        cards = cards - 1\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\nfunction cardsM5()\r\n    if cards > 5 then\r\n        cards = cards - 5\r\n        buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n        updateButtons()\r\n    end\r\nend\r\n\r\nfunction updateButtons()\r\n    for i, v in pairs(buttonParams) do\r\n        self.editButton(v)\r\n        if i==3 then\r\n            break\r\n        end\r\n    end\r\nend\r\n\r\n--[[Activated by button press, starts the process of pulling the deck out of the bag.\r\n    We cannot edit items while they are in a bag (they don't exist) so this is required first.]]\r\nfunction splitDeck()\r\n    --This prevents the tool from thinking the player removed the deck (see function update())\r\n    suspendDetection = true\r\n    --We Figure out where the tool is and add 1 to its y axis.\r\n    local selfPosition = self.getPosition()\r\n    local x = selfPosition.x\r\n    local y = selfPosition.y+2\r\n    local z = selfPosition.z\r\n    --This param removes the deck from the bag. The callback is a function that runs once it has existed and loaded the bag\r\n    local deckTakeParam = {position={x,y,z}, rotation={180,0,0}, callback='dealCards', callback_owner=self}\r\n    deck = self.takeObject(deckTakeParam)\r\nend\r\n\r\n--[[Callback function, triggered by the script pulling the deck out of the bag]]\r\nfunction dealCards()\r\n    --Loop, runs once for each card we want in each stack\r\n    for i=1, cards do\r\n        --Loop, runs once for each stack we want.\r\n        for j=1, stacks do\r\n            --Get own position and rotation, for positioning/rotation of cards\r\n            local selfPosition = self.getPosition()\r\n            local selfRotation = self.getRotation()\r\n            --This determines their rotation relative to the tool (face down)\r\n            local xRot = selfRotation.x\r\n            local yRot = selfRotation.y\r\n            local zRot = selfRotation.z\r\n            --This determines their position relative to the tool's facing\r\n            local x = selfPosition.x + math.sin( (90+yRot)*0.0174532 ) * ((0.8*self.getScale().x/distanceScale)+(cardOffset*j*distanceScale))-- see end of code for breakdown\r\n            local y = selfPosition.y + 1\r\n            local z = selfPosition.z + math.cos( (90+yRot)*0.0174532 ) * ((0.8*self.getScale().x/distanceScale)+(cardOffset*j*distanceScale))-- see end of code for breakdown\r\n            --This sets the parameters for where to place each card\r\n            local takeParam = {position={x,y,z}, rotation={xRot+180, yRot, zRot}}\r\n            deck.takeObject(takeParam)\r\n        end\r\n    end\r\n    deckCount = deck.getQuantity()\r\n    if stacks > deckCount then\r\n        stacks = deckCount\r\n        cards = math.floor(deckCount/stacks)\r\n    elseif deckCount < (stacks*cards) then\r\n        cards = math.floor(deckCount/stacks)\r\n    end\r\n    buttonParams.countDisplay.label = 'Cards In Deck: ' .. deckCount\r\n    buttonParams.stacksDisplay.label = 'STACKS:\\n' .. stacks\r\n    buttonParams.cardsDisplay.label = 'CARDS:\\n' .. cards\r\n    updateButtons()\r\n    Timer.destroy(self.getGUID())\r\n    Timer.create({identifier=self.getGUID(), function_name='afterEntry', function_owner=self, delay=0.5})\r\nend\r\n\r\nfunction afterEntry()\r\n    suspendDetection = false\r\nend\r\n\r\nbuttonParams = {\r\n    countDisplay = {\r\n        index=0, label='Cards In Deck: -', click_function='none', function_owner=self,\r\n        position={0,0.04,0.54}, rotation={0,180,0}, width=0, height=0, font_size=60\r\n    },\r\n    stacksDisplay = {\r\n        index=1, label='STACKS:\\n-', click_function='none', function_owner=self,\r\n        position={0,0.08,0.22}, rotation={0,180,0}, width=310, height=200, font_size=70\r\n    },\r\n    cardsDisplay = {\r\n        index=2, label='CARDS:\\n-', click_function='none', function_owner=self,\r\n        position={0,0.08,-0.22}, rotation={0,180,0}, width=310, height=200, font_size=70\r\n    },\r\n    instruction = {\r\n        label='Stacks first, Cards second', click_function='none', function_owner=self,\r\n        position={0,0.04,-0.54}, rotation={0,180,0}, width=0, height=0, font_size=60\r\n    },\r\n    split = {\r\n        label='^^^ SPLIT DECK ^^^', click_function='splitDeck', function_owner=self,\r\n        position={-1.05,0,0}, rotation={0,-90,0}, width=580, height=65, font_size=60\r\n    },\r\n    stacksP1 = {\r\n        label='+1', click_function='stacksP1', function_owner=self,\r\n        position={-0.45,0.08,0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    stacksP5 = {\r\n        label='+5', click_function='stacksP5', function_owner=self,\r\n        position={-0.722,0.08,0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    },\r\n    stacksM1 = {\r\n        label='-1', click_function='stacksM1', function_owner=self,\r\n        position={0.45,0.08,0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    stacksM5 = {\r\n        label='-5', click_function='stacksM5', function_owner=self,\r\n        position={0.722,0.08,0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    },\r\n    cardsP1 = {\r\n        label='+1', click_function='cardsP1', function_owner=self,\r\n        position={-0.45,0.08,-0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    cardsP5 = {\r\n        label='+5', click_function='cardsP5', function_owner=self,\r\n        position={-0.722,0.08,-0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    },\r\n    cardsM1 = {\r\n        label='-1', click_function='cardsM1', function_owner=self,\r\n        position={0.45,0.08,-0.22}, rotation={0,180,0}, width=120, height=160, font_size=50\r\n    },\r\n    cardsM5 = {\r\n        label='-5', click_function='cardsM5', function_owner=self,\r\n        position={0.722,0.08,-0.22}, rotation={0,180,0}, width=120, height=120, font_size=50\r\n    }\r\n}\r\n\r\n--[[ Breakdown of how I determined where to place the cards.\r\n\r\n    local x = selfPosition.x + math.sin( (90+yRot)*0.0174532 ) * ((1.2/distanceScale)+(cardOffset*j*distanceScale))\r\n    x is the x position of where I want the card, relative to which direction the object (self) is facing.\r\n    math.sin(yRot*0.0174532) * distance ~~~ This is the core formula at work here. In combination with using math.cos on the z axis.\r\n    sin+cos on x/z are converting an angle (yRot) into a direction. Then we multiply that by a distance to get an x/z.\r\n    ((1.2/distanceScale)+(cardOffset*j*distanceScale)) ~~~ this is my distance calculation, made to scale with each card.\r\n    the first half (1.2/distanceScale) figures out how far offset we need to make the first card, taking into account its scale.\r\n        that way, a really huge card won't accidently go right back int othe tool.\r\n    the second half (cardOffset*j*distanceScale) multiplies an offset (how far each pile should be from eachother) by j (j=1 for first pile, j=2 second pile ,etc)\r\n        then we multiply that by the scale modifier so, again, big cards don't even up overlapping/smashing into eachother\r\n    The reason for the 90+ is because without it, the cards would come out the TOP. So by adding 90, we're rotating the direction by 90 degrees clockwise.\r\n\r\n    I hope this helps.\r\n]]\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}