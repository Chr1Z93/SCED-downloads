{
  "GUID": "3aad1d",
  "Name": "Custom_Model_Bag",
  "Transform": {
    "posX": -2.68281354e-07,
    "posY": 0.9600001,
    "posZ": 0.428634346,
    "rotX": -2.80941572e-06,
    "rotY": 180.0,
    "rotZ": 1.01868263e-05,
    "scaleX": 1.754106,
    "scaleY": 0.365108132,
    "scaleZ": 1.92078626
  },
  "Nickname": "The Fathomless Sea Investigator Expansion",
  "GMNotes": "fancreations/investigators_touhou_project.json",
  "ColorDiffuse": {
    "r": 1.0,
    "g": 1.0,
    "b": 1.0
  },
  "HideWhenFaceDown": false,
  "Hands": false,
  "CustomMesh": {
    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/62583916778515333/9F0BE0C211BE3BD1725B4B855F5D3C9C0D020394/",
    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2270441279724040683/879A5C80392D16C2D6CACC7A7F64F10EA8BDE44B/",
    "MaterialIndex": 3,
    "TypeIndex": 6,
    "CustomShader": {
      "SpecularColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "SpecularIntensity": 0.0,
      "SpecularSharpness": 2.0,
      "FresnelStrength": 0.0
    }
  },
  "Bag": {
    "Order": 2
  },
  "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.5.2\n-- Fork of Memory Bag 2.0 by MrStump\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n  local bagObjList = self.getObjects()\n  for _, bagObj in ipairs(bagObjList) do\n    local data = bagObj.lua_script_state\n      if data ~= nil then\n        local j = JSON.decode(data)\n        if j ~= nil and j.ml ~= nil then\n          for guid, entry in pairs(j.ml) do\n            memoryList[guid] = entry\n          end\n        end\n      end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.1,-2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n  local objTable = {}\n  local curObj = {}\n\n  for guid in pairs(memoryListBackup) do\n    curObj = getObjectFromGUID(guid)\n    table.insert(objTable, curObj)\n  end\n\n  return objTable\n  -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n      objsToHaveButtons = getAllObjectsInMemory()\n    else\n      objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            local dummyIndex = howManyButtons\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor + 2\n            objPos.z = objPos.z * globalScaleFactor * 0.9\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(dummyIndex, obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n              color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=500, width=500,\n                color=color,\n            })\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n      position={-0.6,0.1,-2.1}, rotation={0,0,0}, height=220, width=550,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={-0.6,0.3,-2.5}, rotation={0,0,0}, height=220, width=550,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n      self.createButton({\n          label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n          position={0.6,0.3,-2.1}, rotation={0,0,0}, height=220, width=550,\n          font_size=130, color={0,0,0}, font_color={0.25,1,0.25}\n      })\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0.6,0.3,-2.9}, rotation={0,0,0}, height=220, width=550,\n                font_size=130, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0.6,0.3,-2.5}, rotation={0,0,0}, height=220, width=550,\n                font_size=130, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-0.6,0.3,-2.9}, rotation={0,0,0}, height=220, width=550,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(index, obj, move)\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n       theList = moveList\n       if previousGuid ~= nil and previousGuid ~= selectedGuid then\n         local prevObj = getObjectFromGUID(previousGuid)\n         prevObj.highlightOff()\n         self.editButton({index=previousIndex, color=colorMove})\n         theList[previousGuid] = nil\n       end\n       previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock()\n        }\n        obj.highlightOn({0,1,0})\n    else\n      color = {0.75,0.25,0.25,0.6}\n      if move == true then\n        color = colorMove\n      end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n      memoryList = memoryListBackup\n      broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n  for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n        broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n        self.clearButtons()\n        createMemoryActionButtons()\n        local count = 0\n        for guid in pairs(memoryList) do\n            count = count + 1\n            memoryListBackup[guid] = nil\n            local obj = getObjectFromGUID(guid)\n            if obj ~= nil then obj.highlightOff() end\n        end\n        broadcastToAll(count..\" Objects Removed\", {1,1,1})\n        memoryList = memoryListBackup\n        updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    self.clearButtons()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0.6,0.1,2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={-0.6,0.1,2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.1,-2.1}, rotation={0,0,0}, height=220, width=500,\n        font_size=130, color={0,0,0}, font_color={1,1,1}\n    })\n---    self.createButton({\n---      label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n---      position={-2.8,0.3,0}, rotation={0,0,0}, height=350, width=800,\n---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n---    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n\tlocal objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n\tlocal x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n\tlocal z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n\t--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n\tlocal angle = math.rad(obj.getRotation().y)\n  local x = desiredPos.x * math.sin(angle)\n\tlocal z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend",
  "LuaScriptState": "{\"ml\":{\"0b772e\":{\"lock\":false,\"pos\":{\"x\":67.127,\"y\":1.2965,\"z\":4.8781},\"rot\":{\"x\":0,\"y\":89.9682,\"z\":0}},\"32f079\":{\"lock\":false,\"pos\":{\"x\":66.8011,\"y\":1.2965,\"z\":-8.7791},\"rot\":{\"x\":0,\"y\":89.9583,\"z\":0}},\"3eaf15\":{\"lock\":false,\"pos\":{\"x\":66.9747,\"y\":1.2965,\"z\":-4.3731},\"rot\":{\"x\":0,\"y\":89.9696,\"z\":0}},\"446a11\":{\"lock\":false,\"pos\":{\"x\":67.2645,\"y\":1.2965,\"z\":9.2486},\"rot\":{\"x\":0,\"y\":89.9686,\"z\":0}},\"95d06c\":{\"lock\":false,\"pos\":{\"x\":66.7132,\"y\":1.2965,\"z\":-13.5932},\"rot\":{\"x\":0,\"y\":89.9813,\"z\":0}},\"ca3de1\":{\"lock\":false,\"pos\":{\"x\":67.0017,\"y\":1.2965,\"z\":0.2606},\"rot\":{\"x\":0,\"y\":89.9707,\"z\":0}},\"f4af40\":{\"lock\":false,\"pos\":{\"x\":67.4227,\"y\":1.2965,\"z\":13.2389},\"rot\":{\"x\":0,\"y\":89.995,\"z\":0}}}}",
  "ContainedObjects": [
    {
      "GUID": "0b772e",
      "Name": "Bag",
      "Transform": {
        "rotX": 1.783663e-06,
        "rotY": 89.96802,
        "rotZ": -1.23503571e-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Seeker",
      "Description": "By Directsun",
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.17199558
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.7.0\n-- Fork of Memory Bag 2.0 by MrStump\n--\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\n\nCONFIG = {\n    MEMORY_GROUP = {\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\n        -- This gives the other bags time to recall their objects.\n        -- The delay ONLY occurs if other bags have objects out.\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30,\n    },\n}\n\n\n--[[ Memory Bag Groups ]]-------------------------------------------------------\n--[[\nUtility Memory Bags may be added to a named group, called a \"memory group\".\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\nOnly one bag from a group may have it's contents placed on the table at a time.\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\nBy default a memory bag is not in any group. It's memory group is \"nil\".\n--]]\n\nmemoryGroupName = {memoryBag=self}\nfunction memoryGroupName:get()\n    return self._name\nend\nfunction memoryGroupName:set(newName)\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\n\n    if newName == \"\" then\n        self._name = nil\n    else\n        self._name = newName\n    end\nend\n\n-- Click the \"Recall\" button on all other bags in my memory group.\nfunction recallOtherBagsInMyGroup()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        bag.call('buttonClick_recall')\n    end\nend\n\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\nfunction anyOtherBagsInMyGroupArePlaced()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        local state = bag.call('areAnyOfMyObjectsPlaced')\n        if state then return true end\n    end\n\n    return false\nend\n\n-- Return \"true\" if at least one object from this memory bag is out on the table.\nfunction areAnyOfMyObjectsPlaced()\n    for guid,_ in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then\n            return true\n        end\n    end\n    return false\nend\n\nfunction getOtherBagsInMyGroup()\n    local bags = {}\n    for bagGuid,_ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\n        if bagGuid ~= self.getGUID() then\n            bag = getObjectFromGUID(bagGuid)\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\n            if bag ~= nil then\n                table.insert(bags, bag)\n            end\n        end\n    end\n    return bags\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the names & guids of all memory bag groups.\nThe global variable is a table and holds data like this:\n{\n    'My First Group Name' = {\n        '805ebd' = {},\n        '35cc21' = {},\n        'fc8886' = {},\n    },\n    'My Second Group Name' = {\n        'f50264' = {},\n        '5f5f63' = {},\n    },\n}\n--]]\nGlobalMemoryGroups = {\n    NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups',\n}\n\n-- Call me inside this script's \"onLoad()\" method!\nfunction GlobalMemoryGroups:onLoad(myGuid)\n    -- Create and initialize the global variable if it doesn't already exist:\n    if self:_getGroups() == nil then\n        self:_setGroups({})\n    end\nend\n\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\nfunction GlobalMemoryGroups:getGroup(groupName)\n    guids = self:_getGroups()[groupName] or {}\n    return guids\nend\n\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\n    if groupName == nil or groupName == \"\" then\n        return\n    end\n\n    self:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    groups[groupName][bagGuid] = {}\n    self:_setGroups(groups)\nend\n\n-- Removes this bag from the memory group.\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\n    local groups = self:_getGroups()\n    local group = groups[groupName]\n    if group ~= nil then\n        group[bagGuid] = nil\n        self:_setGroups(groups)\n    end\nend\n\n-- Return the global variable, which is a table holding all memory group names & guids.\nfunction GlobalMemoryGroups:_getGroups()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\nend\n\n-- Override the global variable (i.e. the entire table).\nfunction GlobalMemoryGroups:_setGroups(newTable)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\nend\n\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    if groups[groupName] == nil then\n        groups[groupName] = {}\n        self:_setGroups(groups)\n    end\nend\n\n\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\ngroupNameInput = {\n    greyedOutText = \"Group Name\",\n    widthPerCharacter = 100,\n    padding = 4,\n    memoryBag=self,\n}\nfunction groupNameInput:create(optionalStartingValue)\n    local effectiveText = optionalStartingValue or self.greyedOutText\n    local width = self:computeWidth(effectiveText)\n\n    self.memoryBag.createInput({\n        label=self.greyedOutText,\n        value=optionalStartingValue or nil,\n        alignment=3, -- Center aligned\n        input_function=\"groupNameInput_onCharacterTyped\", function_owner=self.memoryBag,\n        position={2.1,0.3,0}, rotation={0,270,0}, width=width, height=350,\n        font_size=250, color={0,0,0}, font_color={1,1,1},\n    })\nend\nfunction groupNameInput:computeWidth(text)\n    return (string.len(text) + self.padding) * self.widthPerCharacter\nend\nfunction groupNameInput:updatedWidth(text)\n    self.memoryBag.editInput({\n        index=0,\n        width=self:computeWidth(text)\n    })\nend\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\n    if stillEditing then\n        self:updatedWidth(text)\n    else\n        if text == \"\" then\n            self:updatedWidth(self.greyedOutText)\n        end\n    end\nend\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\n    groupNameInput:onCharacterTyped(text, stillEditing)\nend\nfunction groupNameInput:setGroupNameToInputField()\n    local inputFields = self.memoryBag.getInputs()\n    if inputFields ~= nil then\n        -- Get input field 0, which corresponds to the groupNameInput.\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\n        local nameField = nil\n        for _,field in ipairs(inputFields) do\n            if field.index == 0 then\n                nameField = field\n            end\n        end\n\n        memoryGroupName:set(nameField.value)\n    end\nend\n\n\n\n\n\n--//////////////////////////////////////////////////////////////////////////////\n\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList,[\"groupName\"]=memoryGroupName:get()}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n    local bagObjList = self.getObjects()\n    for _, bagObj in ipairs(bagObjList) do\n        local data = bagObj.lua_script_state\n        if data ~= nil then\n            local j = JSON.decode(data)\n            if j ~= nil and j.ml ~= nil then\n                for guid, entry in pairs(j.ml) do\n                    memoryList[guid] = entry\n                end\n            end\n        end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    GlobalMemoryGroups:onLoad(self.getGUID())\n    AllMemoryBagsInScene:add(self.getGUID())\n\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n        memoryGroupName:set(loaded_data.groupName)\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n        memoryGroupName:set(nil)\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n    local objTable = {}\n    local curObj = {}\n\n    for guid in pairs(memoryListBackup) do\n        curObj = getObjectFromGUID(guid)\n        table.insert(objTable, curObj)\n    end\n\n    return objTable\n    -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    buttonIndexMap = {}\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n        objsToHaveButtons = getAllObjectsInMemory()\n    else\n        objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Workaround for custom PDFs\n            if obj.Book then\n                objPos.y = objPos.y + 0.5\n            end\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n                color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color=color,\n            })\n            buttonIndexMap[obj.getGUID()] = howManyButtons\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n        self.createButton({\n            label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n            position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\n        })\n\n        self.createButton({\n            label=\"Selection\", click_function=\"editDragSelection\", function_owner=self,\n            position={0,0.3,2}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={1,1,1}\n        })\n        groupNameInput:create(memoryGroupName:get())\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(obj, move)\n    local index = buttonIndexMap[obj.getGUID()]\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n        theList = moveList\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\n            local prevObj = getObjectFromGUID(previousGuid)\n            prevObj.highlightOff()\n            self.editButton({index=previousIndex, color=colorMove})\n            theList[previousGuid] = nil\n        end\n        previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock(),\n            tint=obj.getColorTint()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        if move == true then\n            color = colorMove\n        end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\nfunction editDragSelection(bagObj, player, remove)\n    local selectedObjs = Player[player].getSelectedObjects()\n    if not remove then\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            --Ignore if already in the memory list, or does not have a button\n            if index and not memoryList[obj.getGUID()] then\n                self.editButton({index=index, color={0,1,0,0.6}})\n                --Adding pos/rot to memory table\n                local pos, rot = obj.getPosition(), obj.getRotation()\n                --I need to add it like this or it won't save due to indexing issue\n                memoryList[obj.getGUID()] = {\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n                    lock=obj.getLock(),\n                    tint=obj.getColorTint()\n                }\n                obj.highlightOn({0,1,0})\n            end\n        end\n    else\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            if index and memoryList[obj.getGUID()] then\n                color = {0.75,0.25,0.25,0.6}\n                self.editButton({index=index, color=color})\n                memoryList[obj.getGUID()] = nil\n                obj.highlightOff()\n            end\n        end\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            self.clearInputs()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n        memoryList = memoryListBackup\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    groupNameInput:setGroupNameToInputField()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n    for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        memoryListBackup[guid] = nil\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n            memoryListBackup[guid].tint = obj.getColorTint()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    memoryGroupName:set(nil)\n    self.clearButtons()\n    self.clearInputs()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n        position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    if anyOtherBagsInMyGroupArePlaced() then\n        recallOtherBagsInMyGroup()\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\n    else\n        _placeObjects()\n    end\nend\n\nfunction _placeObjects()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n            obj.setColorTint(entry.tint)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    item.setColorTint(entry.tint)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n    local angle = math.rad(obj.getRotation().y)\n    local x = desiredPos.x * math.sin(angle)\n    local z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n    local mult = 10^(dec or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\nExample:\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\n--]]\nAllMemoryBagsInScene = {\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\n}\n\nfunction AllMemoryBagsInScene:add(guid)\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\n    table.insert(guids, guid)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\nend\n\nfunction AllMemoryBagsInScene:getGuidList()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\nend",
      "LuaScriptState": "{\"ml\":{\"02e831\":{\"lock\":false,\"pos\":{\"x\":57.6248,\"y\":1.4951,\"z\":-5.7828},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"046516\":{\"lock\":false,\"pos\":{\"x\":61.3032,\"y\":1.4951,\"z\":-19.5668},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0465eb\":{\"lock\":false,\"pos\":{\"x\":61.2905,\"y\":1.4951,\"z\":-3.4944},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1410ec\":{\"lock\":false,\"pos\":{\"x\":57.6249,\"y\":1.4951,\"z\":-3.4826},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"14de00\":{\"lock\":false,\"pos\":{\"x\":54.0388,\"y\":1.4951,\"z\":-26.4763},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"16356b\":{\"lock\":false,\"pos\":{\"x\":57.6116,\"y\":1.4951,\"z\":-28.7369},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"176f23\":{\"lock\":false,\"pos\":{\"x\":54.0347,\"y\":1.4951,\"z\":-5.7888},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"240a87\":{\"lock\":false,\"pos\":{\"x\":61.3037,\"y\":1.4951,\"z\":-28.7632},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2f8edd\":{\"lock\":false,\"pos\":{\"x\":57.6248,\"y\":1.4951,\"z\":-12.6828},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"323267\":{\"lock\":false,\"pos\":{\"x\":61.3036,\"y\":1.4951,\"z\":-21.8635},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"335ad6\":{\"lock\":false,\"pos\":{\"x\":57.6117,\"y\":1.4951,\"z\":-26.4366},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3dcabb\":{\"lock\":false,\"pos\":{\"x\":57.6247,\"y\":1.4951,\"z\":-8.083},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"58eda1\":{\"lock\":false,\"pos\":{\"x\":61.304,\"y\":1.4951,\"z\":-26.4631},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"646318\":{\"lock\":false,\"pos\":{\"x\":57.6171,\"y\":1.4951,\"z\":-19.5624},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6ecd7d\":{\"lock\":false,\"pos\":{\"x\":61.3037,\"y\":1.4951,\"z\":-24.1632},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"73fae5\":{\"lock\":false,\"pos\":{\"x\":57.625,\"y\":1.4951,\"z\":-1.1826},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7ca672\":{\"lock\":false,\"pos\":{\"x\":54.0414,\"y\":1.4951,\"z\":-19.5828},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"839756\":{\"lock\":false,\"pos\":{\"x\":57.617,\"y\":1.4951,\"z\":-21.8501},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"87a0ca\":{\"lock\":false,\"pos\":{\"x\":57.6246,\"y\":1.4951,\"z\":-10.3827},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"956aea\":{\"lock\":false,\"pos\":{\"x\":54.0426,\"y\":1.4951,\"z\":-3.4808},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"95df3b\":{\"lock\":false,\"pos\":{\"x\":54.0416,\"y\":1.4951,\"z\":-24.1826},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a2a1aa\":{\"lock\":false,\"pos\":{\"x\":61.2905,\"y\":1.4951,\"z\":-10.3944},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b71b6f\":{\"lock\":false,\"pos\":{\"x\":61.2904,\"y\":1.4951,\"z\":-5.7946},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bb81d3\":{\"lock\":false,\"pos\":{\"x\":61.278,\"y\":1.4951,\"z\":-12.6679},\"rot\":{\"x\":0,\"y\":270.0089,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d5f474\":{\"lock\":false,\"pos\":{\"x\":54.0421,\"y\":1.4951,\"z\":-1.1826},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"de1b30\":{\"lock\":false,\"pos\":{\"x\":57.6115,\"y\":1.4951,\"z\":-24.137},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"df2ec3\":{\"lock\":false,\"pos\":{\"x\":61.2907,\"y\":1.4951,\"z\":-1.1942},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"dfc636\":{\"lock\":false,\"pos\":{\"x\":54.0415,\"y\":1.4951,\"z\":-21.8826},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00004\":{\"lock\":false,\"pos\":{\"x\":61.2652,\"y\":1.4951,\"z\":-12.6939},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00005\":{\"lock\":false,\"pos\":{\"x\":61.2652,\"y\":1.4951,\"z\":-12.6939},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00013\":{\"lock\":false,\"pos\":{\"x\":61.2904,\"y\":1.4951,\"z\":-8.0946},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
      "ContainedObjects": [
        {
          "GUID": "02e831",
          "Name": "Card",
          "Transform": {
            "rotX": 8.77066739e-08,
            "rotY": 269.999969,
            "rotZ": 3.55012268e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Aerial Observation",
          "GMNotes": "{\"TtsZoopGuid\":\"6a773e2a-15d3-4c0e-b860-aff978bfbb31\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"agilityIcons\":1,\"intellectIcons\":1,\"cost\":2,\"level\":0,\"id\":\"6a773e2a-15d3-4c0e-b860-aff978bfbb31\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 297200,
          "CustomDeck": {
            "2972": {
              "FaceURL": "https://i.ibb.co/X78SFb9/6bbc10f5c49e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "046516",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Hazard Suit (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"79a38113-3fce-4615-8f24-a7fb96bcbaf5\",\"type\":\"Asset\",\"class\":\"Seeker\",\"traits\":\"Item. Armor. Science\",\"combatIcons\":1,\"cost\":3,\"level\":1,\"id\":\"79a38113-3fce-4615-8f24-a7fb96bcbaf5\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 320000,
          "CustomDeck": {
            "3200": {
              "FaceURL": "https://i.ibb.co/7t3rBBB/e2327650ecf0.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "0465eb",
          "Name": "Card",
          "Transform": {
            "rotX": -1.78629477e-07,
            "rotY": 270.0,
            "rotZ": 2.21952554e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Dr. Karl Oberstein",
          "Description": "Mad Scientist",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Seeker\",\"traits\":\"Ally. Science. Cursed\",\"cost\":3,\"level\":0,\"intellectIcons\":1,\"TtsZoopGuid\":\"3d59b16c-defe-4f26-b9f4-8e8abc54fc9a\",\"id\":\"3d59b16c-defe-4f26-b9f4-8e8abc54fc9a\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 670500,
          "CustomDeck": {
            "6705": {
              "FaceURL": "https://i.ibb.co/Fsc5t1F/c3c139890beb.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "1410ec",
          "Name": "Card",
          "Transform": {
            "rotX": -1.02385343e-07,
            "rotY": 270.0,
            "rotZ": -1.23462613e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Converging Leylines",
          "GMNotes": "{\"TtsZoopGuid\":\"f7c5ef10-434f-4112-b2eb-b9ac6356c3e0\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"agilityIcons\":1,\"intellectIcons\":1,\"cost\":2,\"level\":0,\"id\":\"f7c5ef10-434f-4112-b2eb-b9ac6356c3e0\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 297600,
          "CustomDeck": {
            "2976": {
              "FaceURL": "https://i.ibb.co/F8q7crP/99249931b403.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "14de00",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Erudition (5)",
          "GMNotes": "{\"TtsZoopGuid\":\"f260d04f-1213-4004-aa41-abc979129f6e\",\"type\":\"Skill\",\"class\":\"Seeker\",\"traits\":\"Innate. Developed\",\"wildIcons\":4,\"level\":5,\"intellectIcons\":5,\"id\":\"f260d04f-1213-4004-aa41-abc979129f6e\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 297300,
          "CustomDeck": {
            "2973": {
              "FaceURL": "https://i.ibb.co/Bqn47gh/49f03bfde2c0.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "16356b",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Imprint of Insanity (5)",
          "GMNotes": "{\"TtsZoopGuid\":\"6dff065d-515a-43c6-9a02-f631ab12549a\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"willpowerIcons\":1,\"cost\":2,\"level\":5,\"id\":\"6dff065d-515a-43c6-9a02-f631ab12549a\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 297900,
          "CustomDeck": {
            "2979": {
              "FaceURL": "https://i.ibb.co/8bb2FkQ/34dee55f6c54.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "176f23",
          "Name": "Card",
          "Transform": {
            "rotX": 8.77066739e-08,
            "rotY": 269.999969,
            "rotZ": 3.55012268e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Phantasmal Insight",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Seeker\",\"traits\":\"Innate. Cursed\",\"level\":0,\"intellectIcons\":1,\"willpowerIcons\":1,\"TtsZoopGuid\":\"639ca7ec-88a4-4c91-988a-ee7e3828acf0\",\"id\":\"639ca7ec-88a4-4c91-988a-ee7e3828acf0\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 670600,
          "CustomDeck": {
            "6706": {
              "FaceURL": "https://i.ibb.co/1M9jrdp/507316199612.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "240a87",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Scriptures of the Order (5)",
          "Description": "The Maelstrom Codex",
          "GMNotes": "{\"TtsZoopGuid\":\"2ddca548-6d57-4ba2-8852-7709e587b58d\",\"type\":\"Asset\",\"class\":\"Seeker\",\"traits\":\"Item. Relic. Tome. Cursed\",\"intellectIcons\":2,\"willpowerIcons\":2,\"cost\":3,\"level\":5,\"id\":\"2ddca548-6d57-4ba2-8852-7709e587b58d\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 320700,
          "CustomDeck": {
            "3207": {
              "FaceURL": "https://i.ibb.co/DV1tPnh/a76a3792bc11.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "2f8edd",
          "Name": "Card",
          "Transform": {
            "rotX": 9.70886944e-08,
            "rotY": 270.0,
            "rotZ": -1.12271053e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Amass Knowledge",
          "GMNotes": "{\"TtsZoopGuid\":\"f60ebf0c-47ac-4613-84c1-717e8cf8e517\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"intellectIcons\":1,\"willpowerIcons\":1,\"cost\":1,\"level\":0,\"id\":\"f60ebf0c-47ac-4613-84c1-717e8cf8e517\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 297800,
          "CustomDeck": {
            "2978": {
              "FaceURL": "https://i.ibb.co/0Xzf8ZP/f1ef1ba3dbbb.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "323267",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Expunge Records (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"998296d6-67b3-4845-a6bb-a891e6fdb2f1\",\"type\":\"Asset\",\"uses\":[{\"count\":5,\"token\":\"resource\",\"type\":\"Secret\"}],\"class\":\"Seeker\",\"traits\":\"Ritual. Illicit\",\"intellectIcons\":1,\"willpowerIcons\":1,\"cost\":2,\"level\":2,\"id\":\"998296d6-67b3-4845-a6bb-a891e6fdb2f1\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 319900,
          "CustomDeck": {
            "3199": {
              "FaceURL": "https://i.ibb.co/L1VGLmh/dd526f262a11.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "335ad6",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Aerial Observation (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"85a6ed44-0c9d-4cfc-96d5-6c4e54d54b24\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"agilityIcons\":2,\"intellectIcons\":1,\"cost\":2,\"level\":3,\"id\":\"85a6ed44-0c9d-4cfc-96d5-6c4e54d54b24\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 297500,
          "CustomDeck": {
            "2975": {
              "FaceURL": "https://i.ibb.co/cyFMr5H/6ec3dbb33e49.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "3dcabb",
          "Name": "Card",
          "Transform": {
            "rotX": -6.93465438e-07,
            "rotY": 270.0,
            "rotZ": 2.95270972e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Imprint of Insanity",
          "GMNotes": "{\"TtsZoopGuid\":\"1d1ee50b-164b-4073-9b98-546e75610c97\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"willpowerIcons\":1,\"cost\":2,\"level\":0,\"id\":\"1d1ee50b-164b-4073-9b98-546e75610c97\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 318900,
          "CustomDeck": {
            "3189": {
              "FaceURL": "https://i.ibb.co/5B7CLXc/5e0affe3a3d8.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "58eda1",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Research Conference (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"89351266-b0f2-403d-8d41-809ee094abd7\",\"type\":\"Asset\",\"permanent\":true,\"class\":\"Seeker\",\"traits\":\"Talent. Connection\",\"level\":3,\"id\":\"89351266-b0f2-403d-8d41-809ee094abd7\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 297400,
          "CustomDeck": {
            "2974": {
              "FaceURL": "https://i.ibb.co/vV9LzGP/c4b4c538c1f3.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "646318",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Transfusion (1)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Science\",\"cost\":1,\"level\":1,\"agilityIcons\":1,\"intellectIcons\":1,\"TtsZoopGuid\":\"90884484-b92d-4835-bcfd-66ea8242c1eb\",\"id\":\"90884484-b92d-4835-bcfd-66ea8242c1eb\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 672700,
          "CustomDeck": {
            "6727": {
              "FaceURL": "https://i.ibb.co/yX4RZQV/ad1772bcfc6f.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "6ecd7d",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Anatomy Notes (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"15b512a7-1f14-4a17-a03c-26e725207e12\",\"type\":\"Asset\",\"uses\":[{\"count\":4,\"token\":\"resource\",\"type\":\"Secret\"}],\"class\":\"Seeker\",\"traits\":\"Item. Tome. Science\",\"combatIcons\":1,\"intellectIcons\":1,\"cost\":2,\"level\":3,\"id\":\"15b512a7-1f14-4a17-a03c-26e725207e12\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 320200,
          "CustomDeck": {
            "3202": {
              "FaceURL": "https://i.ibb.co/zhwy4fG/8f2829e834ba.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "73fae5",
          "Name": "Card",
          "Transform": {
            "rotX": 3.54519258e-08,
            "rotY": 270.0,
            "rotZ": 4.433845e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Excavation",
          "GMNotes": "{\"TtsZoopGuid\":\"0c38538c-b1fd-409d-afeb-cefd873425f1\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"intellectIcons\":2,\"cost\":0,\"level\":0,\"id\":\"0c38538c-b1fd-409d-afeb-cefd873425f1\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 319300,
          "CustomDeck": {
            "3193": {
              "FaceURL": "https://i.ibb.co/DRK1bRc/f03c123f5ec1.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "7ca672",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Full Picture (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"73b87f7c-1b55-4ecd-af00-91cde4ddb7d5\",\"type\":\"Skill\",\"class\":\"Seeker\",\"traits\":\"Practiced. Expert. Fated\",\"intellectIcons\":1,\"wildIcons\":2,\"level\":2,\"agilityIcons\":1,\"id\":\"73b87f7c-1b55-4ecd-af00-91cde4ddb7d5\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 319400,
          "CustomDeck": {
            "3194": {
              "FaceURL": "https://i.ibb.co/RbHPPhj/691ca85e0379.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "839756",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Frozen Echoes (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"4a352fcb-cc07-4bc0-8708-432f5683a5e4\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"combatIcons\":1,\"intellectIcons\":1,\"cost\":0,\"level\":1,\"id\":\"4a352fcb-cc07-4bc0-8708-432f5683a5e4\",\"agilityIcons\":1}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 319600,
          "CustomDeck": {
            "3196": {
              "FaceURL": "https://i.ibb.co/wWdqMRd/c1d88b456564.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "87a0ca",
          "Name": "Card",
          "Transform": {
            "rotX": 9.70886944e-08,
            "rotY": 270.0,
            "rotZ": -1.12271053e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Stealthy Scour",
          "GMNotes": "{\"TtsZoopGuid\":\"e785f7f9-368e-4400-aeb5-04c763fffd8d\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight. Gambit\",\"agilityIcons\":1,\"intellectIcons\":1,\"cost\":3,\"level\":0,\"id\":\"e785f7f9-368e-4400-aeb5-04c763fffd8d\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 320500,
          "CustomDeck": {
            "3205": {
              "FaceURL": "https://i.ibb.co/dJdW6gk/5dd3dc6d529c.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "956aea",
          "Name": "Card",
          "Transform": {
            "rotX": -2.07081428e-07,
            "rotY": 270.0,
            "rotZ": 6.38796038e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Full Picture",
          "GMNotes": "{\"TtsZoopGuid\":\"28808a9e-e46a-424d-a570-f290ff81cd53\",\"type\":\"Skill\",\"class\":\"Seeker\",\"traits\":\"Practiced. Fated\",\"intellectIcons\":1,\"wildIcons\":1,\"level\":0,\"agilityIcons\":1,\"id\":\"28808a9e-e46a-424d-a570-f290ff81cd53\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 319700,
          "CustomDeck": {
            "3197": {
              "FaceURL": "https://i.ibb.co/zVnKvBP/a17af611638a.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "95df3b",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Panopticon (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"00318c5d-09c8-4560-a731-846dc7833278\",\"type\":\"Skill\",\"class\":\"Seeker\",\"traits\":\"Expert\",\"agilityIcons\":2,\"intellectIcons\":2,\"level\":3,\"id\":\"00318c5d-09c8-4560-a731-846dc7833278\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 319500,
          "CustomDeck": {
            "3195": {
              "FaceURL": "https://i.ibb.co/sb28Pv2/ef6967a3bce6.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "a2a1aa",
          "Name": "Card",
          "Transform": {
            "rotX": 9.70886944e-08,
            "rotY": 270.0,
            "rotZ": -1.12271053e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Alien Astrolabe",
          "GMNotes": "{\"TtsZoopGuid\":\"ed0e8a63-2247-4258-a9f2-ebf5863cf3a5\",\"type\":\"Asset\",\"uses\":[{\"count\":8,\"token\":\"resource\",\"type\":\"Secret\"}],\"class\":\"Seeker\",\"traits\":\"Item. Tool. Science\",\"intellectIcons\":1,\"cost\":3,\"level\":0,\"id\":\"ed0e8a63-2247-4258-a9f2-ebf5863cf3a5\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 319800,
          "CustomDeck": {
            "3198": {
              "FaceURL": "https://i.ibb.co/61C55Hm/35e30f15ad34.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b71b6f",
          "Name": "Card",
          "Transform": {
            "rotX": 8.861976e-08,
            "rotY": 269.999969,
            "rotZ": 2.06678177e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Wise Owl",
          "GMNotes": "{\"TtsZoopGuid\":\"273e77e9-da68-4de4-b682-247752e25f13\",\"type\":\"Asset\",\"class\":\"Seeker\",\"traits\":\"Ally. Creature\",\"intellectIcons\":1,\"cost\":2,\"level\":0,\"id\":\"273e77e9-da68-4de4-b682-247752e25f13\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 320100,
          "CustomDeck": {
            "3201": {
              "FaceURL": "https://i.ibb.co/P6B4b8Q/6ffb8aece7cd.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "bb81d3",
          "Name": "Card",
          "Transform": {
            "rotX": 4.96102039e-08,
            "rotY": 270.0089,
            "rotZ": -1.76295686e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Malign Tome",
          "GMNotes": "{\"id\":\"f9fbf8fb-0dd8-4879-8b01-76f7afb2dc55\",\"type\":\"Asset\",\"class\":\"Seeker\",\"traits\":\"Item. Tome. Cursed\",\"cost\":1,\"level\":0,\"intellectIcons\":1,\"willpowerIcons\":1,\"TtsZoopGuid\":\"f9fbf8fb-0dd8-4879-8b01-76f7afb2dc55\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 100300,
          "CustomDeck": {
            "1003": {
              "FaceURL": "https://i.ibb.co/NKKqhBr/6b4aefd9c842.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "d5f474",
          "Name": "Card",
          "Transform": {
            "rotX": 3.54519258e-08,
            "rotY": 270.0,
            "rotZ": 4.433845e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Expose",
          "GMNotes": "{\"TtsZoopGuid\":\"794625d7-96fd-4504-9232-7d2ef5b5dce9\",\"type\":\"Skill\",\"class\":\"Seeker\",\"traits\":\"Innate\",\"combatIcons\":1,\"intellectIcons\":1,\"willpowerIcons\":1,\"level\":0,\"id\":\"794625d7-96fd-4504-9232-7d2ef5b5dce9\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 320300,
          "CustomDeck": {
            "3203": {
              "FaceURL": "https://i.ibb.co/DRDsrWZ/0757e3e7d5ee.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "de1b30",
          "Name": "Card",
          "Transform": {
            "rotX": -8.216809e-08,
            "rotY": 270.0,
            "rotZ": 1.921669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Amass Knowledge (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"3070b227-a64b-4744-83c9-1acc36149fbf\",\"type\":\"Event\",\"class\":\"Seeker\",\"traits\":\"Insight\",\"intellectIcons\":1,\"willpowerIcons\":2,\"cost\":1,\"level\":3,\"id\":\"3070b227-a64b-4744-83c9-1acc36149fbf\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 319200,
          "CustomDeck": {
            "3192": {
              "FaceURL": "https://i.ibb.co/vYh03zh/d064e529d12d.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "df2ec3",
          "Name": "Card",
          "Transform": {
            "rotX": 5.69834029e-08,
            "rotY": 270.0,
            "rotZ": 3.12535661e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Anatomy Notes",
          "GMNotes": "{\"TtsZoopGuid\":\"fe135403-c3cf-435a-b79f-c54f122d6388\",\"type\":\"Asset\",\"uses\":[{\"count\":3,\"token\":\"resource\",\"type\":\"Secret\"}],\"class\":\"Seeker\",\"traits\":\"Item. Tome. Science\",\"combatIcons\":1,\"intellectIcons\":1,\"cost\":3,\"level\":0,\"id\":\"fe135403-c3cf-435a-b79f-c54f122d6388\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 320400,
          "CustomDeck": {
            "3204": {
              "FaceURL": "https://i.ibb.co/ypB1LGr/9282b4772b24.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "dfc636",
          "Name": "Card",
          "Transform": {
            "rotX": -9.04399045e-08,
            "rotY": 270.0,
            "rotZ": 2.19295259e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Phantasmal Insight (2)",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Seeker\",\"traits\":\"Innate. Developed. Cursed\",\"level\":2,\"intellectIcons\":1,\"willpowerIcons\":1,\"wildIcons\":1,\"TtsZoopGuid\":\"5503e50e-5407-45ec-b638-b216c36f24ad\",\"id\":\"5503e50e-5407-45ec-b638-b216c36f24ad\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 672800,
          "CustomDeck": {
            "6728": {
              "FaceURL": "https://i.ibb.co/80C7Tzy/66901e637120.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00013",
          "Name": "Card",
          "Transform": {
            "rotX": -7.83990629e-07,
            "rotY": 270.0,
            "rotZ": 1.06270079e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fathomless Curiosity",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Seeker\",\"traits\":\"Talent\",\"cost\":2,\"level\":0,\"intellectIcons\":1,\"uses\":[{\"count\":0,\"token\":\"resource\",\"type\":\"Secret\"}],\"TtsZoopGuid\":\"620fe998-44d4-4000-ad61-fddd1b226e30\",\"id\":\"620fe998-44d4-4000-ad61-fddd1b226e30\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 635100,
          "CustomDeck": {
            "6351": {
              "FaceURL": "https://i.ibb.co/3WFsww6/893994629825.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        }
      ]
    },
    {
      "GUID": "32f079",
      "Name": "Bag",
      "Transform": {
        "rotX": 4.484173e-05,
        "rotY": 89.9551239,
        "rotZ": -9.505938e-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Survivor",
      "Description": "By Directsun",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 0.0,
        "b": 0.0
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.7.0\n-- Fork of Memory Bag 2.0 by MrStump\n--\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\n\nCONFIG = {\n    MEMORY_GROUP = {\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\n        -- This gives the other bags time to recall their objects.\n        -- The delay ONLY occurs if other bags have objects out.\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30,\n    },\n}\n\n\n--[[ Memory Bag Groups ]]-------------------------------------------------------\n--[[\nUtility Memory Bags may be added to a named group, called a \"memory group\".\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\nOnly one bag from a group may have it's contents placed on the table at a time.\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\nBy default a memory bag is not in any group. It's memory group is \"nil\".\n--]]\n\nmemoryGroupName = {memoryBag=self}\nfunction memoryGroupName:get()\n    return self._name\nend\nfunction memoryGroupName:set(newName)\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\n\n    if newName == \"\" then\n        self._name = nil\n    else\n        self._name = newName\n    end\nend\n\n-- Click the \"Recall\" button on all other bags in my memory group.\nfunction recallOtherBagsInMyGroup()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        bag.call('buttonClick_recall')\n    end\nend\n\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\nfunction anyOtherBagsInMyGroupArePlaced()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        local state = bag.call('areAnyOfMyObjectsPlaced')\n        if state then return true end\n    end\n\n    return false\nend\n\n-- Return \"true\" if at least one object from this memory bag is out on the table.\nfunction areAnyOfMyObjectsPlaced()\n    for guid,_ in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then\n            return true\n        end\n    end\n    return false\nend\n\nfunction getOtherBagsInMyGroup()\n    local bags = {}\n    for bagGuid,_ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\n        if bagGuid ~= self.getGUID() then\n            bag = getObjectFromGUID(bagGuid)\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\n            if bag ~= nil then\n                table.insert(bags, bag)\n            end\n        end\n    end\n    return bags\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the names & guids of all memory bag groups.\nThe global variable is a table and holds data like this:\n{\n    'My First Group Name' = {\n        '805ebd' = {},\n        '35cc21' = {},\n        'fc8886' = {},\n    },\n    'My Second Group Name' = {\n        'f50264' = {},\n        '5f5f63' = {},\n    },\n}\n--]]\nGlobalMemoryGroups = {\n    NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups',\n}\n\n-- Call me inside this script's \"onLoad()\" method!\nfunction GlobalMemoryGroups:onLoad(myGuid)\n    -- Create and initialize the global variable if it doesn't already exist:\n    if self:_getGroups() == nil then\n        self:_setGroups({})\n    end\nend\n\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\nfunction GlobalMemoryGroups:getGroup(groupName)\n    guids = self:_getGroups()[groupName] or {}\n    return guids\nend\n\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\n    if groupName == nil or groupName == \"\" then\n        return\n    end\n\n    self:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    groups[groupName][bagGuid] = {}\n    self:_setGroups(groups)\nend\n\n-- Removes this bag from the memory group.\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\n    local groups = self:_getGroups()\n    local group = groups[groupName]\n    if group ~= nil then\n        group[bagGuid] = nil\n        self:_setGroups(groups)\n    end\nend\n\n-- Return the global variable, which is a table holding all memory group names & guids.\nfunction GlobalMemoryGroups:_getGroups()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\nend\n\n-- Override the global variable (i.e. the entire table).\nfunction GlobalMemoryGroups:_setGroups(newTable)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\nend\n\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    if groups[groupName] == nil then\n        groups[groupName] = {}\n        self:_setGroups(groups)\n    end\nend\n\n\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\ngroupNameInput = {\n    greyedOutText = \"Group Name\",\n    widthPerCharacter = 100,\n    padding = 4,\n    memoryBag=self,\n}\nfunction groupNameInput:create(optionalStartingValue)\n    local effectiveText = optionalStartingValue or self.greyedOutText\n    local width = self:computeWidth(effectiveText)\n\n    self.memoryBag.createInput({\n        label=self.greyedOutText,\n        value=optionalStartingValue or nil,\n        alignment=3, -- Center aligned\n        input_function=\"groupNameInput_onCharacterTyped\", function_owner=self.memoryBag,\n        position={2.1,0.3,0}, rotation={0,270,0}, width=width, height=350,\n        font_size=250, color={0,0,0}, font_color={1,1,1},\n    })\nend\nfunction groupNameInput:computeWidth(text)\n    return (string.len(text) + self.padding) * self.widthPerCharacter\nend\nfunction groupNameInput:updatedWidth(text)\n    self.memoryBag.editInput({\n        index=0,\n        width=self:computeWidth(text)\n    })\nend\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\n    if stillEditing then\n        self:updatedWidth(text)\n    else\n        if text == \"\" then\n            self:updatedWidth(self.greyedOutText)\n        end\n    end\nend\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\n    groupNameInput:onCharacterTyped(text, stillEditing)\nend\nfunction groupNameInput:setGroupNameToInputField()\n    local inputFields = self.memoryBag.getInputs()\n    if inputFields ~= nil then\n        -- Get input field 0, which corresponds to the groupNameInput.\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\n        local nameField = nil\n        for _,field in ipairs(inputFields) do\n            if field.index == 0 then\n                nameField = field\n            end\n        end\n\n        memoryGroupName:set(nameField.value)\n    end\nend\n\n\n\n\n\n--//////////////////////////////////////////////////////////////////////////////\n\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList,[\"groupName\"]=memoryGroupName:get()}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n    local bagObjList = self.getObjects()\n    for _, bagObj in ipairs(bagObjList) do\n        local data = bagObj.lua_script_state\n        if data ~= nil then\n            local j = JSON.decode(data)\n            if j ~= nil and j.ml ~= nil then\n                for guid, entry in pairs(j.ml) do\n                    memoryList[guid] = entry\n                end\n            end\n        end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    GlobalMemoryGroups:onLoad(self.getGUID())\n    AllMemoryBagsInScene:add(self.getGUID())\n\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n        memoryGroupName:set(loaded_data.groupName)\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n        memoryGroupName:set(nil)\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n    local objTable = {}\n    local curObj = {}\n\n    for guid in pairs(memoryListBackup) do\n        curObj = getObjectFromGUID(guid)\n        table.insert(objTable, curObj)\n    end\n\n    return objTable\n    -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    buttonIndexMap = {}\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n        objsToHaveButtons = getAllObjectsInMemory()\n    else\n        objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Workaround for custom PDFs\n            if obj.Book then\n                objPos.y = objPos.y + 0.5\n            end\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n                color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color=color,\n            })\n            buttonIndexMap[obj.getGUID()] = howManyButtons\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n        self.createButton({\n            label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n            position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\n        })\n\n        self.createButton({\n            label=\"Selection\", click_function=\"editDragSelection\", function_owner=self,\n            position={0,0.3,2}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={1,1,1}\n        })\n        groupNameInput:create(memoryGroupName:get())\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(obj, move)\n    local index = buttonIndexMap[obj.getGUID()]\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n        theList = moveList\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\n            local prevObj = getObjectFromGUID(previousGuid)\n            prevObj.highlightOff()\n            self.editButton({index=previousIndex, color=colorMove})\n            theList[previousGuid] = nil\n        end\n        previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock(),\n            tint=obj.getColorTint()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        if move == true then\n            color = colorMove\n        end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\nfunction editDragSelection(bagObj, player, remove)\n    local selectedObjs = Player[player].getSelectedObjects()\n    if not remove then\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            --Ignore if already in the memory list, or does not have a button\n            if index and not memoryList[obj.getGUID()] then\n                self.editButton({index=index, color={0,1,0,0.6}})\n                --Adding pos/rot to memory table\n                local pos, rot = obj.getPosition(), obj.getRotation()\n                --I need to add it like this or it won't save due to indexing issue\n                memoryList[obj.getGUID()] = {\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n                    lock=obj.getLock(),\n                    tint=obj.getColorTint()\n                }\n                obj.highlightOn({0,1,0})\n            end\n        end\n    else\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            if index and memoryList[obj.getGUID()] then\n                color = {0.75,0.25,0.25,0.6}\n                self.editButton({index=index, color=color})\n                memoryList[obj.getGUID()] = nil\n                obj.highlightOff()\n            end\n        end\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            self.clearInputs()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n        memoryList = memoryListBackup\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    groupNameInput:setGroupNameToInputField()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n    for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        memoryListBackup[guid] = nil\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n            memoryListBackup[guid].tint = obj.getColorTint()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    memoryGroupName:set(nil)\n    self.clearButtons()\n    self.clearInputs()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n        position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    if anyOtherBagsInMyGroupArePlaced() then\n        recallOtherBagsInMyGroup()\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\n    else\n        _placeObjects()\n    end\nend\n\nfunction _placeObjects()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n            obj.setColorTint(entry.tint)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    item.setColorTint(entry.tint)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n    local angle = math.rad(obj.getRotation().y)\n    local x = desiredPos.x * math.sin(angle)\n    local z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n    local mult = 10^(dec or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\nExample:\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\n--]]\nAllMemoryBagsInScene = {\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\n}\n\nfunction AllMemoryBagsInScene:add(guid)\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\n    table.insert(guids, guid)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\nend\n\nfunction AllMemoryBagsInScene:getGuidList()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\nend",
      "LuaScriptState": "{\"ml\":{\"03de52\":{\"lock\":false,\"pos\":{\"x\":27.0747,\"y\":1.4951,\"z\":19.9745},\"rot\":{\"x\":0,\"y\":270.0191,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"099e75\":{\"lock\":false,\"pos\":{\"x\":34.2092,\"y\":1.4951,\"z\":32.4728},\"rot\":{\"x\":0,\"y\":269.9987,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"15fe80\":{\"lock\":false,\"pos\":{\"x\":30.5298,\"y\":1.4951,\"z\":30.1333},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1862b8\":{\"lock\":false,\"pos\":{\"x\":34.3689,\"y\":1.4951,\"z\":10.8538},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"19309a\":{\"lock\":false,\"pos\":{\"x\":34.2093,\"y\":1.4951,\"z\":34.7728},\"rot\":{\"x\":0,\"y\":270.026,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1d1a6d\":{\"lock\":false,\"pos\":{\"x\":30.7515,\"y\":1.4951,\"z\":20.0028},\"rot\":{\"x\":0,\"y\":269.9893,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"312ff0\":{\"lock\":false,\"pos\":{\"x\":30.5301,\"y\":1.4951,\"z\":32.4334},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3740da\":{\"lock\":false,\"pos\":{\"x\":34.3689,\"y\":1.4951,\"z\":17.7303},\"rot\":{\"x\":0,\"y\":269.9998,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"403e45\":{\"lock\":false,\"pos\":{\"x\":30.7645,\"y\":1.4951,\"z\":6.3029},\"rot\":{\"x\":0,\"y\":270.0158,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"42cbd0\":{\"lock\":false,\"pos\":{\"x\":34.2093,\"y\":1.4951,\"z\":37.0728},\"rot\":{\"x\":0,\"y\":269.988,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"529b85\":{\"lock\":false,\"pos\":{\"x\":26.945,\"y\":1.4951,\"z\":32.4268},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"69255a\":{\"lock\":false,\"pos\":{\"x\":30.7515,\"y\":1.4951,\"z\":15.4027},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6e279f\":{\"lock\":false,\"pos\":{\"x\":27.0747,\"y\":1.4951,\"z\":17.6745},\"rot\":{\"x\":0,\"y\":270.0029,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"898860\":{\"lock\":false,\"pos\":{\"x\":30.5294,\"y\":1.4951,\"z\":27.8333},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"962d40\":{\"lock\":false,\"pos\":{\"x\":34.3845,\"y\":1.4951,\"z\":13.1412},\"rot\":{\"x\":0,\"y\":270.0106,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b17298\":{\"lock\":false,\"pos\":{\"x\":30.5299,\"y\":1.4951,\"z\":34.7411},\"rot\":{\"x\":0,\"y\":270.0101,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bd8705\":{\"lock\":false,\"pos\":{\"x\":30.7629,\"y\":1.4951,\"z\":10.8517},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c30d41\":{\"lock\":false,\"pos\":{\"x\":34.3689,\"y\":1.4951,\"z\":15.4303},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c86ed7\":{\"lock\":false,\"pos\":{\"x\":30.7516,\"y\":1.4951,\"z\":17.7027},\"rot\":{\"x\":0,\"y\":270.0024,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"cd1033\":{\"lock\":false,\"pos\":{\"x\":26.9598,\"y\":1.4951,\"z\":39.3265},\"rot\":{\"x\":0,\"y\":269.9887,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"da6dd9\":{\"lock\":false,\"pos\":{\"x\":34.3683,\"y\":1.4951,\"z\":8.548},\"rot\":{\"x\":0,\"y\":269.9998,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00003\":{\"lock\":false,\"pos\":{\"x\":34.3688,\"y\":1.4951,\"z\":13.1418},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0001b\":{\"lock\":false,\"pos\":{\"x\":26.96,\"y\":1.4951,\"z\":36.9874},\"rot\":{\"x\":0,\"y\":270.0001,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0001c\":{\"lock\":false,\"pos\":{\"x\":30.5255,\"y\":1.4951,\"z\":39.337},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0001f\":{\"lock\":false,\"pos\":{\"x\":26.9555,\"y\":1.4951,\"z\":34.7133},\"rot\":{\"x\":0,\"y\":269.9932,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e8ce50\":{\"lock\":false,\"pos\":{\"x\":30.7575,\"y\":1.4951,\"z\":13.1054},\"rot\":{\"x\":0,\"y\":270.0108,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f2983b\":{\"lock\":false,\"pos\":{\"x\":34.2093,\"y\":1.4951,\"z\":37.0728},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f3a8e7\":{\"lock\":false,\"pos\":{\"x\":34.2007,\"y\":1.4951,\"z\":39.3676},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f739b5\":{\"lock\":false,\"pos\":{\"x\":34.3834,\"y\":1.4951,\"z\":20.0271},\"rot\":{\"x\":0,\"y\":269.9998,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fba48c\":{\"lock\":false,\"pos\":{\"x\":30.5302,\"y\":1.4951,\"z\":37.0334},\"rot\":{\"x\":0,\"y\":269.9971,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ff9c79\":{\"lock\":false,\"pos\":{\"x\":30.7535,\"y\":1.4951,\"z\":8.5751},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
      "ContainedObjects": [
        {
          "GUID": "f2983b",
          "Name": "Card",
          "Transform": {
            "rotX": 4.1327187e-08,
            "rotY": 270.0,
            "rotZ": -2.83816746e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Death Mask",
          "GMNotes": "{\"id\":\"59822f7b-2e04-48da-93f3-6a3bac05d65e\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Item. Mask\",\"cost\":1,\"level\":0,\"willpowerIcons\":1,\"TtsZoopGuid\":\"59822f7b-2e04-48da-93f3-6a3bac05d65e\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 673900,
          "CustomDeck": {
            "6739": {
              "FaceURL": "https://i.ibb.co/99WvNDY/74b7a15fca6e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "03de52",
          "Name": "Card",
          "Transform": {
            "rotX": 3.65867976e-08,
            "rotY": 270.0191,
            "rotZ": -3.22835575e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Ascetic (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"13b3a773-b01f-4ebe-a7e7-c2d2ae91dbaa\",\"type\":\"Skill\",\"class\":\"Survivor\",\"traits\":\"Innate. Developed. Fated\",\"agilityIcons\":1,\"wildIcons\":3,\"level\":2,\"willpowerIcons\":1,\"id\":\"13b3a773-b01f-4ebe-a7e7-c2d2ae91dbaa\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 321500,
          "CustomDeck": {
            "3215": {
              "FaceURL": "https://i.ibb.co/RQ4wkjL/c2d5adcfbc58.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "099e75",
          "Name": "Card",
          "Transform": {
            "rotX": 1.602628e-08,
            "rotY": 269.9987,
            "rotZ": -2.47830968e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Charitable",
          "GMNotes": "{\"TtsZoopGuid\":\"06254bb9-57e6-4326-8684-99384cfa39c8\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Talent\",\"intellectIcons\":1,\"cost\":1,\"level\":0,\"id\":\"06254bb9-57e6-4326-8684-99384cfa39c8\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 321600,
          "CustomDeck": {
            "3216": {
              "FaceURL": "https://i.ibb.co/1TsxXmw/c8d0e97b4a6b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "15fe80",
          "Name": "Card",
          "Transform": {
            "rotX": 7.575628e-08,
            "rotY": 270.0,
            "rotZ": -3.9023962e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fur Trap",
          "GMNotes": "{\"TtsZoopGuid\":\"61fbefae-7dde-4c0f-a57a-b79f0dcd8d04\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Trap\",\"combatIcons\":1,\"cost\":0,\"level\":0,\"id\":\"61fbefae-7dde-4c0f-a57a-b79f0dcd8d04\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 630000,
          "CustomDeck": {
            "6300": {
              "FaceURL": "https://i.ibb.co/dm4z8vv/c2383a50bada.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "1862b8",
          "Name": "Card",
          "Transform": {
            "rotX": 1.221219e-07,
            "rotY": 270.0,
            "rotZ": -1.13691385e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Animal Whisperer (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"d16c664f-0f22-473e-abc0-bf2caa913827\",\"type\":\"Asset\",\"permanent\":true,\"class\":\"Survivor\",\"traits\":\"Talent\",\"level\":3,\"id\":\"d16c664f-0f22-473e-abc0-bf2caa913827\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 322200,
          "CustomDeck": {
            "3222": {
              "FaceURL": "https://i.ibb.co/sVFkt77/946f750484a5.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "19309a",
          "Name": "Card",
          "Transform": {
            "rotX": -3.294338e-08,
            "rotY": 270.026,
            "rotZ": 3.465326e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Famished Vulture",
          "GMNotes": "{\"TtsZoopGuid\":\"2afc2695-dc04-4285-bcbc-9f4f04854301\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Ally. Creature\",\"combatIcons\":1,\"cost\":1,\"level\":0,\"id\":\"2afc2695-dc04-4285-bcbc-9f4f04854301\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 321700,
          "CustomDeck": {
            "3217": {
              "FaceURL": "https://i.ibb.co/8sjVhxQ/d933b72143a3.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "1d1a6d",
          "Name": "Card",
          "Transform": {
            "rotX": 9.09973e-08,
            "rotY": 269.9893,
            "rotZ": 1.00311963e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Jaws of Defeat (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"816348af-b680-496e-8e46-f9b86d92f82b\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Fortune\",\"combatIcons\":1,\"willpowerIcons\":1,\"level\":2,\"id\":\"816348af-b680-496e-8e46-f9b86d92f82b\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 321900,
          "CustomDeck": {
            "3219": {
              "FaceURL": "https://i.ibb.co/WsM45SM/fedb8b29c99e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "312ff0",
          "Name": "Card",
          "Transform": {
            "rotX": -1.00655065e-07,
            "rotY": 270.0,
            "rotZ": 1.93169925e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Appeasement",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Tactic\",\"cost\":1,\"level\":0,\"agilityIcons\":1,\"TtsZoopGuid\":\"99d6cd30-4bef-47b2-80c9-ce561ec04ed4\",\"id\":\"99d6cd30-4bef-47b2-80c9-ce561ec04ed4\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 673400,
          "CustomDeck": {
            "6734": {
              "FaceURL": "https://i.ibb.co/FK5vrBV/1ba5dc8e5deb.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "3740da",
          "Name": "Card",
          "Transform": {
            "rotX": 5.980929e-08,
            "rotY": 269.9998,
            "rotZ": -1.47124368e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Crafty Raccoon (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"9780e536-bc36-4cea-a3ea-644a5e0fa75e\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Ally. Creature\",\"agilityIcons\":1,\"cost\":1,\"level\":1,\"id\":\"9780e536-bc36-4cea-a3ea-644a5e0fa75e\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 322000,
          "CustomDeck": {
            "3220": {
              "FaceURL": "https://i.ibb.co/LJvrNGj/df5ff4dcf357.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "403e45",
          "Name": "Card",
          "Transform": {
            "rotX": -7.3028616e-08,
            "rotY": 270.0158,
            "rotZ": -5.48528334e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Pitfall Trap (4)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Trap\",\"cost\":1,\"level\":4,\"TtsZoopGuid\":\"34cbb616-58d9-4544-9bd2-695449b9d3b5\",\"id\":\"34cbb616-58d9-4544-9bd2-695449b9d3b5\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 668500,
          "CustomDeck": {
            "6685": {
              "FaceURL": "https://i.ibb.co/HGhn8H4/292ba83a3888.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "529b85",
          "Name": "Card",
          "Transform": {
            "rotX": -1.00655065e-07,
            "rotY": 270.0,
            "rotZ": 1.93169925e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Reminiscence",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Survivor\",\"traits\":\"Innate\",\"level\":0,\"willpowerIcons\":1,\"TtsZoopGuid\":\"c6e9df15-4d55-4d58-9db5-c874ecc9fa82\",\"id\":\"c6e9df15-4d55-4d58-9db5-c874ecc9fa82\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 673500,
          "CustomDeck": {
            "6735": {
              "FaceURL": "https://i.ibb.co/C86qP92/4b3c247375a8.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "69255a",
          "Name": "Card",
          "Transform": {
            "rotX": 3.006831e-08,
            "rotY": 270.0,
            "rotZ": 1.3119336e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fever Dream (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"5465a855-230d-4843-8bd1-6f2a4d227d7a\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Spirit. Desperate\",\"intellectIcons\":1,\"cost\":6,\"level\":1,\"willpowerIcons\":1,\"wildIcons\":1,\"id\":\"5465a855-230d-4843-8bd1-6f2a4d227d7a\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 322100,
          "CustomDeck": {
            "3221": {
              "FaceURL": "https://i.ibb.co/y43fGY6/74a954c68e99.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "6e279f",
          "Name": "Card",
          "Transform": {
            "rotX": 2.97408516e-08,
            "rotY": 270.0029,
            "rotZ": -5.118024e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Turn the Tides (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"2afc1268-a0d5-42ce-9519-9663367e8b60\",\"type\":\"Skill\",\"class\":\"Survivor\",\"traits\":\"Developed\",\"agilityIcons\":2,\"willpowerIcons\":2,\"level\":3,\"id\":\"2afc1268-a0d5-42ce-9519-9663367e8b60\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 322300,
          "CustomDeck": {
            "3223": {
              "FaceURL": "https://i.ibb.co/q0my8gn/6871b9810db7.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "898860",
          "Name": "Card",
          "Transform": {
            "rotX": 3.21152562e-08,
            "rotY": 270.0,
            "rotZ": 2.75978547e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Last Resort",
          "GMNotes": "{\"TtsZoopGuid\":\"390a3812-40bd-456d-98ac-f297251b7573\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Desperate. Improvised\",\"cost\":1,\"level\":0,\"id\":\"390a3812-40bd-456d-98ac-f297251b7573\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 322600,
          "CustomDeck": {
            "3226": {
              "FaceURL": "https://i.ibb.co/S6NzSxS/c35dba3cb06f.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "962d40",
          "Name": "Card",
          "Transform": {
            "rotX": 5.8551155e-08,
            "rotY": 270.01062,
            "rotZ": -1.91693232e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Death Mask (2)",
          "GMNotes": "{\"id\":\"59822f7b-2e04-48da-93f3-6a3bac05d65e\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Item. Mask\",\"cost\":1,\"level\":2,\"willpowerIcons\":2,\"TtsZoopGuid\":\"59822f7b-2e04-48da-93f3-6a3bac05d65e\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 100200,
          "CustomDeck": {
            "1002": {
              "FaceURL": "https://i.ibb.co/wz8pMG0/a5b6b21d462a.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b17298",
          "Name": "Card",
          "Transform": {
            "rotX": 3.946833e-08,
            "rotY": 270.0101,
            "rotZ": -2.66669218e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Campsite",
          "GMNotes": "{\"TtsZoopGuid\":\"59d4227d-4029-45fe-aeb3-20acc078d77b\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Supply\",\"combatIcons\":1,\"cost\":1,\"level\":0,\"id\":\"59d4227d-4029-45fe-aeb3-20acc078d77b\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 322700,
          "CustomDeck": {
            "3227": {
              "FaceURL": "https://i.ibb.co/cyzdpwd/fb8c45e22c84.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "bd8705",
          "Name": "Card",
          "Transform": {
            "rotX": 8.701054e-08,
            "rotY": 270.0,
            "rotZ": -2.55698e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Perilous Dive (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"878c49d8-f77c-4992-8cc5-206ee0ac1c9f\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Fortune. Gambit\",\"intellectIcons\":1,\"wildIcons\":1,\"cost\":2,\"level\":2,\"id\":\"878c49d8-f77c-4992-8cc5-206ee0ac1c9f\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 321800,
          "CustomDeck": {
            "3218": {
              "FaceURL": "https://i.ibb.co/c3DbGtC/325593642e13.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "c30d41",
          "Name": "Card",
          "Transform": {
            "rotX": 1.88060454e-07,
            "rotY": 270.0,
            "rotZ": -5.324765e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Bountiful Harvest (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"20e54a70-3463-40c4-95d4-c7cefc876e57\",\"type\":\"Asset\",\"uses\":[{\"count\":5,\"token\":\"resource\",\"type\":\"Charge\"}],\"class\":\"Survivor\",\"traits\":\"Ritual\",\"agilityIcons\":1,\"cost\":0,\"level\":1,\"id\":\"20e54a70-3463-40c4-95d4-c7cefc876e57\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 630100,
          "CustomDeck": {
            "6301": {
              "FaceURL": "https://i.ibb.co/3YwFFCP/486de8b02244.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "c86ed7",
          "Name": "Card",
          "Transform": {
            "rotX": 1.53214632e-08,
            "rotY": 270.0024,
            "rotZ": 3.864573e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Brutality (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"f6546afa-264d-40c4-abcf-defc909f3d67\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Spirit\",\"combatIcons\":1,\"willpowerIcons\":1,\"cost\":2,\"level\":2,\"id\":\"f6546afa-264d-40c4-abcf-defc909f3d67\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 323000,
          "CustomDeck": {
            "3230": {
              "FaceURL": "https://i.ibb.co/D4f1NMF/c6869c389dae.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "cd1033",
          "Name": "Card",
          "Transform": {
            "rotX": -8.39609058e-08,
            "rotY": 269.9887,
            "rotZ": 1.7341894e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Ascetic",
          "GMNotes": "{\"TtsZoopGuid\":\"54f4fdea-8982-4ce2-bb82-04f66dc92a79\",\"type\":\"Skill\",\"class\":\"Survivor\",\"traits\":\"Innate. Fated\",\"agilityIcons\":1,\"wildIcons\":2,\"level\":0,\"willpowerIcons\":1,\"id\":\"54f4fdea-8982-4ce2-bb82-04f66dc92a79\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 323100,
          "CustomDeck": {
            "3231": {
              "FaceURL": "https://i.ibb.co/3y7bDRB/cdf388459b68.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "da6dd9",
          "Name": "Card",
          "Transform": {
            "rotX": -2.62870756e-08,
            "rotY": 269.9998,
            "rotZ": -8.563079e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "At Death's Door (5)",
          "GMNotes": "{\"TtsZoopGuid\":\"9162f646-615e-4e38-b952-e2e14e44160b\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Condition. Desperate\",\"wildIcons\":2,\"cost\":2,\"level\":5,\"id\":\"9162f646-615e-4e38-b952-e2e14e44160b\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 322400,
          "CustomDeck": {
            "3224": {
              "FaceURL": "https://i.ibb.co/N7T39bd/24332a92db47.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0001b",
          "Name": "Card",
          "Transform": {
            "rotX": -1.96167047e-08,
            "rotY": 270.000061,
            "rotZ": -8.63395e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Dredge",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Survivor\",\"traits\":\"Gambit\",\"level\":0,\"agilityIcons\":1,\"combatIcons\":1,\"willpowerIcons\":1,\"TtsZoopGuid\":\"823d916e-35d6-4861-8c19-363642d54915\",\"id\":\"823d916e-35d6-4861-8c19-363642d54915\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 673600,
          "CustomDeck": {
            "6736": {
              "FaceURL": "https://i.ibb.co/rt2HG6Q/ff706c1410e9.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0001c",
          "Name": "Card",
          "Transform": {
            "rotX": -1.55825717e-07,
            "rotY": 270.0,
            "rotZ": 1.847236e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Retrace Your Steps",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Insight\",\"cost\":1,\"level\":0,\"intellectIcons\":1,\"TtsZoopGuid\":\"352cbc81-ed54-4d2b-bd3d-aa824d821937\",\"id\":\"352cbc81-ed54-4d2b-bd3d-aa824d821937\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 648100,
          "CustomDeck": {
            "6481": {
              "FaceURL": "https://i.ibb.co/1LrzrTG/654c28e2b58e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0001f",
          "Name": "Card",
          "Transform": {
            "rotX": -5.36460867e-08,
            "rotY": 269.9932,
            "rotZ": -9.756656e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Weather the Storm",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Survivor\",\"traits\":\"Desperate\",\"level\":0,\"wildIcons\":4,\"TtsZoopGuid\":\"6ac48ff8-a345-4c52-815b-d0ee7b9ea70d\",\"id\":\"6ac48ff8-a345-4c52-815b-d0ee7b9ea70d\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 102200,
          "CustomDeck": {
            "1022": {
              "FaceURL": "https://i.ibb.co/8D9vthD/9652ca3957bd.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e8ce50",
          "Name": "Card",
          "Transform": {
            "rotX": 1.11200769e-07,
            "rotY": 270.0108,
            "rotZ": -3.229944e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Final Stand (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"e0214031-e7f1-43c2-b8e2-08c1b5069d41\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Spirit. Desperate\",\"combatIcons\":1,\"cost\":6,\"level\":1,\"agilityIcons\":1,\"wildIcons\":1,\"id\":\"e0214031-e7f1-43c2-b8e2-08c1b5069d41\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 310200,
          "CustomDeck": {
            "3102": {
              "FaceURL": "https://i.ibb.co/FwPHtzk/4fa2b27c4446.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f3a8e7",
          "Name": "Card",
          "Transform": {
            "rotX": 1.19242117e-07,
            "rotY": 270.0,
            "rotZ": -1.59422171e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Dove",
          "GMNotes": "{\"TtsZoopGuid\":\"ba93f795-6598-4a56-9702-ae2868640c1e\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Ally. Creature. Blessed\",\"willpowerIcons\":1,\"cost\":1,\"level\":0,\"id\":\"ba93f795-6598-4a56-9702-ae2868640c1e\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 316800,
          "CustomDeck": {
            "3168": {
              "FaceURL": "https://i.ibb.co/Q6TLHn6/4112c71c8730.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f739b5",
          "Name": "Card",
          "Transform": {
            "rotX": 3.85872028e-08,
            "rotY": 269.9998,
            "rotZ": -1.64969336e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Crowbar (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"d62bb873-3742-40fd-af8e-f21841438991\",\"type\":\"Asset\",\"class\":\"Survivor\",\"traits\":\"Item. Tool. Melee\",\"agilityIcons\":1,\"cost\":2,\"level\":1,\"id\":\"d62bb873-3742-40fd-af8e-f21841438991\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 323300,
          "CustomDeck": {
            "3233": {
              "FaceURL": "https://i.ibb.co/51c6jqS/a46822ff628b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "fba48c",
          "Name": "Card",
          "Transform": {
            "rotX": -1.34072621e-07,
            "rotY": 269.9971,
            "rotZ": -4.44404726e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Jaws of Defeat",
          "GMNotes": "{\"TtsZoopGuid\":\"2f102b2d-b879-4ee7-aba4-6404cc17eb6f\",\"type\":\"Event\",\"class\":\"Survivor\",\"traits\":\"Fortune\",\"combatIcons\":1,\"willpowerIcons\":1,\"cost\":1,\"level\":0,\"id\":\"2f102b2d-b879-4ee7-aba4-6404cc17eb6f\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 316400,
          "CustomDeck": {
            "3164": {
              "FaceURL": "https://i.ibb.co/rMrgqLR/c9b27da6c852.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "ff9c79",
          "Name": "Card",
          "Transform": {
            "rotX": 3.842029e-07,
            "rotY": 270.0,
            "rotZ": -1.1087169e-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Campsite (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"14d78858-1344-4769-839e-b21a4f6c8c56\",\"type\":\"Event\",\"uses\":[{\"count\":2,\"token\":\"resource\",\"type\":\"Supply\"}],\"class\":\"Survivor\",\"traits\":\"Supply\",\"combatIcons\":1,\"intellectIcons\":1,\"cost\":1,\"level\":3,\"id\":\"14d78858-1344-4769-839e-b21a4f6c8c56\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 322800,
          "CustomDeck": {
            "3228": {
              "FaceURL": "https://i.ibb.co/xHRWhWn/934796ab3fde.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        }
      ]
    },
    {
      "GUID": "3eaf15",
      "Name": "Bag",
      "Transform": {
        "rotX": -1.41752037e-06,
        "rotY": 89.96917,
        "rotZ": -8.132109e-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Mystic",
      "Description": "By Directsun",
      "ColorDiffuse": {
        "r": 0.627451062,
        "g": 0.125485808,
        "b": 0.9411765
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.7.0\n-- Fork of Memory Bag 2.0 by MrStump\n--\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\n\nCONFIG = {\n    MEMORY_GROUP = {\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\n        -- This gives the other bags time to recall their objects.\n        -- The delay ONLY occurs if other bags have objects out.\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30,\n    },\n}\n\n\n--[[ Memory Bag Groups ]]-------------------------------------------------------\n--[[\nUtility Memory Bags may be added to a named group, called a \"memory group\".\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\nOnly one bag from a group may have it's contents placed on the table at a time.\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\nBy default a memory bag is not in any group. It's memory group is \"nil\".\n--]]\n\nmemoryGroupName = {memoryBag=self}\nfunction memoryGroupName:get()\n    return self._name\nend\nfunction memoryGroupName:set(newName)\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\n\n    if newName == \"\" then\n        self._name = nil\n    else\n        self._name = newName\n    end\nend\n\n-- Click the \"Recall\" button on all other bags in my memory group.\nfunction recallOtherBagsInMyGroup()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        bag.call('buttonClick_recall')\n    end\nend\n\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\nfunction anyOtherBagsInMyGroupArePlaced()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        local state = bag.call('areAnyOfMyObjectsPlaced')\n        if state then return true end\n    end\n\n    return false\nend\n\n-- Return \"true\" if at least one object from this memory bag is out on the table.\nfunction areAnyOfMyObjectsPlaced()\n    for guid,_ in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then\n            return true\n        end\n    end\n    return false\nend\n\nfunction getOtherBagsInMyGroup()\n    local bags = {}\n    for bagGuid,_ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\n        if bagGuid ~= self.getGUID() then\n            bag = getObjectFromGUID(bagGuid)\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\n            if bag ~= nil then\n                table.insert(bags, bag)\n            end\n        end\n    end\n    return bags\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the names & guids of all memory bag groups.\nThe global variable is a table and holds data like this:\n{\n    'My First Group Name' = {\n        '805ebd' = {},\n        '35cc21' = {},\n        'fc8886' = {},\n    },\n    'My Second Group Name' = {\n        'f50264' = {},\n        '5f5f63' = {},\n    },\n}\n--]]\nGlobalMemoryGroups = {\n    NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups',\n}\n\n-- Call me inside this script's \"onLoad()\" method!\nfunction GlobalMemoryGroups:onLoad(myGuid)\n    -- Create and initialize the global variable if it doesn't already exist:\n    if self:_getGroups() == nil then\n        self:_setGroups({})\n    end\nend\n\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\nfunction GlobalMemoryGroups:getGroup(groupName)\n    guids = self:_getGroups()[groupName] or {}\n    return guids\nend\n\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\n    if groupName == nil or groupName == \"\" then\n        return\n    end\n\n    self:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    groups[groupName][bagGuid] = {}\n    self:_setGroups(groups)\nend\n\n-- Removes this bag from the memory group.\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\n    local groups = self:_getGroups()\n    local group = groups[groupName]\n    if group ~= nil then\n        group[bagGuid] = nil\n        self:_setGroups(groups)\n    end\nend\n\n-- Return the global variable, which is a table holding all memory group names & guids.\nfunction GlobalMemoryGroups:_getGroups()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\nend\n\n-- Override the global variable (i.e. the entire table).\nfunction GlobalMemoryGroups:_setGroups(newTable)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\nend\n\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    if groups[groupName] == nil then\n        groups[groupName] = {}\n        self:_setGroups(groups)\n    end\nend\n\n\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\ngroupNameInput = {\n    greyedOutText = \"Group Name\",\n    widthPerCharacter = 100,\n    padding = 4,\n    memoryBag=self,\n}\nfunction groupNameInput:create(optionalStartingValue)\n    local effectiveText = optionalStartingValue or self.greyedOutText\n    local width = self:computeWidth(effectiveText)\n\n    self.memoryBag.createInput({\n        label=self.greyedOutText,\n        value=optionalStartingValue or nil,\n        alignment=3, -- Center aligned\n        input_function=\"groupNameInput_onCharacterTyped\", function_owner=self.memoryBag,\n        position={2.1,0.3,0}, rotation={0,270,0}, width=width, height=350,\n        font_size=250, color={0,0,0}, font_color={1,1,1},\n    })\nend\nfunction groupNameInput:computeWidth(text)\n    return (string.len(text) + self.padding) * self.widthPerCharacter\nend\nfunction groupNameInput:updatedWidth(text)\n    self.memoryBag.editInput({\n        index=0,\n        width=self:computeWidth(text)\n    })\nend\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\n    if stillEditing then\n        self:updatedWidth(text)\n    else\n        if text == \"\" then\n            self:updatedWidth(self.greyedOutText)\n        end\n    end\nend\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\n    groupNameInput:onCharacterTyped(text, stillEditing)\nend\nfunction groupNameInput:setGroupNameToInputField()\n    local inputFields = self.memoryBag.getInputs()\n    if inputFields ~= nil then\n        -- Get input field 0, which corresponds to the groupNameInput.\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\n        local nameField = nil\n        for _,field in ipairs(inputFields) do\n            if field.index == 0 then\n                nameField = field\n            end\n        end\n\n        memoryGroupName:set(nameField.value)\n    end\nend\n\n\n\n\n\n--//////////////////////////////////////////////////////////////////////////////\n\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList,[\"groupName\"]=memoryGroupName:get()}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n    local bagObjList = self.getObjects()\n    for _, bagObj in ipairs(bagObjList) do\n        local data = bagObj.lua_script_state\n        if data ~= nil then\n            local j = JSON.decode(data)\n            if j ~= nil and j.ml ~= nil then\n                for guid, entry in pairs(j.ml) do\n                    memoryList[guid] = entry\n                end\n            end\n        end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    GlobalMemoryGroups:onLoad(self.getGUID())\n    AllMemoryBagsInScene:add(self.getGUID())\n\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n        memoryGroupName:set(loaded_data.groupName)\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n        memoryGroupName:set(nil)\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n    local objTable = {}\n    local curObj = {}\n\n    for guid in pairs(memoryListBackup) do\n        curObj = getObjectFromGUID(guid)\n        table.insert(objTable, curObj)\n    end\n\n    return objTable\n    -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    buttonIndexMap = {}\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n        objsToHaveButtons = getAllObjectsInMemory()\n    else\n        objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Workaround for custom PDFs\n            if obj.Book then\n                objPos.y = objPos.y + 0.5\n            end\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n                color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color=color,\n            })\n            buttonIndexMap[obj.getGUID()] = howManyButtons\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n        self.createButton({\n            label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n            position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\n        })\n\n        self.createButton({\n            label=\"Selection\", click_function=\"editDragSelection\", function_owner=self,\n            position={0,0.3,2}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={1,1,1}\n        })\n        groupNameInput:create(memoryGroupName:get())\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(obj, move)\n    local index = buttonIndexMap[obj.getGUID()]\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n        theList = moveList\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\n            local prevObj = getObjectFromGUID(previousGuid)\n            prevObj.highlightOff()\n            self.editButton({index=previousIndex, color=colorMove})\n            theList[previousGuid] = nil\n        end\n        previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock(),\n            tint=obj.getColorTint()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        if move == true then\n            color = colorMove\n        end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\nfunction editDragSelection(bagObj, player, remove)\n    local selectedObjs = Player[player].getSelectedObjects()\n    if not remove then\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            --Ignore if already in the memory list, or does not have a button\n            if index and not memoryList[obj.getGUID()] then\n                self.editButton({index=index, color={0,1,0,0.6}})\n                --Adding pos/rot to memory table\n                local pos, rot = obj.getPosition(), obj.getRotation()\n                --I need to add it like this or it won't save due to indexing issue\n                memoryList[obj.getGUID()] = {\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n                    lock=obj.getLock(),\n                    tint=obj.getColorTint()\n                }\n                obj.highlightOn({0,1,0})\n            end\n        end\n    else\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            if index and memoryList[obj.getGUID()] then\n                color = {0.75,0.25,0.25,0.6}\n                self.editButton({index=index, color=color})\n                memoryList[obj.getGUID()] = nil\n                obj.highlightOff()\n            end\n        end\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            self.clearInputs()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n        memoryList = memoryListBackup\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    groupNameInput:setGroupNameToInputField()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n    for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        memoryListBackup[guid] = nil\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n            memoryListBackup[guid].tint = obj.getColorTint()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    memoryGroupName:set(nil)\n    self.clearButtons()\n    self.clearInputs()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n        position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    if anyOtherBagsInMyGroupArePlaced() then\n        recallOtherBagsInMyGroup()\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\n    else\n        _placeObjects()\n    end\nend\n\nfunction _placeObjects()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n            obj.setColorTint(entry.tint)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    item.setColorTint(entry.tint)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n    local angle = math.rad(obj.getRotation().y)\n    local x = desiredPos.x * math.sin(angle)\n    local z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n    local mult = 10^(dec or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\nExample:\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\n--]]\nAllMemoryBagsInScene = {\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\n}\n\nfunction AllMemoryBagsInScene:add(guid)\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\n    table.insert(guids, guid)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\nend\n\nfunction AllMemoryBagsInScene:getGuidList()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\nend",
      "LuaScriptState": "{\"ml\":{\"02ec54\":{\"lock\":false,\"pos\":{\"x\":44.1462,\"y\":1.4951,\"z\":-31.3382},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"09497e\":{\"lock\":false,\"pos\":{\"x\":47.8795,\"y\":1.4951,\"z\":-19.7865},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"16fe0a\":{\"lock\":false,\"pos\":{\"x\":47.8451,\"y\":1.4951,\"z\":-35.8649},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1ae912\":{\"lock\":false,\"pos\":{\"x\":47.8641,\"y\":1.4951,\"z\":-22.0902},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"204528\":{\"lock\":false,\"pos\":{\"x\":40.6046,\"y\":1.4951,\"z\":-1.2535},\"rot\":{\"x\":0,\"y\":270.0029,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"221d4b\":{\"lock\":false,\"pos\":{\"x\":47.861,\"y\":1.4951,\"z\":-26.6785},\"rot\":{\"x\":0,\"y\":270.023,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"28e035\":{\"lock\":false,\"pos\":{\"x\":44.1462,\"y\":1.4951,\"z\":-29.0383},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"33b9d7\":{\"lock\":false,\"pos\":{\"x\":44.188,\"y\":1.4951,\"z\":-1.2535},\"rot\":{\"x\":0,\"y\":270.0034,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"36d4ef\":{\"lock\":false,\"pos\":{\"x\":47.8329,\"y\":1.4951,\"z\":-15.0686},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3883f7\":{\"lock\":false,\"pos\":{\"x\":40.5089,\"y\":1.4951,\"z\":-19.9811},\"rot\":{\"x\":0,\"y\":270.0269,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3a16d0\":{\"lock\":false,\"pos\":{\"x\":44.1879,\"y\":1.4951,\"z\":-8.1538},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4beb99\":{\"lock\":false,\"pos\":{\"x\":44.1462,\"y\":1.4951,\"z\":-19.8382},\"rot\":{\"x\":0,\"y\":269.9688,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4e15d4\":{\"lock\":false,\"pos\":{\"x\":47.8609,\"y\":1.4951,\"z\":-28.9785},\"rot\":{\"x\":0,\"y\":270.0016,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4e5300\":{\"lock\":false,\"pos\":{\"x\":47.861,\"y\":1.4951,\"z\":-24.3787},\"rot\":{\"x\":0,\"y\":270.0164,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"514bc8\":{\"lock\":false,\"pos\":{\"x\":40.509,\"y\":1.4951,\"z\":-22.2812},\"rot\":{\"x\":0,\"y\":270.0246,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"617737\":{\"lock\":false,\"pos\":{\"x\":47.8528,\"y\":1.4951,\"z\":-12.7824},\"rot\":{\"x\":0,\"y\":270.016,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"62a139\":{\"lock\":false,\"pos\":{\"x\":44.188,\"y\":1.4951,\"z\":-3.5535},\"rot\":{\"x\":0,\"y\":270.0034,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6b4cda\":{\"lock\":false,\"pos\":{\"x\":47.8537,\"y\":1.4951,\"z\":-8.1655},\"rot\":{\"x\":0,\"y\":270.0034,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"78ad47\":{\"lock\":false,\"pos\":{\"x\":44.1462,\"y\":1.4951,\"z\":-26.7383},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"85378a\":{\"lock\":false,\"pos\":{\"x\":47.8685,\"y\":1.4951,\"z\":-22.0853},\"rot\":{\"x\":0,\"y\":270.0001,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"898151\":{\"lock\":false,\"pos\":{\"x\":47.8538,\"y\":1.4951,\"z\":-5.8655},\"rot\":{\"x\":0,\"y\":270.0116,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9d874e\":{\"lock\":false,\"pos\":{\"x\":47.8795,\"y\":1.4951,\"z\":-19.7865},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9dfd8e\":{\"lock\":false,\"pos\":{\"x\":47.861,\"y\":1.4951,\"z\":-33.5784},\"rot\":{\"x\":0,\"y\":270.0016,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"aff7b4\":{\"lock\":false,\"pos\":{\"x\":47.8537,\"y\":1.4951,\"z\":-3.5651},\"rot\":{\"x\":0,\"y\":270.0002,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ba33c6\":{\"lock\":false,\"pos\":{\"x\":44.1494,\"y\":1.4951,\"z\":-22.1561},\"rot\":{\"x\":0,\"y\":269.9884,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bf1b06\":{\"lock\":false,\"pos\":{\"x\":44.1879,\"y\":1.4951,\"z\":-5.8538},\"rot\":{\"x\":0,\"y\":270.0007,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c9bf3b\":{\"lock\":false,\"pos\":{\"x\":40.6091,\"y\":1.4951,\"z\":-3.5494},\"rot\":{\"x\":0,\"y\":269.9995,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"cfe1ac\":{\"lock\":false,\"pos\":{\"x\":44.1463,\"y\":1.4951,\"z\":-24.4389},\"rot\":{\"x\":0,\"y\":269.9864,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d4355d\":{\"lock\":false,\"pos\":{\"x\":47.8608,\"y\":1.4951,\"z\":-31.2782},\"rot\":{\"x\":0,\"y\":269.9789,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ded3c5\":{\"lock\":false,\"pos\":{\"x\":47.8537,\"y\":1.4951,\"z\":-10.4651},\"rot\":{\"x\":0,\"y\":269.9916,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00003\":{\"lock\":false,\"pos\":{\"x\":47.8451,\"y\":1.4951,\"z\":-35.8649},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00004\":{\"lock\":false,\"pos\":{\"x\":47.8329,\"y\":1.4951,\"z\":-15.0686},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e010c4\":{\"lock\":false,\"pos\":{\"x\":47.8538,\"y\":1.4951,\"z\":-1.2651},\"rot\":{\"x\":0,\"y\":270.0037,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0a474\":{\"lock\":false,\"pos\":{\"x\":44.1225,\"y\":1.4951,\"z\":-35.9119},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e3e1b7\":{\"lock\":false,\"pos\":{\"x\":44.1407,\"y\":1.4951,\"z\":-33.6223},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e98295\":{\"lock\":false,\"pos\":{\"x\":47.8329,\"y\":1.4951,\"z\":-15.0686},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f0db9f\":{\"lock\":false,\"pos\":{\"x\":47.8608,\"y\":1.4951,\"z\":-35.8781},\"rot\":{\"x\":0,\"y\":269.9963,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
      "ContainedObjects": [
        {
          "GUID": "02ec54",
          "Name": "Card",
          "Transform": {
            "rotX": 3.42152546e-08,
            "rotY": 270.0,
            "rotZ": -2.40003857e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Sea of Stars (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"87a139dc-0355-49d0-9b6a-276618470e74\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Spell. Blessed\",\"level\":3,\"id\":\"87a139dc-0355-49d0-9b6a-276618470e74\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 271300,
          "CustomDeck": {
            "2713": {
              "FaceURL": "https://i.ibb.co/bJdqCCV/4be22fae404c.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "204528",
          "Name": "Card",
          "Transform": {
            "rotX": 5.63319951e-08,
            "rotY": 270.0029,
            "rotZ": -8.304051e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Ruination",
          "GMNotes": "{\"TtsZoopGuid\":\"4b291588-2f8b-4f62-b214-225cc2de19f4\",\"type\":\"Skill\",\"class\":\"Mystic\",\"traits\":\"Innate. Fated\",\"willpowerIcons\":1,\"wildIcons\":1,\"level\":0,\"intellectIcons\":1,\"id\":\"4b291588-2f8b-4f62-b214-225cc2de19f4\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 269600,
          "CustomDeck": {
            "2696": {
              "FaceURL": "https://i.ibb.co/FWpxHwY/ffa7d91233c8.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "221d4b",
          "Name": "Card",
          "Transform": {
            "rotX": -3.93486026e-08,
            "rotY": 270.023,
            "rotZ": 2.81575382e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Astral Projection (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"8e2ecc48-4f56-462f-b260-a5b647b2d380\",\"type\":\"Asset\",\"permanent\":true,\"class\":\"Mystic\",\"traits\":\"Talent. Ritual\",\"level\":3,\"id\":\"8e2ecc48-4f56-462f-b260-a5b647b2d380\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 270100,
          "CustomDeck": {
            "2701": {
              "FaceURL": "https://i.ibb.co/LvVsznm/8ebded84ed7e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "28e035",
          "Name": "Card",
          "Transform": {
            "rotX": -6.53175647e-08,
            "rotY": 270.0,
            "rotZ": 1.60292231e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fragmentum (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"bb7ae3f8-8d45-4035-a618-981e553d96c3\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Insight\",\"intellectIcons\":1,\"wildIcons\":1,\"cost\":1,\"level\":3,\"id\":\"bb7ae3f8-8d45-4035-a618-981e553d96c3\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 276700,
          "CustomDeck": {
            "2767": {
              "FaceURL": "https://i.ibb.co/4drNJ3q/f375338d02ee.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "33b9d7",
          "Name": "Card",
          "Transform": {
            "rotX": 1.49976159e-07,
            "rotY": 270.0034,
            "rotZ": -2.76749461e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Equivalent Exchange",
          "GMNotes": "{\"TtsZoopGuid\":\"d35c52fa-18e4-41ef-b679-765eee5af591\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Ritual\",\"combatIcons\":1,\"willpowerIcons\":1,\"cost\":0,\"level\":0,\"id\":\"d35c52fa-18e4-41ef-b679-765eee5af591\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 628800,
          "CustomDeck": {
            "6288": {
              "FaceURL": "https://i.ibb.co/cKBFbmb/977512ba182b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "3883f7",
          "Name": "Card",
          "Transform": {
            "rotX": 1.40840882e-07,
            "rotY": 270.0269,
            "rotZ": -1.58782584e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Ruination (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"f1d563de-3d93-4c48-82e9-8ac5fc7da9b0\",\"type\":\"Skill\",\"class\":\"Mystic\",\"traits\":\"Innate. Developed. Fated\",\"willpowerIcons\":1,\"wildIcons\":2,\"level\":2,\"intellectIcons\":1,\"id\":\"f1d563de-3d93-4c48-82e9-8ac5fc7da9b0\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 271000,
          "CustomDeck": {
            "2710": {
              "FaceURL": "https://i.ibb.co/5R4sb4y/1fc39400f19d.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "3a16d0",
          "Name": "Card",
          "Transform": {
            "rotX": -6.396101e-07,
            "rotY": 270.0,
            "rotZ": 4.96888077e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Last Rites",
          "GMNotes": "{\"TtsZoopGuid\":\"14e1b997-2a71-4a26-9548-01d8a267b68f\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Ritual\",\"cost\":3,\"level\":0,\"id\":\"14e1b997-2a71-4a26-9548-01d8a267b68f\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 270000,
          "CustomDeck": {
            "2700": {
              "FaceURL": "https://i.ibb.co/47YW6Vj/6609a63e8bbb.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "4beb99",
          "Name": "Card",
          "Transform": {
            "rotX": -6.367471e-08,
            "rotY": 269.9688,
            "rotZ": -2.27095327e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Imbue Spirit (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"e26a1943-29e5-41d8-8086-cec128192e41\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Ritual. Upgrade\",\"willpowerIcons\":1,\"cost\":1,\"level\":1,\"id\":\"e26a1943-29e5-41d8-8086-cec128192e41\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 664300,
          "CustomDeck": {
            "6643": {
              "FaceURL": "https://i.ibb.co/543DPnH/c492229a3ae4.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "4e15d4",
          "Name": "Card",
          "Transform": {
            "rotX": -1.46429386e-07,
            "rotY": 270.0016,
            "rotZ": -5.991283e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Paper Lantern (3)",
          "Description": "Chouchin Obake",
          "GMNotes": "{\"TtsZoopGuid\":\"64f60cd0-14b1-41d4-a83c-ce23a77dab88\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Tool. Cursed\",\"intellectIcons\":2,\"cost\":3,\"level\":3,\"id\":\"64f60cd0-14b1-41d4-a83c-ce23a77dab88\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 269500,
          "CustomDeck": {
            "2695": {
              "FaceURL": "https://i.ibb.co/rp6cpBG/73c4f91c2075.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "4e5300",
          "Name": "Card",
          "Transform": {
            "rotX": 1.13848529e-07,
            "rotY": 270.0164,
            "rotZ": -2.0896006e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Malleus Maleficarum (3)",
          "Description": "Hammer of Witches",
          "GMNotes": "{\"TtsZoopGuid\":\"0946c14c-d645-4ec7-9752-807346eb7fe2\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Relic. Tome. Cursed\",\"combatIcons\":2,\"intellectIcons\":1,\"cost\":2,\"level\":3,\"id\":\"0946c14c-d645-4ec7-9752-807346eb7fe2\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 276300,
          "CustomDeck": {
            "2763": {
              "FaceURL": "https://i.ibb.co/k2dM1GF/8d74e99636cc.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "514bc8",
          "Name": "Card",
          "Transform": {
            "rotX": -5.384304e-08,
            "rotY": 270.0246,
            "rotZ": -1.98340331e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Dissipate (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"f6eb72bc-8c02-4aa8-9b00-791beaa21b26\",\"type\":\"Skill\",\"class\":\"Mystic\",\"traits\":\"Expert\",\"intellectIcons\":2,\"willpowerIcons\":2,\"level\":3,\"id\":\"f6eb72bc-8c02-4aa8-9b00-791beaa21b26\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 644300,
          "CustomDeck": {
            "6443": {
              "FaceURL": "https://i.ibb.co/fNHCPPD/f18b31a2debe.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "617737",
          "Name": "Card",
          "Transform": {
            "rotX": 6.03416339e-08,
            "rotY": 270.016,
            "rotZ": -4.15781756e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Parasol",
          "Description": "Karakasa Obake",
          "GMNotes": "{\"TtsZoopGuid\":\"873e6797-2cc5-4876-ae19-ff66f473cdbf\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Tool. Cursed\",\"agilityIcons\":1,\"cost\":2,\"level\":0,\"id\":\"873e6797-2cc5-4876-ae19-ff66f473cdbf\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 270500,
          "CustomDeck": {
            "2705": {
              "FaceURL": "https://i.ibb.co/8rXLjQD/4b83c520d5be.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "62a139",
          "Name": "Card",
          "Transform": {
            "rotX": 7.396408e-08,
            "rotY": 270.0034,
            "rotZ": -1.23873576e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Occult Proficiency",
          "GMNotes": "{\"TtsZoopGuid\":\"f1ec0535-ac87-4b21-90df-98e3fb33661d\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Insight\",\"intellectIcons\":1,\"willpowerIcons\":1,\"cost\":0,\"level\":0,\"id\":\"f1ec0535-ac87-4b21-90df-98e3fb33661d\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 631300,
          "CustomDeck": {
            "6313": {
              "FaceURL": "https://i.ibb.co/jZ0KM6h/1c914869beb7.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "6b4cda",
          "Name": "Card",
          "Transform": {
            "rotX": -2.862986e-08,
            "rotY": 270.0034,
            "rotZ": 2.071845e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Paper Lantern",
          "Description": "Chouchin Obake",
          "GMNotes": "{\"TtsZoopGuid\":\"1da3151e-40f2-4fba-8950-2019d6c522df\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Tool. Cursed\",\"intellectIcons\":1,\"cost\":3,\"level\":0,\"id\":\"1da3151e-40f2-4fba-8950-2019d6c522df\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 628500,
          "CustomDeck": {
            "6285": {
              "FaceURL": "https://i.ibb.co/yhNd6zM/1489a1d3f6f1.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "78ad47",
          "Name": "Card",
          "Transform": {
            "rotX": -6.53175647e-08,
            "rotY": 270.0,
            "rotZ": 1.60292231e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Condemned Vessel (2)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Ritual\",\"cost\":2,\"level\":2,\"TtsZoopGuid\":\"8b669739-bbd6-49b4-b4ea-d647a9d683b4\",\"id\":\"8b669739-bbd6-49b4-b4ea-d647a9d683b4\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 671700,
          "CustomDeck": {
            "6717": {
              "FaceURL": "https://i.ibb.co/db4MrN5/b7ca93badc97.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "85378a",
          "Name": "Card",
          "Transform": {
            "rotX": -5.47682e-09,
            "rotY": 270.000061,
            "rotZ": 1.4205294e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Remote Viewing (2)",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Spell\",\"cost\":4,\"level\":2,\"willpowerIcons\":1,\"TtsZoopGuid\":\"8961f3fc-58ad-4499-89ff-a00a3ab610eb\",\"id\":\"8961f3fc-58ad-4499-89ff-a00a3ab610eb\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 673100,
          "CustomDeck": {
            "6731": {
              "FaceURL": "https://i.ibb.co/7zH9168/e71ef4150e74.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "898151",
          "Name": "Card",
          "Transform": {
            "rotX": -8.460546e-09,
            "rotY": 270.011566,
            "rotZ": -2.480912e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Teru Teru Bozu",
          "GMNotes": "{\"TtsZoopGuid\":\"bd0aa7b4-2d9b-4022-8a2b-07f312faeed1\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Charm\",\"willpowerIcons\":1,\"cost\":2,\"level\":0,\"id\":\"bd0aa7b4-2d9b-4022-8a2b-07f312faeed1\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 270700,
          "CustomDeck": {
            "2707": {
              "FaceURL": "https://i.ibb.co/vcgcmsm/3868dd0012af.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "9d874e",
          "Name": "Card",
          "Transform": {
            "rotX": -6.53175647e-08,
            "rotY": 270.0,
            "rotZ": 1.60292231e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Miranda Beckett (1)",
          "Description": "Past, Present, Future",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Ally. Witch. Paradox\",\"cost\":2,\"level\":1,\"willpowerIcons\":1,\"TtsZoopGuid\":\"18663907-85bf-44d8-92fc-b2a3d3e19867\",\"id\":\"18663907-85bf-44d8-92fc-b2a3d3e19867\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 671500,
          "CustomDeck": {
            "6715": {
              "FaceURL": "https://i.ibb.co/0n8LJgM/796e7ce422a0.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "9dfd8e",
          "Name": "Card",
          "Transform": {
            "rotX": 3.88297536e-08,
            "rotY": 270.0016,
            "rotZ": -1.1609955e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Parasol (3)",
          "Description": "Karakasa Obake",
          "GMNotes": "{\"TtsZoopGuid\":\"dbef16f3-c92f-417b-b659-6173323060bb\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Tool. Cursed\",\"agilityIcons\":2,\"cost\":2,\"level\":3,\"id\":\"dbef16f3-c92f-417b-b659-6173323060bb\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 269400,
          "CustomDeck": {
            "2694": {
              "FaceURL": "https://i.ibb.co/GPqCDcG/845517bf4896.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "aff7b4",
          "Name": "Card",
          "Transform": {
            "rotX": 1.93195575e-07,
            "rotY": 270.0002,
            "rotZ": -1.29086459e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Ghostflame Sprite",
          "GMNotes": "{\"TtsZoopGuid\":\"cea73d7e-d528-48f1-9aa8-e8952e0fa0a4\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Ally. Geist\",\"willpowerIcons\":1,\"cost\":1,\"level\":0,\"id\":\"cea73d7e-d528-48f1-9aa8-e8952e0fa0a4\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 270800,
          "CustomDeck": {
            "2708": {
              "FaceURL": "https://i.ibb.co/86f0VR8/fe4412128023.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "ba33c6",
          "Name": "Card",
          "Transform": {
            "rotX": 4.5009358e-08,
            "rotY": 269.9884,
            "rotZ": 2.68785083e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Forsaken Land (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"147d5cf5-1ae8-4b90-a397-1db9bd765d04\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Cursed. Ritual\",\"willpowerIcons\":1,\"cost\":0,\"level\":1,\"id\":\"147d5cf5-1ae8-4b90-a397-1db9bd765d04\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 270200,
          "CustomDeck": {
            "2702": {
              "FaceURL": "https://i.ibb.co/RhVjJ71/3eeaea645c6b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "bf1b06",
          "Name": "Card",
          "Transform": {
            "rotX": 7.638428e-08,
            "rotY": 270.0007,
            "rotZ": -1.03931619e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Bolstering Sigil",
          "GMNotes": "{\"TtsZoopGuid\":\"338142ba-52e4-4317-a6e4-0b9d410ef52b\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Ritual\",\"agilityIcons\":1,\"willpowerIcons\":1,\"cost\":0,\"level\":0,\"id\":\"338142ba-52e4-4317-a6e4-0b9d410ef52b\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 628700,
          "CustomDeck": {
            "6287": {
              "FaceURL": "https://i.ibb.co/0MDS21H/8a0b0a5c775b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "c9bf3b",
          "Name": "Card",
          "Transform": {
            "rotX": -4.78890847e-08,
            "rotY": 269.9995,
            "rotZ": 1.43032281e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Omen",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Mystic\",\"traits\":\"Innate. Augury\",\"level\":0,\"willpowerIcons\":1,\"TtsZoopGuid\":\"a83c844f-0a8a-4fc5-8d75-e4c40c59a256\",\"id\":\"a83c844f-0a8a-4fc5-8d75-e4c40c59a256\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 269000,
          "CustomDeck": {
            "2690": {
              "FaceURL": "https://i.ibb.co/tLxS7dW/917c9b494449.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "cfe1ac",
          "Name": "Card",
          "Transform": {
            "rotX": 1.19035214e-07,
            "rotY": 269.9864,
            "rotZ": -2.32609125e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Call of the Void (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"79b6fdf6-090a-4e47-994e-c4b2eb194782\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Spell\",\"willpowerIcons\":1,\"wildIcons\":2,\"cost\":1,\"level\":3,\"id\":\"79b6fdf6-090a-4e47-994e-c4b2eb194782\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 628600,
          "CustomDeck": {
            "6286": {
              "FaceURL": "https://i.ibb.co/mHyv4Bf/454d346d8762.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "d4355d",
          "Name": "Card",
          "Transform": {
            "rotX": -3.190649e-08,
            "rotY": 269.9789,
            "rotZ": -1.52175925e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Shamisen (3)",
          "Description": "Shami Chourou",
          "GMNotes": "{\"TtsZoopGuid\":\"30b7938a-3260-4efb-87f9-ee631cd4da47\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Instrument. Cursed\",\"combatIcons\":2,\"cost\":2,\"level\":3,\"id\":\"30b7938a-3260-4efb-87f9-ee631cd4da47\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 270300,
          "CustomDeck": {
            "2703": {
              "FaceURL": "https://i.ibb.co/g4dbYSs/657710fea712.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "ded3c5",
          "Name": "Card",
          "Transform": {
            "rotX": 4.1871985e-08,
            "rotY": 269.9916,
            "rotZ": -2.47524127e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Shamisen",
          "Description": "Shami Chourou",
          "GMNotes": "{\"TtsZoopGuid\":\"b807e63c-149e-46c3-bd17-e346644c7aa7\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Item. Instrument. Cursed\",\"combatIcons\":1,\"cost\":2,\"level\":0,\"id\":\"b807e63c-149e-46c3-bd17-e346644c7aa7\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 314400,
          "CustomDeck": {
            "3144": {
              "FaceURL": "https://i.ibb.co/WHB0rkf/83d8bebd9c48.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e010c4",
          "Name": "Card",
          "Transform": {
            "rotX": 1.48962425e-08,
            "rotY": 270.0037,
            "rotZ": -2.571508e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Kismet's Scales",
          "Description": "Karmic Judgement",
          "GMNotes": "{\"TtsZoopGuid\":\"f7fa3f38-aa9c-4370-908a-124863c33b24\",\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Ritual. Blessed. Cursed\",\"combatIcons\":1,\"intellectIcons\":1,\"cost\":1,\"level\":0,\"id\":\"f7fa3f38-aa9c-4370-908a-124863c33b24\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 631400,
          "CustomDeck": {
            "6314": {
              "FaceURL": "https://i.ibb.co/s5Yyh8n/3287be66aa8a.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0a474",
          "Name": "Card",
          "Transform": {
            "rotX": 1.27143267e-07,
            "rotY": 270.0,
            "rotZ": -1.77291838e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Omniscience (5)",
          "GMNotes": "{\"TtsZoopGuid\":\"7b7749d5-cf99-4cce-bff7-da262e0349f8\",\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Ritual. Augury\",\"intellectIcons\":2,\"willpowerIcons\":2,\"level\":5,\"cost\":1,\"id\":\"7b7749d5-cf99-4cce-bff7-da262e0349f8\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 276900,
          "CustomDeck": {
            "2769": {
              "FaceURL": "https://i.ibb.co/DknYj8F/71cf9897da1d.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e3e1b7",
          "Name": "Card",
          "Transform": {
            "rotX": 1.3423093e-07,
            "rotY": 270.0,
            "rotZ": -1.2322765e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Coagulation (4)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Mystic\",\"traits\":\"Spell. Spirit\",\"cost\":0,\"level\":4,\"willpowerIcons\":1,\"TtsZoopGuid\":\"87c3d4a9-c5de-4a6a-b69a-c0cbc4776783\",\"id\":\"87c3d4a9-c5de-4a6a-b69a-c0cbc4776783\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 670800,
          "CustomDeck": {
            "6708": {
              "FaceURL": "https://i.ibb.co/gWQx4PF/003b70cb3bf4.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e98295",
          "Name": "Card",
          "Transform": {
            "rotX": -3.39744247e-07,
            "rotY": 270.0,
            "rotZ": -3.57891821e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Shattered Veil",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Mystic\",\"traits\":\"Spell\",\"cost\":3,\"level\":0,\"willpowerIcons\":1,\"TtsZoopGuid\":\"18f7b8e4-ab6f-46a4-8140-9174c3953fc2\",\"id\":\"18f7b8e4-ab6f-46a4-8140-9174c3953fc2\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 673300,
          "CustomDeck": {
            "6733": {
              "FaceURL": "https://i.ibb.co/9H2Drdk/b740567520a9.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        }
      ]
    },
    {
      "GUID": "446a11",
      "Name": "Bag",
      "Transform": {
        "rotX": 6.72282852e-07,
        "rotY": 89.96849,
        "rotZ": 6.719132e-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Guardian",
      "Description": "By Directsun",
      "ColorDiffuse": {
        "r": 0.0,
        "g": 0.552941144,
        "b": 1.0
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.7.0\n-- Fork of Memory Bag 2.0 by MrStump\n--\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\n\nCONFIG = {\n    MEMORY_GROUP = {\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\n        -- This gives the other bags time to recall their objects.\n        -- The delay ONLY occurs if other bags have objects out.\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30,\n    },\n}\n\n\n--[[ Memory Bag Groups ]]-------------------------------------------------------\n--[[\nUtility Memory Bags may be added to a named group, called a \"memory group\".\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\nOnly one bag from a group may have it's contents placed on the table at a time.\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\nBy default a memory bag is not in any group. It's memory group is \"nil\".\n--]]\n\nmemoryGroupName = {memoryBag=self}\nfunction memoryGroupName:get()\n    return self._name\nend\nfunction memoryGroupName:set(newName)\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\n\n    if newName == \"\" then\n        self._name = nil\n    else\n        self._name = newName\n    end\nend\n\n-- Click the \"Recall\" button on all other bags in my memory group.\nfunction recallOtherBagsInMyGroup()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        bag.call('buttonClick_recall')\n    end\nend\n\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\nfunction anyOtherBagsInMyGroupArePlaced()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        local state = bag.call('areAnyOfMyObjectsPlaced')\n        if state then return true end\n    end\n\n    return false\nend\n\n-- Return \"true\" if at least one object from this memory bag is out on the table.\nfunction areAnyOfMyObjectsPlaced()\n    for guid,_ in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then\n            return true\n        end\n    end\n    return false\nend\n\nfunction getOtherBagsInMyGroup()\n    local bags = {}\n    for bagGuid,_ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\n        if bagGuid ~= self.getGUID() then\n            bag = getObjectFromGUID(bagGuid)\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\n            if bag ~= nil then\n                table.insert(bags, bag)\n            end\n        end\n    end\n    return bags\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the names & guids of all memory bag groups.\nThe global variable is a table and holds data like this:\n{\n    'My First Group Name' = {\n        '805ebd' = {},\n        '35cc21' = {},\n        'fc8886' = {},\n    },\n    'My Second Group Name' = {\n        'f50264' = {},\n        '5f5f63' = {},\n    },\n}\n--]]\nGlobalMemoryGroups = {\n    NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups',\n}\n\n-- Call me inside this script's \"onLoad()\" method!\nfunction GlobalMemoryGroups:onLoad(myGuid)\n    -- Create and initialize the global variable if it doesn't already exist:\n    if self:_getGroups() == nil then\n        self:_setGroups({})\n    end\nend\n\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\nfunction GlobalMemoryGroups:getGroup(groupName)\n    guids = self:_getGroups()[groupName] or {}\n    return guids\nend\n\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\n    if groupName == nil or groupName == \"\" then\n        return\n    end\n\n    self:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    groups[groupName][bagGuid] = {}\n    self:_setGroups(groups)\nend\n\n-- Removes this bag from the memory group.\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\n    local groups = self:_getGroups()\n    local group = groups[groupName]\n    if group ~= nil then\n        group[bagGuid] = nil\n        self:_setGroups(groups)\n    end\nend\n\n-- Return the global variable, which is a table holding all memory group names & guids.\nfunction GlobalMemoryGroups:_getGroups()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\nend\n\n-- Override the global variable (i.e. the entire table).\nfunction GlobalMemoryGroups:_setGroups(newTable)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\nend\n\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    if groups[groupName] == nil then\n        groups[groupName] = {}\n        self:_setGroups(groups)\n    end\nend\n\n\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\ngroupNameInput = {\n    greyedOutText = \"Group Name\",\n    widthPerCharacter = 100,\n    padding = 4,\n    memoryBag=self,\n}\nfunction groupNameInput:create(optionalStartingValue)\n    local effectiveText = optionalStartingValue or self.greyedOutText\n    local width = self:computeWidth(effectiveText)\n\n    self.memoryBag.createInput({\n        label=self.greyedOutText,\n        value=optionalStartingValue or nil,\n        alignment=3, -- Center aligned\n        input_function=\"groupNameInput_onCharacterTyped\", function_owner=self.memoryBag,\n        position={2.1,0.3,0}, rotation={0,270,0}, width=width, height=350,\n        font_size=250, color={0,0,0}, font_color={1,1,1},\n    })\nend\nfunction groupNameInput:computeWidth(text)\n    return (string.len(text) + self.padding) * self.widthPerCharacter\nend\nfunction groupNameInput:updatedWidth(text)\n    self.memoryBag.editInput({\n        index=0,\n        width=self:computeWidth(text)\n    })\nend\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\n    if stillEditing then\n        self:updatedWidth(text)\n    else\n        if text == \"\" then\n            self:updatedWidth(self.greyedOutText)\n        end\n    end\nend\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\n    groupNameInput:onCharacterTyped(text, stillEditing)\nend\nfunction groupNameInput:setGroupNameToInputField()\n    local inputFields = self.memoryBag.getInputs()\n    if inputFields ~= nil then\n        -- Get input field 0, which corresponds to the groupNameInput.\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\n        local nameField = nil\n        for _,field in ipairs(inputFields) do\n            if field.index == 0 then\n                nameField = field\n            end\n        end\n\n        memoryGroupName:set(nameField.value)\n    end\nend\n\n\n\n\n\n--//////////////////////////////////////////////////////////////////////////////\n\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList,[\"groupName\"]=memoryGroupName:get()}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n    local bagObjList = self.getObjects()\n    for _, bagObj in ipairs(bagObjList) do\n        local data = bagObj.lua_script_state\n        if data ~= nil then\n            local j = JSON.decode(data)\n            if j ~= nil and j.ml ~= nil then\n                for guid, entry in pairs(j.ml) do\n                    memoryList[guid] = entry\n                end\n            end\n        end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    GlobalMemoryGroups:onLoad(self.getGUID())\n    AllMemoryBagsInScene:add(self.getGUID())\n\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n        memoryGroupName:set(loaded_data.groupName)\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n        memoryGroupName:set(nil)\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n    local objTable = {}\n    local curObj = {}\n\n    for guid in pairs(memoryListBackup) do\n        curObj = getObjectFromGUID(guid)\n        table.insert(objTable, curObj)\n    end\n\n    return objTable\n    -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    buttonIndexMap = {}\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n        objsToHaveButtons = getAllObjectsInMemory()\n    else\n        objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Workaround for custom PDFs\n            if obj.Book then\n                objPos.y = objPos.y + 0.5\n            end\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n                color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color=color,\n            })\n            buttonIndexMap[obj.getGUID()] = howManyButtons\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n        self.createButton({\n            label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n            position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\n        })\n\n        self.createButton({\n            label=\"Selection\", click_function=\"editDragSelection\", function_owner=self,\n            position={0,0.3,2}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={1,1,1}\n        })\n        groupNameInput:create(memoryGroupName:get())\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(obj, move)\n    local index = buttonIndexMap[obj.getGUID()]\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n        theList = moveList\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\n            local prevObj = getObjectFromGUID(previousGuid)\n            prevObj.highlightOff()\n            self.editButton({index=previousIndex, color=colorMove})\n            theList[previousGuid] = nil\n        end\n        previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock(),\n            tint=obj.getColorTint()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        if move == true then\n            color = colorMove\n        end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\nfunction editDragSelection(bagObj, player, remove)\n    local selectedObjs = Player[player].getSelectedObjects()\n    if not remove then\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            --Ignore if already in the memory list, or does not have a button\n            if index and not memoryList[obj.getGUID()] then\n                self.editButton({index=index, color={0,1,0,0.6}})\n                --Adding pos/rot to memory table\n                local pos, rot = obj.getPosition(), obj.getRotation()\n                --I need to add it like this or it won't save due to indexing issue\n                memoryList[obj.getGUID()] = {\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n                    lock=obj.getLock(),\n                    tint=obj.getColorTint()\n                }\n                obj.highlightOn({0,1,0})\n            end\n        end\n    else\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            if index and memoryList[obj.getGUID()] then\n                color = {0.75,0.25,0.25,0.6}\n                self.editButton({index=index, color=color})\n                memoryList[obj.getGUID()] = nil\n                obj.highlightOff()\n            end\n        end\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            self.clearInputs()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n        memoryList = memoryListBackup\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    groupNameInput:setGroupNameToInputField()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n    for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        memoryListBackup[guid] = nil\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n            memoryListBackup[guid].tint = obj.getColorTint()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    memoryGroupName:set(nil)\n    self.clearButtons()\n    self.clearInputs()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n        position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    if anyOtherBagsInMyGroupArePlaced() then\n        recallOtherBagsInMyGroup()\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\n    else\n        _placeObjects()\n    end\nend\n\nfunction _placeObjects()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n            obj.setColorTint(entry.tint)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    item.setColorTint(entry.tint)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n    local angle = math.rad(obj.getRotation().y)\n    local x = desiredPos.x * math.sin(angle)\n    local z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n    local mult = 10^(dec or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\nExample:\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\n--]]\nAllMemoryBagsInScene = {\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\n}\n\nfunction AllMemoryBagsInScene:add(guid)\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\n    table.insert(guids, guid)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\nend\n\nfunction AllMemoryBagsInScene:getGuidList()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\nend",
      "LuaScriptState": "{\"ml\":{\"06cd72\":{\"lock\":false,\"pos\":{\"x\":57.7887,\"y\":1.4951,\"z\":39.6291},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"07caad\":{\"lock\":false,\"pos\":{\"x\":57.7197,\"y\":1.4951,\"z\":18.2904},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1478ea\":{\"lock\":false,\"pos\":{\"x\":61.4249,\"y\":1.4951,\"z\":30.3432},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"379654\":{\"lock\":false,\"pos\":{\"x\":57.7539,\"y\":1.4951,\"z\":32.6991},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"426c93\":{\"lock\":false,\"pos\":{\"x\":61.4544,\"y\":1.4951,\"z\":37.3175},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"53242a\":{\"lock\":false,\"pos\":{\"x\":61.3983,\"y\":1.4951,\"z\":4.5162},\"rot\":{\"x\":0,\"y\":269.9999,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"568d88\":{\"lock\":false,\"pos\":{\"x\":57.7847,\"y\":1.4951,\"z\":37.3404},\"rot\":{\"x\":0,\"y\":269.9791,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5aff91\":{\"lock\":false,\"pos\":{\"x\":57.7091,\"y\":1.4951,\"z\":13.684},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"61d0e0\":{\"lock\":false,\"pos\":{\"x\":61.3981,\"y\":1.4951,\"z\":16.0152},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"70465e\":{\"lock\":false,\"pos\":{\"x\":61.4249,\"y\":1.4951,\"z\":28.0557},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7b3f7b\":{\"lock\":false,\"pos\":{\"x\":61.3986,\"y\":1.4951,\"z\":18.3158},\"rot\":{\"x\":0,\"y\":270.012,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"82a5a4\":{\"lock\":false,\"pos\":{\"x\":61.3986,\"y\":1.4951,\"z\":11.4157},\"rot\":{\"x\":0,\"y\":269.977,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8af77f\":{\"lock\":false,\"pos\":{\"x\":61.4545,\"y\":1.4951,\"z\":35.0168},\"rot\":{\"x\":0,\"y\":270.0308,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9bc5fa\":{\"lock\":false,\"pos\":{\"x\":61.4526,\"y\":1.5121,\"z\":32.6736},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a8c280\":{\"lock\":false,\"pos\":{\"x\":61.4544,\"y\":1.4951,\"z\":39.6175},\"rot\":{\"x\":0,\"y\":270.0034,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a98744\":{\"lock\":false,\"pos\":{\"x\":54.2054,\"y\":1.4951,\"z\":39.6291},\"rot\":{\"x\":0,\"y\":269.9783,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"be7874\":{\"lock\":false,\"pos\":{\"x\":61.3986,\"y\":1.4951,\"z\":6.8158},\"rot\":{\"x\":0,\"y\":269.9758,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c02e42\":{\"lock\":false,\"pos\":{\"x\":61.3985,\"y\":1.4951,\"z\":9.1157},\"rot\":{\"x\":0,\"y\":269.9971,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d11a3b\":{\"lock\":false,\"pos\":{\"x\":54.1219,\"y\":1.4951,\"z\":20.4656},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d8ff7a\":{\"lock\":false,\"pos\":{\"x\":61.3922,\"y\":1.4951,\"z\":20.6091},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00001\":{\"lock\":false,\"pos\":{\"x\":61.4259,\"y\":1.4951,\"z\":25.7551},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00008\":{\"lock\":false,\"pos\":{\"x\":54.2054,\"y\":1.4951,\"z\":37.3291},\"rot\":{\"x\":0,\"y\":270.0235,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00009\":{\"lock\":false,\"pos\":{\"x\":57.7887,\"y\":1.4951,\"z\":35.0286},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0000b\":{\"lock\":false,\"pos\":{\"x\":54.2064,\"y\":1.4951,\"z\":35.0205},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00018\":{\"lock\":false,\"pos\":{\"x\":61.3535,\"y\":1.4951,\"z\":13.7458},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f0198f\":{\"lock\":false,\"pos\":{\"x\":54.098,\"y\":1.4951,\"z\":18.1557},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f13715\":{\"lock\":false,\"pos\":{\"x\":57.7202,\"y\":1.4951,\"z\":20.5905},\"rot\":{\"x\":0,\"y\":269.97,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f40a52\":{\"lock\":false,\"pos\":{\"x\":54.1228,\"y\":1.4951,\"z\":15.8681},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fd3f06\":{\"lock\":false,\"pos\":{\"x\":57.705,\"y\":1.4951,\"z\":16.0009},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
      "ContainedObjects": [
        {
          "GUID": "06cd72",
          "Name": "Card",
          "Transform": {
            "rotX": 1.15133368e-07,
            "rotY": 270.0,
            "rotZ": -1.13277821e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Aim True",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Spirit. Blessed\",\"cost\":1,\"level\":0,\"willpowerIcons\":1,\"TtsZoopGuid\":\"203423e1-7aef-44bf-8069-f16521bcbfba\",\"combatIcons\":1,\"id\":\"203423e1-7aef-44bf-8069-f16521bcbfba\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 640400,
          "CustomDeck": {
            "6404": {
              "FaceURL": "https://i.ibb.co/7QWnZHm/d272b13af964.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "07caad",
          "Name": "Card",
          "Transform": {
            "rotX": -5.166493e-08,
            "rotY": 270.0,
            "rotZ": 1.78308184e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Rend (1)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Spell. Spirit\",\"cost\":1,\"level\":1,\"combatIcons\":1,\"TtsZoopGuid\":\"6f307206-916c-4358-973f-3fd7fad714b7\",\"willpowerIcons\":1,\"id\":\"6f307206-916c-4358-973f-3fd7fad714b7\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 669400,
          "CustomDeck": {
            "6694": {
              "FaceURL": "https://i.ibb.co/LJnSyWd/ea42ad9ba19c.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "1478ea",
          "Name": "Card",
          "Transform": {
            "rotX": -5.166493e-08,
            "rotY": 270.0,
            "rotZ": 1.78308184e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Hunting Wolf",
          "GMNotes": "{\"TtsZoopGuid\":\"fc94092e-66a0-4930-afa6-08b99cea416e\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Ally. Creature\",\"agilityIcons\":1,\"combatIcons\":1,\"cost\":5,\"level\":0,\"id\":\"fc94092e-66a0-4930-afa6-08b99cea416e\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 628900,
          "CustomDeck": {
            "6289": {
              "FaceURL": "https://i.ibb.co/rw36q4J/05b57c7934bc.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "379654",
          "Name": "Card",
          "Transform": {
            "rotX": -2.22762139e-07,
            "rotY": 270.0,
            "rotZ": 1.87390512e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Armistice",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Tactic. Pact\",\"cost\":5,\"level\":0,\"intellectIcons\":2,\"TtsZoopGuid\":\"94abfc0b-500b-4eb3-90c1-fb84deb120ef\",\"id\":\"94abfc0b-500b-4eb3-90c1-fb84deb120ef\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 669500,
          "CustomDeck": {
            "6695": {
              "FaceURL": "https://i.ibb.co/HnFRff1/c60b63feb017.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "426c93",
          "Name": "Card",
          "Transform": {
            "rotX": 1.15133368e-07,
            "rotY": 270.0,
            "rotZ": -1.13277821e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Paladin's Carbine",
          "GMNotes": "{\"TtsZoopGuid\":\"4d977ec7-e99a-4704-8c03-02b0e0387f95\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Weapon. Firearm. Blessed\",\"willpowerIcons\":1,\"cost\":3,\"level\":0,\"id\":\"4d977ec7-e99a-4704-8c03-02b0e0387f95\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 629500,
          "CustomDeck": {
            "6295": {
              "FaceURL": "https://i.ibb.co/hLjKDvx/7110c1181a23.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "53242a",
          "Name": "Card",
          "Transform": {
            "rotX": 7.264547e-08,
            "rotY": 269.999939,
            "rotZ": -5.5106737e-09,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Hunting Wolf (5)",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Ally. Creature\",\"cost\":5,\"level\":5,\"agilityIcons\":1,\"combatIcons\":1,\"wildIcons\":1,\"TtsZoopGuid\":\"aaba78a3-26a7-4828-b51c-4766ea626764\",\"id\":\"aaba78a3-26a7-4828-b51c-4766ea626764\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 630300,
          "CustomDeck": {
            "6303": {
              "FaceURL": "https://i.ibb.co/4VD3L9j/2342a3a92209.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "568d88",
          "Name": "Card",
          "Transform": {
            "rotX": -1.08337595e-07,
            "rotY": 269.9791,
            "rotZ": -1.47615467e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Arcane Grasp",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Spell. Upgrade\",\"cost\":1,\"level\":0,\"willpowerIcons\":1,\"TtsZoopGuid\":\"3a5aa4b3-f2ed-42c1-a4fc-690939bc01f5\",\"id\":\"3a5aa4b3-f2ed-42c1-a4fc-690939bc01f5\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 669600,
          "CustomDeck": {
            "6696": {
              "FaceURL": "https://i.ibb.co/hMKpC1t/7edec62a2ab5.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "5aff91",
          "Name": "Card",
          "Transform": {
            "rotX": 8.517187e-08,
            "rotY": 270.0,
            "rotZ": -9.32993345e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Cull the Horde (2)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Tactic\",\"cost\":2,\"level\":2,\"agilityIcons\":1,\"combatIcons\":1,\"wildIcons\":1,\"TtsZoopGuid\":\"393ef593-f9ab-4ba0-b61f-0dd496f04343\",\"id\":\"393ef593-f9ab-4ba0-b61f-0dd496f04343\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 669700,
          "CustomDeck": {
            "6697": {
              "FaceURL": "https://i.ibb.co/sKfPVJM/f1ec6182e47b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "61d0e0",
          "Name": "Card",
          "Transform": {
            "rotX": 1.97959352e-07,
            "rotY": 270.0,
            "rotZ": -1.05964332e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Ame-no-Nuboko (2)",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Relic. Weapon. Melee\",\"cost\":3,\"level\":2,\"agilityIcons\":1,\"combatIcons\":1,\"TtsZoopGuid\":\"69da0656-e705-468b-9a13-a13587c12edd\",\"id\":\"69da0656-e705-468b-9a13-a13587c12edd\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 669800,
          "CustomDeck": {
            "6698": {
              "FaceURL": "https://i.ibb.co/hFzXwxk/9f9186144801.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "70465e",
          "Name": "Card",
          "Transform": {
            "rotX": -5.166493e-08,
            "rotY": 270.0,
            "rotZ": 1.78308184e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Requisition",
          "GMNotes": "{\"TtsZoopGuid\":\"97650fc9-21b6-41a4-9cb5-e644e852874d\",\"type\":\"Asset\",\"permanent\":true,\"class\":\"Guardian\",\"traits\":\"Supply\",\"level\":0,\"id\":\"97650fc9-21b6-41a4-9cb5-e644e852874d\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 629100,
          "CustomDeck": {
            "6291": {
              "FaceURL": "https://i.ibb.co/7CHhPnK/d1921f6163c6.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "7b3f7b",
          "Name": "Card",
          "Transform": {
            "rotX": -8.993755e-08,
            "rotY": 270.012,
            "rotZ": 5.19049e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Censer (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"75f2454c-3e16-4e1f-8fca-e7679df6fdbc\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Tool. Blessed\",\"willpowerIcons\":2,\"cost\":2,\"level\":2,\"id\":\"75f2454c-3e16-4e1f-8fca-e7679df6fdbc\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 295300,
          "CustomDeck": {
            "2953": {
              "FaceURL": "https://i.ibb.co/1fJRfJx/e6a16a3ba72a.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "82a5a4",
          "Name": "Card",
          "Transform": {
            "rotX": -2.18530985e-07,
            "rotY": 269.977,
            "rotZ": 4.081839e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Sister Lucille (3)",
          "Description": "Pious Protector",
          "GMNotes": "{\"TtsZoopGuid\":\"de13b41c-d023-4d53-8084-653e2f3e2ff7\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Ally. Believer. Blessed\",\"willpowerIcons\":1,\"wildIcons\":1,\"cost\":3,\"level\":3,\"id\":\"de13b41c-d023-4d53-8084-653e2f3e2ff7\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 296500,
          "CustomDeck": {
            "2965": {
              "FaceURL": "https://i.ibb.co/Gp79Dr3/c90dead2677d.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "8af77f",
          "Name": "Card",
          "Transform": {
            "rotX": -6.567884e-08,
            "rotY": 270.0308,
            "rotZ": -1.10454522e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Power Manifest",
          "GMNotes": "{\"TtsZoopGuid\":\"097695c3-0fbb-4d9b-bc7c-2ffdcfd64b86\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Talent\",\"combatIcons\":1,\"intellectIcons\":1,\"willpowerIcons\":1,\"cost\":1,\"level\":0,\"id\":\"097695c3-0fbb-4d9b-bc7c-2ffdcfd64b86\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 295600,
          "CustomDeck": {
            "2956": {
              "FaceURL": "https://i.ibb.co/G3XVkWT/9ec12bd6136e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "9bc5fa",
          "Name": "Deck",
          "Transform": {
            "rotX": -2.53681e-08,
            "rotY": 270.0,
            "rotZ": -8.041637e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "PlayerCard"
          ],
          "Hands": false,
          "DeckIDs": [
            629900,
            629200
          ],
          "CustomDeck": {
            "6299": {
              "FaceURL": "https://i.ibb.co/2dzWHwL/9fd2ace99c2a.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            },
            "6292": {
              "FaceURL": "https://i.ibb.co/zhQPgt8/5eb2a32f3c14.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "e00017",
              "Name": "Card",
              "Transform": {
                "rotX": 359.583923,
                "rotY": 269.999634,
                "rotZ": 0.05176177,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Shrouded Shadow",
              "GMNotes": "{\"TtsZoopGuid\":\"e91ed9c2-373b-4790-9588-3ad1587dbac5\",\"type\":\"Enemy\",\"traits\":\"Monster\",\"weakness\":true,\"id\":\"e91ed9c2-373b-4790-9588-3ad1587dbac5\"}",
              "Tags": [
                "PlayerCard"
              ],
              "CardID": 629900,
              "CustomDeck": {
                "2804": {
                  "FaceURL": "https://i.ibb.co/2dzWHwL/9fd2ace99c2a.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "5f1827",
              "Name": "Card",
              "Transform": {
                "rotX": -0.000445238577,
                "rotY": 270.000061,
                "rotZ": -0.000369706715,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "The Black Box",
              "Description": "Record of Lost Souls",
              "GMNotes": "{\"TtsZoopGuid\":\"a4989437-7827-42df-b1fb-0d5866d3237f\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Relic. Cursed\",\"intellectIcons\":1,\"willpowerIcons\":1,\"cost\":3,\"level\":0,\"id\":\"a4989437-7827-42df-b1fb-0d5866d3237f\"}",
              "Tags": [
                "Asset",
                "PlayerCard"
              ],
              "CardID": 629200,
              "CustomDeck": {
                "6292": {
                  "FaceURL": "https://i.ibb.co/zhQPgt8/5eb2a32f3c14.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "a8c280",
          "Name": "Card",
          "Transform": {
            "rotX": -4.98398336e-08,
            "rotY": 270.0034,
            "rotZ": -7.55284049e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Censer",
          "GMNotes": "{\"TtsZoopGuid\":\"9e7c88c8-347c-44d9-84a6-bd4563aec313\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Tool. Blessed\",\"willpowerIcons\":1,\"cost\":2,\"level\":0,\"id\":\"9e7c88c8-347c-44d9-84a6-bd4563aec313\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 295400,
          "CustomDeck": {
            "2954": {
              "FaceURL": "https://i.ibb.co/7WX8TvQ/bf0ce26f4f54.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "a98744",
          "Name": "Card",
          "Transform": {
            "rotX": 1.37744067e-07,
            "rotY": 269.9783,
            "rotZ": -1.748323e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Swift Deployment",
          "GMNotes": "{\"TtsZoopGuid\":\"a8b9d450-3e3a-4db0-962d-1e8d46cf4acb\",\"type\":\"Skill\",\"class\":\"Guardian\",\"traits\":\"Practiced\",\"wildIcons\":1,\"level\":0,\"agilityIcons\":1,\"combatIcons\":1,\"intellectIcons\":1,\"id\":\"a8b9d450-3e3a-4db0-962d-1e8d46cf4acb\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 278600,
          "CustomDeck": {
            "2786": {
              "FaceURL": "https://i.ibb.co/MMVkjpL/ffb1d0e459db.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "be7874",
          "Name": "Card",
          "Transform": {
            "rotX": -7.559312e-08,
            "rotY": 269.9758,
            "rotZ": -8.625685e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Browning M2 (5)",
          "GMNotes": "{\"TtsZoopGuid\":\"700137a6-c649-462d-bd15-5b9b2dbf2442\",\"type\":\"Asset\",\"uses\":[{\"count\":8,\"token\":\"resource\",\"type\":\"Ammo\"}],\"class\":\"Guardian\",\"traits\":\"Item. Weapon. Firearm\",\"combatIcons\":3,\"wildIcons\":1,\"cost\":5,\"level\":5,\"id\":\"700137a6-c649-462d-bd15-5b9b2dbf2442\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 296100,
          "CustomDeck": {
            "2961": {
              "FaceURL": "https://i.ibb.co/44HW0gY/ded47255a514.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "c02e42",
          "Name": "Card",
          "Transform": {
            "rotX": 5.52223156e-09,
            "rotY": 269.9971,
            "rotZ": -2.16401176e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Hard-Boiled (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"27d5f6da-5f5a-452f-9e41-28511ed8b341\",\"type\":\"Asset\",\"permanent\":true,\"class\":\"Guardian\",\"traits\":\"Talent\",\"level\":3,\"id\":\"27d5f6da-5f5a-452f-9e41-28511ed8b341\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 295900,
          "CustomDeck": {
            "2959": {
              "FaceURL": "https://i.ibb.co/R3YCS8v/f6290ad00bcb.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "d11a3b",
          "Name": "Card",
          "Transform": {
            "rotX": -5.166493e-08,
            "rotY": 270.0,
            "rotZ": 1.78308184e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Execution (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"d0fc308f-4e04-409c-aa38-abc881189bb1\",\"type\":\"Skill\",\"class\":\"Guardian\",\"traits\":\"Practiced. Expert. Fated\",\"combatIcons\":1,\"wildIcons\":2,\"level\":2,\"willpowerIcons\":1,\"id\":\"d0fc308f-4e04-409c-aa38-abc881189bb1\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 280600,
          "CustomDeck": {
            "2806": {
              "FaceURL": "https://i.ibb.co/NZVDD1H/41bf76f0869d.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "d8ff7a",
          "Name": "Card",
          "Transform": {
            "rotX": -5.166493e-08,
            "rotY": 270.0,
            "rotZ": 1.78308184e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Blood Tithe (1)",
          "GMNotes": "{\"id\":\"78f57490-917b-4042-9eb1-db28330e6b6c\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Ritual\",\"cost\":1,\"level\":1,\"combatIcons\":1,\"TtsZoopGuid\":\"78f57490-917b-4042-9eb1-db28330e6b6c\",\"willpowerIcons\":1}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 100000,
          "CustomDeck": {
            "1000": {
              "FaceURL": "https://i.ibb.co/zSQqkN6/a4797fae53e9.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00001",
          "Name": "Card",
          "Transform": {
            "rotX": -5.166493e-08,
            "rotY": 270.0,
            "rotZ": 1.78308184e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": ".45 Colt",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Weapon. Firearm\",\"cost\":2,\"level\":0,\"combatIcons\":1,\"uses\":[{\"count\":2,\"token\":\"resource\",\"type\":\"Ammo\"}],\"TtsZoopGuid\":\"f4813d69-b9dd-450e-b403-1d4625ca9603\",\"id\":\"f4813d69-b9dd-450e-b403-1d4625ca9603\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 672400,
          "CustomDeck": {
            "6724": {
              "FaceURL": "https://i.ibb.co/7YYXdJX/335e53de69f7.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00008",
          "Name": "Card",
          "Transform": {
            "rotX": 7.912171e-08,
            "rotY": 270.0235,
            "rotZ": -1.754291e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Execution",
          "GMNotes": "{\"TtsZoopGuid\":\"cfefa6fd-1162-4bc8-ab0b-bdfb4b968c18\",\"type\":\"Skill\",\"class\":\"Guardian\",\"traits\":\"Practiced. Fated\",\"combatIcons\":1,\"wildIcons\":1,\"level\":0,\"willpowerIcons\":1,\"id\":\"cfefa6fd-1162-4bc8-ab0b-bdfb4b968c18\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 295700,
          "CustomDeck": {
            "2957": {
              "FaceURL": "https://i.ibb.co/sKQTthG/abc4f926c551.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00009",
          "Name": "Card",
          "Transform": {
            "rotX": 1.15133368e-07,
            "rotY": 270.0,
            "rotZ": -1.13277821e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Rite Disruption",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Tactic\",\"cost\":2,\"level\":0,\"combatIcons\":1,\"intellectIcons\":1,\"TtsZoopGuid\":\"1cd98f09-dc9d-4883-8b2c-3c039208c5f5\",\"id\":\"1cd98f09-dc9d-4883-8b2c-3c039208c5f5\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 672500,
          "CustomDeck": {
            "6725": {
              "FaceURL": "https://i.ibb.co/qMSFwTb/c8f2bd1ad42e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000b",
          "Name": "Card",
          "Transform": {
            "rotX": 1.15133368e-07,
            "rotY": 270.0,
            "rotZ": -1.13277821e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Valor",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Guardian\",\"traits\":\"Innate\",\"level\":0,\"agilityIcons\":1,\"combatIcons\":1,\"willpowerIcons\":1,\"TtsZoopGuid\":\"6fc6b6da-14c9-465f-9b0c-52d2f3494967\",\"id\":\"6fc6b6da-14c9-465f-9b0c-52d2f3494967\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 101000,
          "CustomDeck": {
            "1010": {
              "FaceURL": "https://i.ibb.co/7R0VVjN/e56ba464f7b0.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00018",
          "Name": "Card",
          "Transform": {
            "rotX": 8.517187e-08,
            "rotY": 270.0,
            "rotZ": -9.32993345e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "The Black Box (3)",
          "Description": "Record of Lost Souls",
          "GMNotes": "{\"TtsZoopGuid\":\"1323e5e7-e77e-4ea1-8ea2-7c0ef5983fe2\",\"type\":\"Asset\",\"class\":\"Guardian\",\"traits\":\"Item. Relic. Cursed\",\"intellectIcons\":1,\"willpowerIcons\":1,\"wildIcons\":1,\"cost\":3,\"level\":3,\"id\":\"1323e5e7-e77e-4ea1-8ea2-7c0ef5983fe2\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 629000,
          "CustomDeck": {
            "6290": {
              "FaceURL": "https://i.ibb.co/568gY7J/aef3968b45c6.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f0198f",
          "Name": "Card",
          "Transform": {
            "rotX": -5.166493e-08,
            "rotY": 270.0,
            "rotZ": 1.78308184e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Radiant (2)",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Guardian\",\"traits\":\"Innate. Developed\",\"level\":2,\"combatIcons\":1,\"willpowerIcons\":2,\"TtsZoopGuid\":\"9d9b2ceb-faad-44e7-9533-66fdb4bd71e5\",\"wildIcons\":1,\"id\":\"9d9b2ceb-faad-44e7-9533-66fdb4bd71e5\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 644000,
          "CustomDeck": {
            "6440": {
              "FaceURL": "https://i.ibb.co/VQdSt4D/3deade8f2ba0.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f13715",
          "Name": "Card",
          "Transform": {
            "rotX": 1.284142e-07,
            "rotY": 269.97,
            "rotZ": -3.47687632e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Sacred Ground (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"02f082ab-ea5f-4639-aaa4-94837dbae60f\",\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Blessed. Ritual\",\"willpowerIcons\":1,\"cost\":3,\"level\":1,\"id\":\"02f082ab-ea5f-4639-aaa4-94837dbae60f\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 297100,
          "CustomDeck": {
            "2971": {
              "FaceURL": "https://i.ibb.co/hVB22dr/4633a43ce1ca.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f40a52",
          "Name": "Card",
          "Transform": {
            "rotX": 7.363649e-08,
            "rotY": 270.0,
            "rotZ": -8.71390355e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fan the Flames (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"d5c564b2-0597-4e54-8dba-6c303a3452cc\",\"type\":\"Skill\",\"class\":\"Guardian\",\"traits\":\"Expert\",\"combatIcons\":2,\"willpowerIcons\":2,\"level\":3,\"id\":\"d5c564b2-0597-4e54-8dba-6c303a3452cc\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 294000,
          "CustomDeck": {
            "2940": {
              "FaceURL": "https://i.ibb.co/CWk8d3B/67ba7a9106e7.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "fd3f06",
          "Name": "Card",
          "Transform": {
            "rotX": 2.080076e-07,
            "rotY": 270.0,
            "rotZ": -9.529438e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Rite Disruption (2)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian\",\"traits\":\"Tactic\",\"cost\":2,\"level\":2,\"combatIcons\":1,\"intellectIcons\":2,\"TtsZoopGuid\":\"0adea832-eb58-4c01-8160-e93046bab4a4\",\"id\":\"0adea832-eb58-4c01-8160-e93046bab4a4\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 672600,
          "CustomDeck": {
            "6726": {
              "FaceURL": "https://i.ibb.co/T09xFgb/4aab07fc731c.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        }
      ]
    },
    {
      "GUID": "95d06c",
      "Name": "Bag",
      "Transform": {
        "rotX": -3.4451e-07,
        "rotY": 89.981,
        "rotZ": -1.24980932e-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Neutral/Multiclass/Weakness",
      "Description": "By Directsun",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.7.0\n-- Fork of Memory Bag 2.0 by MrStump\n--\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\n\nCONFIG = {\n    MEMORY_GROUP = {\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\n        -- This gives the other bags time to recall their objects.\n        -- The delay ONLY occurs if other bags have objects out.\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30,\n    },\n}\n\n\n--[[ Memory Bag Groups ]]-------------------------------------------------------\n--[[\nUtility Memory Bags may be added to a named group, called a \"memory group\".\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\nOnly one bag from a group may have it's contents placed on the table at a time.\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\nBy default a memory bag is not in any group. It's memory group is \"nil\".\n--]]\n\nmemoryGroupName = {memoryBag=self}\nfunction memoryGroupName:get()\n    return self._name\nend\nfunction memoryGroupName:set(newName)\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\n\n    if newName == \"\" then\n        self._name = nil\n    else\n        self._name = newName\n    end\nend\n\n-- Click the \"Recall\" button on all other bags in my memory group.\nfunction recallOtherBagsInMyGroup()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        bag.call('buttonClick_recall')\n    end\nend\n\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\nfunction anyOtherBagsInMyGroupArePlaced()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        local state = bag.call('areAnyOfMyObjectsPlaced')\n        if state then return true end\n    end\n\n    return false\nend\n\n-- Return \"true\" if at least one object from this memory bag is out on the table.\nfunction areAnyOfMyObjectsPlaced()\n    for guid,_ in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then\n            return true\n        end\n    end\n    return false\nend\n\nfunction getOtherBagsInMyGroup()\n    local bags = {}\n    for bagGuid,_ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\n        if bagGuid ~= self.getGUID() then\n            bag = getObjectFromGUID(bagGuid)\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\n            if bag ~= nil then\n                table.insert(bags, bag)\n            end\n        end\n    end\n    return bags\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the names & guids of all memory bag groups.\nThe global variable is a table and holds data like this:\n{\n    'My First Group Name' = {\n        '805ebd' = {},\n        '35cc21' = {},\n        'fc8886' = {},\n    },\n    'My Second Group Name' = {\n        'f50264' = {},\n        '5f5f63' = {},\n    },\n}\n--]]\nGlobalMemoryGroups = {\n    NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups',\n}\n\n-- Call me inside this script's \"onLoad()\" method!\nfunction GlobalMemoryGroups:onLoad(myGuid)\n    -- Create and initialize the global variable if it doesn't already exist:\n    if self:_getGroups() == nil then\n        self:_setGroups({})\n    end\nend\n\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\nfunction GlobalMemoryGroups:getGroup(groupName)\n    guids = self:_getGroups()[groupName] or {}\n    return guids\nend\n\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\n    if groupName == nil or groupName == \"\" then\n        return\n    end\n\n    self:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    groups[groupName][bagGuid] = {}\n    self:_setGroups(groups)\nend\n\n-- Removes this bag from the memory group.\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\n    local groups = self:_getGroups()\n    local group = groups[groupName]\n    if group ~= nil then\n        group[bagGuid] = nil\n        self:_setGroups(groups)\n    end\nend\n\n-- Return the global variable, which is a table holding all memory group names & guids.\nfunction GlobalMemoryGroups:_getGroups()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\nend\n\n-- Override the global variable (i.e. the entire table).\nfunction GlobalMemoryGroups:_setGroups(newTable)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\nend\n\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    if groups[groupName] == nil then\n        groups[groupName] = {}\n        self:_setGroups(groups)\n    end\nend\n\n\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\ngroupNameInput = {\n    greyedOutText = \"Group Name\",\n    widthPerCharacter = 100,\n    padding = 4,\n    memoryBag=self,\n}\nfunction groupNameInput:create(optionalStartingValue)\n    local effectiveText = optionalStartingValue or self.greyedOutText\n    local width = self:computeWidth(effectiveText)\n\n    self.memoryBag.createInput({\n        label=self.greyedOutText,\n        value=optionalStartingValue or nil,\n        alignment=3, -- Center aligned\n        input_function=\"groupNameInput_onCharacterTyped\", function_owner=self.memoryBag,\n        position={2.1,0.3,0}, rotation={0,270,0}, width=width, height=350,\n        font_size=250, color={0,0,0}, font_color={1,1,1},\n    })\nend\nfunction groupNameInput:computeWidth(text)\n    return (string.len(text) + self.padding) * self.widthPerCharacter\nend\nfunction groupNameInput:updatedWidth(text)\n    self.memoryBag.editInput({\n        index=0,\n        width=self:computeWidth(text)\n    })\nend\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\n    if stillEditing then\n        self:updatedWidth(text)\n    else\n        if text == \"\" then\n            self:updatedWidth(self.greyedOutText)\n        end\n    end\nend\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\n    groupNameInput:onCharacterTyped(text, stillEditing)\nend\nfunction groupNameInput:setGroupNameToInputField()\n    local inputFields = self.memoryBag.getInputs()\n    if inputFields ~= nil then\n        -- Get input field 0, which corresponds to the groupNameInput.\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\n        local nameField = nil\n        for _,field in ipairs(inputFields) do\n            if field.index == 0 then\n                nameField = field\n            end\n        end\n\n        memoryGroupName:set(nameField.value)\n    end\nend\n\n\n\n\n\n--//////////////////////////////////////////////////////////////////////////////\n\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList,[\"groupName\"]=memoryGroupName:get()}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n    local bagObjList = self.getObjects()\n    for _, bagObj in ipairs(bagObjList) do\n        local data = bagObj.lua_script_state\n        if data ~= nil then\n            local j = JSON.decode(data)\n            if j ~= nil and j.ml ~= nil then\n                for guid, entry in pairs(j.ml) do\n                    memoryList[guid] = entry\n                end\n            end\n        end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    GlobalMemoryGroups:onLoad(self.getGUID())\n    AllMemoryBagsInScene:add(self.getGUID())\n\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n        memoryGroupName:set(loaded_data.groupName)\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n        memoryGroupName:set(nil)\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n    local objTable = {}\n    local curObj = {}\n\n    for guid in pairs(memoryListBackup) do\n        curObj = getObjectFromGUID(guid)\n        table.insert(objTable, curObj)\n    end\n\n    return objTable\n    -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    buttonIndexMap = {}\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n        objsToHaveButtons = getAllObjectsInMemory()\n    else\n        objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Workaround for custom PDFs\n            if obj.Book then\n                objPos.y = objPos.y + 0.5\n            end\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n                color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color=color,\n            })\n            buttonIndexMap[obj.getGUID()] = howManyButtons\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n        self.createButton({\n            label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n            position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\n        })\n\n        self.createButton({\n            label=\"Selection\", click_function=\"editDragSelection\", function_owner=self,\n            position={0,0.3,2}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={1,1,1}\n        })\n        groupNameInput:create(memoryGroupName:get())\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(obj, move)\n    local index = buttonIndexMap[obj.getGUID()]\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n        theList = moveList\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\n            local prevObj = getObjectFromGUID(previousGuid)\n            prevObj.highlightOff()\n            self.editButton({index=previousIndex, color=colorMove})\n            theList[previousGuid] = nil\n        end\n        previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock(),\n            tint=obj.getColorTint()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        if move == true then\n            color = colorMove\n        end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\nfunction editDragSelection(bagObj, player, remove)\n    local selectedObjs = Player[player].getSelectedObjects()\n    if not remove then\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            --Ignore if already in the memory list, or does not have a button\n            if index and not memoryList[obj.getGUID()] then\n                self.editButton({index=index, color={0,1,0,0.6}})\n                --Adding pos/rot to memory table\n                local pos, rot = obj.getPosition(), obj.getRotation()\n                --I need to add it like this or it won't save due to indexing issue\n                memoryList[obj.getGUID()] = {\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n                    lock=obj.getLock(),\n                    tint=obj.getColorTint()\n                }\n                obj.highlightOn({0,1,0})\n            end\n        end\n    else\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            if index and memoryList[obj.getGUID()] then\n                color = {0.75,0.25,0.25,0.6}\n                self.editButton({index=index, color=color})\n                memoryList[obj.getGUID()] = nil\n                obj.highlightOff()\n            end\n        end\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            self.clearInputs()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n        memoryList = memoryListBackup\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    groupNameInput:setGroupNameToInputField()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n    for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        memoryListBackup[guid] = nil\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n            memoryListBackup[guid].tint = obj.getColorTint()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    memoryGroupName:set(nil)\n    self.clearButtons()\n    self.clearInputs()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n        position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    if anyOtherBagsInMyGroupArePlaced() then\n        recallOtherBagsInMyGroup()\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\n    else\n        _placeObjects()\n    end\nend\n\nfunction _placeObjects()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n            obj.setColorTint(entry.tint)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    item.setColorTint(entry.tint)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n    local angle = math.rad(obj.getRotation().y)\n    local x = desiredPos.x * math.sin(angle)\n    local z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n    local mult = 10^(dec or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\nExample:\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\n--]]\nAllMemoryBagsInScene = {\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\n}\n\nfunction AllMemoryBagsInScene:add(guid)\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\n    table.insert(guids, guid)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\nend\n\nfunction AllMemoryBagsInScene:getGuidList()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\nend",
      "LuaScriptState": "{\"ml\":{\"18e374\":{\"lock\":false,\"pos\":{\"x\":26.7726,\"y\":1.4951,\"z\":-35.4104},\"rot\":{\"x\":0,\"y\":270.0153,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1b36c4\":{\"lock\":false,\"pos\":{\"x\":30.3644,\"y\":1.4951,\"z\":-30.8027},\"rot\":{\"x\":0,\"y\":270.0001,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"211c93\":{\"lock\":false,\"pos\":{\"x\":33.9719,\"y\":1.4951,\"z\":-19.4296},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"21825b\":{\"lock\":false,\"pos\":{\"x\":34.0217,\"y\":1.4951,\"z\":-28.5227},\"rot\":{\"x\":0,\"y\":270.0023,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"31fb03\":{\"lock\":false,\"pos\":{\"x\":26.7443,\"y\":1.4951,\"z\":-5.6176},\"rot\":{\"x\":0,\"y\":270.0031,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3650be\":{\"lock\":false,\"pos\":{\"x\":30.3268,\"y\":1.4951,\"z\":-3.3172},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3c6d56\":{\"lock\":false,\"pos\":{\"x\":33.9933,\"y\":1.4951,\"z\":-7.9289},\"rot\":{\"x\":0,\"y\":270.0042,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"411f95\":{\"lock\":false,\"pos\":{\"x\":26.7726,\"y\":1.4951,\"z\":-37.7104},\"rot\":{\"x\":0,\"y\":270.0102,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"43fc34\":{\"lock\":false,\"pos\":{\"x\":26.7442,\"y\":1.4951,\"z\":-7.9174},\"rot\":{\"x\":0,\"y\":269.9922,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4722e2\":{\"lock\":false,\"pos\":{\"x\":34.0217,\"y\":1.4951,\"z\":-26.2228},\"rot\":{\"x\":0,\"y\":270.0004,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4e8777\":{\"lock\":false,\"pos\":{\"x\":30.3558,\"y\":1.4951,\"z\":-26.211},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5a28a7\":{\"lock\":false,\"pos\":{\"x\":26.7726,\"y\":1.4951,\"z\":-30.8105},\"rot\":{\"x\":0,\"y\":270.0203,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"626c1d\":{\"lock\":false,\"pos\":{\"x\":30.3275,\"y\":1.4951,\"z\":-10.2179},\"rot\":{\"x\":0,\"y\":269.987,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"652a78\":{\"lock\":false,\"pos\":{\"x\":34.0215,\"y\":1.4951,\"z\":-35.422},\"rot\":{\"x\":0,\"y\":270.0262,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6c0c59\":{\"lock\":false,\"pos\":{\"x\":33.9816,\"y\":1.4951,\"z\":-3.3329},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"73fdbc\":{\"lock\":false,\"pos\":{\"x\":33.9933,\"y\":1.4951,\"z\":-17.129},\"rot\":{\"x\":0,\"y\":269.9994,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7dd214\":{\"lock\":false,\"pos\":{\"x\":26.7725,\"y\":1.4951,\"z\":-26.2107},\"rot\":{\"x\":0,\"y\":270.0027,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"860930\":{\"lock\":false,\"pos\":{\"x\":26.7447,\"y\":1.4951,\"z\":-1.017},\"rot\":{\"x\":0,\"y\":269.9938,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8a4531\":{\"lock\":false,\"pos\":{\"x\":34.009,\"y\":1.4951,\"z\":-33.1149},\"rot\":{\"x\":0,\"y\":269.9966,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9e4a77\":{\"lock\":false,\"pos\":{\"x\":33.9933,\"y\":1.4951,\"z\":-7.9289},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a273f0\":{\"lock\":false,\"pos\":{\"x\":33.9903,\"y\":1.4951,\"z\":-14.8302},\"rot\":{\"x\":0,\"y\":269.9961,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b69363\":{\"lock\":false,\"pos\":{\"x\":33.9933,\"y\":1.4951,\"z\":-12.5288},\"rot\":{\"x\":0,\"y\":269.9994,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"c409b7\":{\"lock\":false,\"pos\":{\"x\":26.7726,\"y\":1.4951,\"z\":-33.1107},\"rot\":{\"x\":0,\"y\":269.9861,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d92dc2\":{\"lock\":false,\"pos\":{\"x\":30.3275,\"y\":1.4951,\"z\":-5.6178},\"rot\":{\"x\":0,\"y\":270.0087,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d9fee7\":{\"lock\":false,\"pos\":{\"x\":26.7726,\"y\":1.4951,\"z\":-28.5107},\"rot\":{\"x\":0,\"y\":269.9987,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"dc1a1d\":{\"lock\":false,\"pos\":{\"x\":30.3159,\"y\":1.4951,\"z\":-1.0202},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00006\":{\"lock\":false,\"pos\":{\"x\":33.9933,\"y\":1.4951,\"z\":-10.2287},\"rot\":{\"x\":0,\"y\":269.9991,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0000c\":{\"lock\":false,\"pos\":{\"x\":30.3275,\"y\":1.4951,\"z\":-7.9175},\"rot\":{\"x\":0,\"y\":270.0001,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00010\":{\"lock\":false,\"pos\":{\"x\":34.029,\"y\":1.4951,\"z\":-30.8256},\"rot\":{\"x\":0,\"y\":270.0089,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e1f74b\":{\"lock\":false,\"pos\":{\"x\":33.9932,\"y\":1.4951,\"z\":-21.7286},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ea988e\":{\"lock\":false,\"pos\":{\"x\":33.9933,\"y\":1.4951,\"z\":-1.0293},\"rot\":{\"x\":0,\"y\":269.9863,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ed30ac\":{\"lock\":false,\"pos\":{\"x\":26.7407,\"y\":1.4951,\"z\":-3.2974},\"rot\":{\"x\":0,\"y\":269.9834,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f0db9f\":{\"lock\":false,\"pos\":{\"x\":34.0207,\"y\":1.4951,\"z\":-37.7131},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f9753f\":{\"lock\":false,\"pos\":{\"x\":33.9933,\"y\":1.4951,\"z\":-5.6297},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fc8256\":{\"lock\":false,\"pos\":{\"x\":30.3554,\"y\":1.4951,\"z\":-28.5104},\"rot\":{\"x\":0,\"y\":269.9937,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
      "ContainedObjects": [
        {
          "GUID": "18e374",
          "Name": "Card",
          "Transform": {
            "rotX": -5.23084065e-09,
            "rotY": 270.01532,
            "rotZ": 3.736238e-09,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Temperance (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"0eeb4d29-2613-45d1-8fda-baf5c5432bec\",\"type\":\"Skill\",\"class\":\"Neutral\",\"traits\":\"Innate. Developed\",\"agilityIcons\":3,\"level\":1,\"id\":\"0eeb4d29-2613-45d1-8fda-baf5c5432bec\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 316500,
          "CustomDeck": {
            "3165": {
              "FaceURL": "https://i.ibb.co/0C78Z9w/d56f7043747e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "1b36c4",
          "Name": "Card",
          "Transform": {
            "rotX": -1.881167e-08,
            "rotY": 270.000061,
            "rotZ": 1.12083562e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Wish Upon a Star (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"aca9f0e0-52de-4da0-9252-b3cc650ad2d5\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Fortune\",\"wildIcons\":1,\"cost\":1,\"level\":2,\"id\":\"aca9f0e0-52de-4da0-9252-b3cc650ad2d5\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 312500,
          "CustomDeck": {
            "3125": {
              "FaceURL": "https://i.ibb.co/M5vKwjS/6cedc667f396.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "211c93",
          "Name": "Card",
          "Transform": {
            "rotX": -6.797425e-08,
            "rotY": 270.0,
            "rotZ": 1.76962828e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Eternal Centipede (4)",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Mystic|Survivor\",\"traits\":\"Ally. Creature. Cursed\",\"cost\":2,\"level\":4,\"combatIcons\":1,\"TtsZoopGuid\":\"6baac9b7-7689-4e95-8805-0d113d931181\",\"agilityIcons\":2,\"id\":\"6baac9b7-7689-4e95-8805-0d113d931181\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 639500,
          "CustomDeck": {
            "6395": {
              "FaceURL": "https://i.ibb.co/fYk40Bg/3ebabaa43577.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "21825b",
          "Name": "Card",
          "Transform": {
            "rotX": 1.02319653e-07,
            "rotY": 270.0023,
            "rotZ": -4.41236274e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Pen and the Sword",
          "GMNotes": "{\"TtsZoopGuid\":\"f8173f20-6f92-4234-88b1-c2a963b05d81\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent\",\"combatIcons\":1,\"intellectIcons\":1,\"cost\":2,\"level\":0,\"id\":\"f8173f20-6f92-4234-88b1-c2a963b05d81\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 268400,
          "CustomDeck": {
            "2684": {
              "FaceURL": "https://i.ibb.co/gFPMCDC/20af297c66af.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "31fb03",
          "Name": "Card",
          "Transform": {
            "rotX": 1.33416975e-07,
            "rotY": 270.0031,
            "rotZ": -1.270359e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Recondite",
          "GMNotes": "{\"TtsZoopGuid\":\"02427e3d-9646-462d-b3e4-e96245a30782\",\"type\":\"Treachery\",\"traits\":\"Hex\",\"weakness\":true,\"id\":\"02427e3d-9646-462d-b3e4-e96245a30782\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 312000,
          "CustomDeck": {
            "3120": {
              "FaceURL": "https://i.ibb.co/XtKjRsG/a4658f2974bf.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "3650be",
          "Name": "Card",
          "Transform": {
            "rotX": -1.88398317e-07,
            "rotY": 269.999969,
            "rotZ": -4.755208e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Brainstorm",
          "GMNotes": "{\"TtsZoopGuid\":\"b754d030-5138-4cbb-aab1-063fe37929da\",\"type\":\"Event\",\"class\":\"Seeker|Rogue\",\"traits\":\"Insight. Cursed\",\"agilityIcons\":1,\"intellectIcons\":1,\"cost\":0,\"level\":0,\"willpowerIcons\":1,\"id\":\"b754d030-5138-4cbb-aab1-063fe37929da\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 630800,
          "CustomDeck": {
            "6308": {
              "FaceURL": "https://i.ibb.co/Qndr83P/7f674f3dd0e8.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "411f95",
          "Name": "Card",
          "Transform": {
            "rotX": -1.03783769e-07,
            "rotY": 270.0102,
            "rotZ": 2.70484549e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Desperation (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"5c8b780b-e08b-49a0-970f-e9040a074735\",\"type\":\"Skill\",\"class\":\"Neutral\",\"traits\":\"Desperate. Fated\",\"willpowerIcons\":1,\"wildIcons\":3,\"level\":2,\"id\":\"5c8b780b-e08b-49a0-970f-e9040a074735\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 316700,
          "CustomDeck": {
            "3167": {
              "FaceURL": "https://i.ibb.co/ggdC6Ys/deb5dff20552.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "43fc34",
          "Name": "Card",
          "Transform": {
            "rotX": 5.15476941e-08,
            "rotY": 269.9922,
            "rotZ": -5.41105045e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "The Ninth Circle",
          "GMNotes": "{\"TtsZoopGuid\":\"d8c1d618-72be-4f10-8bf9-2713e203fc5d\",\"type\":\"Treachery\",\"traits\":\"Curse\",\"weakness\":true,\"id\":\"d8c1d618-72be-4f10-8bf9-2713e203fc5d\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 631700,
          "CustomDeck": {
            "6317": {
              "FaceURL": "https://i.ibb.co/M8RdQ4P/099353369a6f.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "4722e2",
          "Name": "Card",
          "Transform": {
            "rotX": 3.39690871e-08,
            "rotY": 270.000366,
            "rotZ": -1.79194473e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Elder Sign Coin",
          "GMNotes": "{\"TtsZoopGuid\":\"57927421-2488-4abe-86e3-798b91fd31ee\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Item. Charm. Blessed\",\"wildIcons\":1,\"cost\":1,\"level\":0,\"id\":\"57927421-2488-4abe-86e3-798b91fd31ee\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 668600,
          "CustomDeck": {
            "6686": {
              "FaceURL": "https://i.ibb.co/pJGBDTm/d1b5773fdc88.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "4e8777",
          "Name": "Card",
          "Transform": {
            "rotX": -1.81690709e-07,
            "rotY": 270.0,
            "rotZ": 2.26521237e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Martyrdom",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Spirit. Blessed\",\"cost\":1,\"level\":0,\"TtsZoopGuid\":\"b9530f1e-e0cd-47e1-88e8-6524cac6dba9\",\"willpowerIcons\":1,\"id\":\"b9530f1e-e0cd-47e1-88e8-6524cac6dba9\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 673700,
          "CustomDeck": {
            "6737": {
              "FaceURL": "https://i.ibb.co/gzh387b/e30fd4bf6129.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "5a28a7",
          "Name": "Card",
          "Transform": {
            "rotX": -1.20815372e-07,
            "rotY": 270.0203,
            "rotZ": 2.247664e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Prudence (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"0f109c3f-ef3e-4831-b349-544a64645d12\",\"type\":\"Skill\",\"class\":\"Neutral\",\"traits\":\"Innate. Developed\",\"intellectIcons\":3,\"level\":1,\"id\":\"0f109c3f-ef3e-4831-b349-544a64645d12\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 316900,
          "CustomDeck": {
            "3169": {
              "FaceURL": "https://i.ibb.co/y0PRz7T/11ef43230e02.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "626c1d",
          "Name": "Card",
          "Transform": {
            "rotX": 4.95810681e-08,
            "rotY": 269.987,
            "rotZ": 7.80222749e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Burdened Aegis",
          "GMNotes": "{\"TtsZoopGuid\":\"eaf7b0cc-7ccb-4ade-b053-6f21780a957f\",\"type\":\"Event\",\"class\":\"Guardian|Mystic\",\"traits\":\"Ritual. Blessed. Cursed\",\"wildIcons\":1,\"cost\":1,\"level\":0,\"willpowerIcons\":1,\"id\":\"eaf7b0cc-7ccb-4ade-b053-6f21780a957f\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 317000,
          "CustomDeck": {
            "3170": {
              "FaceURL": "https://i.ibb.co/k24jFy8/e767840eec8d.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "652a78",
          "Name": "Card",
          "Transform": {
            "rotX": 8.601319e-08,
            "rotY": 270.026184,
            "rotZ": -2.13861384e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Pen and the Sword (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"c0d4396e-c46a-40f2-baad-c374d755b052\",\"type\":\"Asset\",\"permanent\":true,\"class\":\"Neutral\",\"traits\":\"Talent\",\"level\":3,\"id\":\"c0d4396e-c46a-40f2-baad-c374d755b052\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 268800,
          "CustomDeck": {
            "2688": {
              "FaceURL": "https://i.ibb.co/2k8zSLv/2c177e1d1d98.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "6c0c59",
          "Name": "Card",
          "Transform": {
            "rotX": -2.30157639e-07,
            "rotY": 270.0,
            "rotZ": -2.40287477e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Archaeology Student",
          "GMNotes": "{\"TtsZoopGuid\":\"a39aab06-1291-4d0c-bd9e-64481fd2aef1\",\"type\":\"Asset\",\"class\":\"Seeker|Rogue\",\"traits\":\"Ally. Miskatonic. Wayfarer\",\"agilityIcons\":1,\"cost\":2,\"level\":0,\"id\":\"a39aab06-1291-4d0c-bd9e-64481fd2aef1\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 630500,
          "CustomDeck": {
            "6305": {
              "FaceURL": "https://i.ibb.co/pQG22S9/ee4dcf02b6eb.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "73fdbc",
          "Name": "Card",
          "Transform": {
            "rotX": 1.12983088e-07,
            "rotY": 269.9994,
            "rotZ": 1.10651918e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Emily Sullivan (3)",
          "Description": "Skittish Mortician",
          "GMNotes": "{\"TtsZoopGuid\":\"e3376e6f-0f1b-4b9c-a5bf-12d4e9710b25\",\"type\":\"Asset\",\"class\":\"Guardian|Seeker\",\"traits\":\"Ally. Science\",\"intellectIcons\":1,\"willpowerIcons\":1,\"wildIcons\":1,\"cost\":4,\"level\":3,\"id\":\"e3376e6f-0f1b-4b9c-a5bf-12d4e9710b25\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 630600,
          "CustomDeck": {
            "6306": {
              "FaceURL": "https://i.ibb.co/x34h3dW/b7e575ee82de.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "7dd214",
          "Name": "Card",
          "Transform": {
            "rotX": -2.03933013e-07,
            "rotY": 270.0027,
            "rotZ": 1.40536358e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Desperation",
          "GMNotes": "{\"TtsZoopGuid\":\"f08cc21e-1725-4249-b554-f63184b553fe\",\"type\":\"Skill\",\"class\":\"Neutral\",\"traits\":\"Desperate. Fated\",\"willpowerIcons\":1,\"wildIcons\":2,\"level\":0,\"id\":\"f08cc21e-1725-4249-b554-f63184b553fe\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 312200,
          "CustomDeck": {
            "3122": {
              "FaceURL": "https://i.ibb.co/p2gXFhB/113a470f8e52.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "860930",
          "Name": "Card",
          "Transform": {
            "rotX": -1.10314936e-07,
            "rotY": 269.9938,
            "rotZ": 8.909793e-09,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Abhorrent Idol",
          "GMNotes": "{\"TtsZoopGuid\":\"4f9da7f1-2a3f-4d8b-a7a7-f262c6b239bf\",\"type\":\"Enemy\",\"traits\":\"Construct. Abomination\",\"weakness\":true,\"id\":\"4f9da7f1-2a3f-4d8b-a7a7-f262c6b239bf\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 317100,
          "CustomDeck": {
            "3171": {
              "FaceURL": "https://i.ibb.co/mDJpCsS/62552ee5d5a0.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "8a4531",
          "Name": "Card",
          "Transform": {
            "rotX": -7.580565e-08,
            "rotY": 269.9966,
            "rotZ": -2.60371333e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Elder Sign Coin (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"469fd48a-4f4f-43e8-8309-1b29c70c924a\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Item. Charm. Blessed\",\"wildIcons\":1,\"cost\":1,\"level\":2,\"permanent\":true,\"id\":\"469fd48a-4f4f-43e8-8309-1b29c70c924a\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 269100,
          "CustomDeck": {
            "2691": {
              "FaceURL": "https://i.ibb.co/NKzqGYN/1dc1857737cf.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "9e4a77",
          "Name": "Card",
          "Transform": {
            "rotX": -6.502903e-07,
            "rotY": 270.0,
            "rotZ": -1.17604176e-10,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Weaver's Grimoire",
          "Description": "Entangled Memories",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Seeker|Survivor\",\"traits\":\"Item. Tome. Cursed\",\"cost\":2,\"level\":0,\"intellectIcons\":1,\"uses\":[{\"count\":3,\"token\":\"resource\",\"type\":\"Secret\"}],\"TtsZoopGuid\":\"c56d6d11-fc7a-4a1c-8c75-c988e5388299\",\"id\":\"c56d6d11-fc7a-4a1c-8c75-c988e5388299\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 673800,
          "CustomDeck": {
            "6738": {
              "FaceURL": "https://i.ibb.co/PYsKwMv/64ebf332e0e2.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "a273f0",
          "Name": "Card",
          "Transform": {
            "rotX": -1.76904251e-07,
            "rotY": 269.9961,
            "rotZ": 1.8463669e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Martin Roche (3)",
          "Description": "Cleans Up Any Mess",
          "GMNotes": "{\"TtsZoopGuid\":\"2f2cc2a4-cec5-49f9-9876-c209328d0efa\",\"type\":\"Asset\",\"class\":\"Rogue|Mystic\",\"traits\":\"Ally. Criminal. Syndicate. Sorcerer\",\"agilityIcons\":1,\"willpowerIcons\":1,\"cost\":3,\"level\":3,\"id\":\"2f2cc2a4-cec5-49f9-9876-c209328d0efa\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 627500,
          "CustomDeck": {
            "6275": {
              "FaceURL": "https://i.ibb.co/M5C0Gxm/ccc074dd9c66.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b69363",
          "Name": "Card",
          "Transform": {
            "rotX": -9.18500263e-08,
            "rotY": 269.9994,
            "rotZ": -1.397113e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Flare Gun (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"90f6de15-1854-4dc3-a1e3-e70b2f0114dc\",\"type\":\"Asset\",\"uses\":[{\"count\":2,\"token\":\"resource\",\"type\":\"Ammo\"}],\"class\":\"Guardian|Survivor\",\"traits\":\"Item. Tool. Firearm\",\"combatIcons\":1,\"intellectIcons\":1,\"cost\":3,\"level\":2,\"id\":\"90f6de15-1854-4dc3-a1e3-e70b2f0114dc\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 630700,
          "CustomDeck": {
            "6307": {
              "FaceURL": "https://i.ibb.co/Nj9Q5gC/c172e5014a54.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "c409b7",
          "Name": "Card",
          "Transform": {
            "rotX": 1.14208149e-07,
            "rotY": 269.9861,
            "rotZ": -3.673581e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Justice (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"69abe51e-599b-47ae-89d4-7c880b3c1402\",\"type\":\"Skill\",\"class\":\"Neutral\",\"traits\":\"Innate. Developed\",\"combatIcons\":3,\"level\":1,\"id\":\"69abe51e-599b-47ae-89d4-7c880b3c1402\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 312400,
          "CustomDeck": {
            "3124": {
              "FaceURL": "https://i.ibb.co/02QF5PW/0f834555cf7b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "d92dc2",
          "Name": "Card",
          "Transform": {
            "rotX": -9.411199e-08,
            "rotY": 270.0087,
            "rotZ": 3.315813e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Waste Not, Want Not",
          "GMNotes": "{\"TtsZoopGuid\":\"b5c55d79-2ca7-41c6-a444-04222b5c97dc\",\"type\":\"Event\",\"class\":\"Rogue|Survivor\",\"traits\":\"Fortune\",\"agilityIcons\":1,\"cost\":0,\"level\":0,\"id\":\"b5c55d79-2ca7-41c6-a444-04222b5c97dc\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 317200,
          "CustomDeck": {
            "3172": {
              "FaceURL": "https://i.ibb.co/S6btLZq/5f8c752bd577.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "d9fee7",
          "Name": "Card",
          "Transform": {
            "rotX": -1.85394143e-07,
            "rotY": 269.9987,
            "rotZ": 2.04114869e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fortitude (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"79460295-011d-4c9c-9679-a3874fc1cc09\",\"type\":\"Skill\",\"class\":\"Neutral\",\"traits\":\"Innate. Developed\",\"willpowerIcons\":3,\"level\":1,\"id\":\"79460295-011d-4c9c-9679-a3874fc1cc09\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 317300,
          "CustomDeck": {
            "3173": {
              "FaceURL": "https://i.ibb.co/v1dyNVZ/44abea10ad4f.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "dc1a1d",
          "Name": "Card",
          "Transform": {
            "rotX": 6.852074e-08,
            "rotY": 270.0,
            "rotZ": 3.90667338e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "From the Ashes",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Guardian|Survivor\",\"traits\":\"Spirit. Blessed\",\"cost\":0,\"level\":0,\"willpowerIcons\":1,\"TtsZoopGuid\":\"64b7b95c-f0a0-469e-bb33-79d9ee528067\",\"id\":\"64b7b95c-f0a0-469e-bb33-79d9ee528067\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 668900,
          "CustomDeck": {
            "6689": {
              "FaceURL": "https://i.ibb.co/jz0tjQt/7014dce63044.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00006",
          "Name": "Card",
          "Transform": {
            "rotX": 3.28790826e-08,
            "rotY": 269.999146,
            "rotZ": 3.85731269e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Abyssal Gaze",
          "GMNotes": "{\"TtsZoopGuid\":\"ccff37d8-da2d-45ea-93ac-ee95888963e0\",\"type\":\"Asset\",\"uses\":[{\"count\":4,\"token\":\"resource\",\"type\":\"Charge\"}],\"class\":\"Guardian|Mystic\",\"traits\":\"Ritual. Augury\",\"intellectIcons\":1,\"willpowerIcons\":1,\"cost\":2,\"level\":0,\"id\":\"ccff37d8-da2d-45ea-93ac-ee95888963e0\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 630900,
          "CustomDeck": {
            "6309": {
              "FaceURL": "https://i.ibb.co/hRHzCk1/366c649a7659.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000c",
          "Name": "Card",
          "Transform": {
            "rotX": -1.2833452e-07,
            "rotY": 270.000061,
            "rotZ": -2.32712916e-09,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Esoteric Signal (1)",
          "GMNotes": "{\"TtsZoopGuid\":\"84358faf-e6b3-4f7a-91cd-e3a6befba5c2\",\"type\":\"Event\",\"class\":\"Seeker|Mystic\",\"traits\":\"Ritual. Insight\",\"intellectIcons\":1,\"willpowerIcons\":1,\"level\":1,\"cost\":1,\"id\":\"84358faf-e6b3-4f7a-91cd-e3a6befba5c2\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 631100,
          "CustomDeck": {
            "6311": {
              "FaceURL": "https://i.ibb.co/yVpcHJP/7272ed2523d5.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00010",
          "Name": "Card",
          "Transform": {
            "rotX": -2.27396075e-08,
            "rotY": 270.0089,
            "rotZ": 1.09096042e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Venomous Serpent",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Ally. Creature\",\"cost\":2,\"level\":0,\"agilityIcons\":1,\"TtsZoopGuid\":\"0e92cccc-4a79-44d2-bd01-0e5d7ce56663\",\"id\":\"0e92cccc-4a79-44d2-bd01-0e5d7ce56663\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 673900,
          "CustomDeck": {
            "6739": {
              "FaceURL": "https://i.ibb.co/HghVHwK/0085fd40284d.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e1f74b",
          "Name": "Card",
          "Transform": {
            "rotX": -6.797425e-08,
            "rotY": 270.0,
            "rotZ": 1.76962828e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Remington M10 (4)",
          "GMNotes": "{\"TtsZoopGuid\":\"ea1f8200-2a33-4fee-8468-8feb078e9c10\",\"type\":\"Asset\",\"class\":\"Rogue|Survivor\",\"traits\":\"Item. Weapon. Firearm. Illicit\",\"combatIcons\":2,\"intellectIcons\":1,\"cost\":3,\"level\":4,\"id\":\"ea1f8200-2a33-4fee-8468-8feb078e9c10\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 631200,
          "CustomDeck": {
            "6312": {
              "FaceURL": "https://i.ibb.co/KWjqzZR/2a979440a488.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "ea988e",
          "Name": "Card",
          "Transform": {
            "rotX": -8.380126e-09,
            "rotY": 269.986267,
            "rotZ": -1.98427742e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Spectral Spectacles",
          "GMNotes": "{\"TtsZoopGuid\":\"9a841f47-3a1e-4338-893b-0f126e874525\",\"type\":\"Asset\",\"class\":\"Seeker|Mystic\",\"traits\":\"Item. Charm\",\"intellectIcons\":1,\"cost\":2,\"level\":0,\"id\":\"9a841f47-3a1e-4338-893b-0f126e874525\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 669000,
          "CustomDeck": {
            "6690": {
              "FaceURL": "https://i.ibb.co/pL5RjDn/9a596fbbb1ca.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "ed30ac",
          "Name": "Card",
          "Transform": {
            "rotX": -3.644898e-08,
            "rotY": 269.9834,
            "rotZ": 7.827453e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Stigmata",
          "GMNotes": "{\"TtsZoopGuid\":\"6f256d0f-66e3-41fd-8961-0f6dae71bcc5\",\"type\":\"Treachery\",\"traits\":\"Curse\",\"weakness\":true,\"id\":\"6f256d0f-66e3-41fd-8961-0f6dae71bcc5\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 317400,
          "CustomDeck": {
            "3174": {
              "FaceURL": "https://i.ibb.co/48sspvq/dc8d57470e46.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f9753f",
          "Name": "Card",
          "Transform": {
            "rotX": -1.54623152e-07,
            "rotY": 269.999969,
            "rotZ": 4.61245833e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Midas' Anathema",
          "GMNotes": "{\"TtsZoopGuid\":\"677b71a3-0296-4aca-8963-9cd305804326\",\"type\":\"Asset\",\"uses\":[{\"count\":3,\"token\":\"resource\",\"type\":\"Charge\"}],\"class\":\"Guardian|Rogue\",\"traits\":\"Ritual. Pact\",\"combatIcons\":1,\"cost\":0,\"level\":0,\"id\":\"677b71a3-0296-4aca-8963-9cd305804326\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 292900,
          "CustomDeck": {
            "2929": {
              "FaceURL": "https://i.ibb.co/YT670bX/72bd34e8fdcf.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "fc8256",
          "Name": "Card",
          "Transform": {
            "rotX": 1.37461427e-07,
            "rotY": 269.9937,
            "rotZ": -2.30057822e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Insatiable Hunger",
          "GMNotes": "{\"TtsZoopGuid\":\"f9f87a68-e86c-4450-9d40-76399c3a229a\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Spirit. Cursed\",\"combatIcons\":1,\"willpowerIcons\":1,\"cost\":1,\"level\":0,\"id\":\"f9f87a68-e86c-4450-9d40-76399c3a229a\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 317500,
          "CustomDeck": {
            "3175": {
              "FaceURL": "https://i.ibb.co/dgTwfFG/ddf1a39270c4.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        }
      ]
    },
    {
      "GUID": "ca3de1",
      "Name": "Bag",
      "Transform": {
        "rotX": -8.179326e-06,
        "rotY": 89.96021,
        "rotZ": -2.74215e-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Rogue",
      "Description": "By Directsun",
      "ColorDiffuse": {
        "r": 0.192152441,
        "g": 0.7019608,
        "b": 0.16862303
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.7.0\n-- Fork of Memory Bag 2.0 by MrStump\n--\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\n\nCONFIG = {\n    MEMORY_GROUP = {\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\n        -- This gives the other bags time to recall their objects.\n        -- The delay ONLY occurs if other bags have objects out.\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30,\n    },\n}\n\n\n--[[ Memory Bag Groups ]]-------------------------------------------------------\n--[[\nUtility Memory Bags may be added to a named group, called a \"memory group\".\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\nOnly one bag from a group may have it's contents placed on the table at a time.\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\nBy default a memory bag is not in any group. It's memory group is \"nil\".\n--]]\n\nmemoryGroupName = {memoryBag=self}\nfunction memoryGroupName:get()\n    return self._name\nend\nfunction memoryGroupName:set(newName)\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\n\n    if newName == \"\" then\n        self._name = nil\n    else\n        self._name = newName\n    end\nend\n\n-- Click the \"Recall\" button on all other bags in my memory group.\nfunction recallOtherBagsInMyGroup()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        bag.call('buttonClick_recall')\n    end\nend\n\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\nfunction anyOtherBagsInMyGroupArePlaced()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        local state = bag.call('areAnyOfMyObjectsPlaced')\n        if state then return true end\n    end\n\n    return false\nend\n\n-- Return \"true\" if at least one object from this memory bag is out on the table.\nfunction areAnyOfMyObjectsPlaced()\n    for guid,_ in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then\n            return true\n        end\n    end\n    return false\nend\n\nfunction getOtherBagsInMyGroup()\n    local bags = {}\n    for bagGuid,_ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\n        if bagGuid ~= self.getGUID() then\n            bag = getObjectFromGUID(bagGuid)\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\n            if bag ~= nil then\n                table.insert(bags, bag)\n            end\n        end\n    end\n    return bags\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the names & guids of all memory bag groups.\nThe global variable is a table and holds data like this:\n{\n    'My First Group Name' = {\n        '805ebd' = {},\n        '35cc21' = {},\n        'fc8886' = {},\n    },\n    'My Second Group Name' = {\n        'f50264' = {},\n        '5f5f63' = {},\n    },\n}\n--]]\nGlobalMemoryGroups = {\n    NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups',\n}\n\n-- Call me inside this script's \"onLoad()\" method!\nfunction GlobalMemoryGroups:onLoad(myGuid)\n    -- Create and initialize the global variable if it doesn't already exist:\n    if self:_getGroups() == nil then\n        self:_setGroups({})\n    end\nend\n\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\nfunction GlobalMemoryGroups:getGroup(groupName)\n    guids = self:_getGroups()[groupName] or {}\n    return guids\nend\n\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\n    if groupName == nil or groupName == \"\" then\n        return\n    end\n\n    self:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    groups[groupName][bagGuid] = {}\n    self:_setGroups(groups)\nend\n\n-- Removes this bag from the memory group.\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\n    local groups = self:_getGroups()\n    local group = groups[groupName]\n    if group ~= nil then\n        group[bagGuid] = nil\n        self:_setGroups(groups)\n    end\nend\n\n-- Return the global variable, which is a table holding all memory group names & guids.\nfunction GlobalMemoryGroups:_getGroups()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\nend\n\n-- Override the global variable (i.e. the entire table).\nfunction GlobalMemoryGroups:_setGroups(newTable)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\nend\n\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    if groups[groupName] == nil then\n        groups[groupName] = {}\n        self:_setGroups(groups)\n    end\nend\n\n\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\ngroupNameInput = {\n    greyedOutText = \"Group Name\",\n    widthPerCharacter = 100,\n    padding = 4,\n    memoryBag=self,\n}\nfunction groupNameInput:create(optionalStartingValue)\n    local effectiveText = optionalStartingValue or self.greyedOutText\n    local width = self:computeWidth(effectiveText)\n\n    self.memoryBag.createInput({\n        label=self.greyedOutText,\n        value=optionalStartingValue or nil,\n        alignment=3, -- Center aligned\n        input_function=\"groupNameInput_onCharacterTyped\", function_owner=self.memoryBag,\n        position={2.1,0.3,0}, rotation={0,270,0}, width=width, height=350,\n        font_size=250, color={0,0,0}, font_color={1,1,1},\n    })\nend\nfunction groupNameInput:computeWidth(text)\n    return (string.len(text) + self.padding) * self.widthPerCharacter\nend\nfunction groupNameInput:updatedWidth(text)\n    self.memoryBag.editInput({\n        index=0,\n        width=self:computeWidth(text)\n    })\nend\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\n    if stillEditing then\n        self:updatedWidth(text)\n    else\n        if text == \"\" then\n            self:updatedWidth(self.greyedOutText)\n        end\n    end\nend\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\n    groupNameInput:onCharacterTyped(text, stillEditing)\nend\nfunction groupNameInput:setGroupNameToInputField()\n    local inputFields = self.memoryBag.getInputs()\n    if inputFields ~= nil then\n        -- Get input field 0, which corresponds to the groupNameInput.\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\n        local nameField = nil\n        for _,field in ipairs(inputFields) do\n            if field.index == 0 then\n                nameField = field\n            end\n        end\n\n        memoryGroupName:set(nameField.value)\n    end\nend\n\n\n\n\n\n--//////////////////////////////////////////////////////////////////////////////\n\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList,[\"groupName\"]=memoryGroupName:get()}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n    local bagObjList = self.getObjects()\n    for _, bagObj in ipairs(bagObjList) do\n        local data = bagObj.lua_script_state\n        if data ~= nil then\n            local j = JSON.decode(data)\n            if j ~= nil and j.ml ~= nil then\n                for guid, entry in pairs(j.ml) do\n                    memoryList[guid] = entry\n                end\n            end\n        end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    GlobalMemoryGroups:onLoad(self.getGUID())\n    AllMemoryBagsInScene:add(self.getGUID())\n\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n        memoryGroupName:set(loaded_data.groupName)\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n        memoryGroupName:set(nil)\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n    local objTable = {}\n    local curObj = {}\n\n    for guid in pairs(memoryListBackup) do\n        curObj = getObjectFromGUID(guid)\n        table.insert(objTable, curObj)\n    end\n\n    return objTable\n    -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    buttonIndexMap = {}\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n        objsToHaveButtons = getAllObjectsInMemory()\n    else\n        objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Workaround for custom PDFs\n            if obj.Book then\n                objPos.y = objPos.y + 0.5\n            end\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n                color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color=color,\n            })\n            buttonIndexMap[obj.getGUID()] = howManyButtons\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n        self.createButton({\n            label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n            position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\n        })\n\n        self.createButton({\n            label=\"Selection\", click_function=\"editDragSelection\", function_owner=self,\n            position={0,0.3,2}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={1,1,1}\n        })\n        groupNameInput:create(memoryGroupName:get())\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(obj, move)\n    local index = buttonIndexMap[obj.getGUID()]\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n        theList = moveList\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\n            local prevObj = getObjectFromGUID(previousGuid)\n            prevObj.highlightOff()\n            self.editButton({index=previousIndex, color=colorMove})\n            theList[previousGuid] = nil\n        end\n        previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock(),\n            tint=obj.getColorTint()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        if move == true then\n            color = colorMove\n        end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\nfunction editDragSelection(bagObj, player, remove)\n    local selectedObjs = Player[player].getSelectedObjects()\n    if not remove then\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            --Ignore if already in the memory list, or does not have a button\n            if index and not memoryList[obj.getGUID()] then\n                self.editButton({index=index, color={0,1,0,0.6}})\n                --Adding pos/rot to memory table\n                local pos, rot = obj.getPosition(), obj.getRotation()\n                --I need to add it like this or it won't save due to indexing issue\n                memoryList[obj.getGUID()] = {\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n                    lock=obj.getLock(),\n                    tint=obj.getColorTint()\n                }\n                obj.highlightOn({0,1,0})\n            end\n        end\n    else\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            if index and memoryList[obj.getGUID()] then\n                color = {0.75,0.25,0.25,0.6}\n                self.editButton({index=index, color=color})\n                memoryList[obj.getGUID()] = nil\n                obj.highlightOff()\n            end\n        end\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            self.clearInputs()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n        memoryList = memoryListBackup\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    groupNameInput:setGroupNameToInputField()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n    for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        memoryListBackup[guid] = nil\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n            memoryListBackup[guid].tint = obj.getColorTint()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    memoryGroupName:set(nil)\n    self.clearButtons()\n    self.clearInputs()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n        position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    if anyOtherBagsInMyGroupArePlaced() then\n        recallOtherBagsInMyGroup()\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\n    else\n        _placeObjects()\n    end\nend\n\nfunction _placeObjects()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n            obj.setColorTint(entry.tint)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    item.setColorTint(entry.tint)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n    local angle = math.rad(obj.getRotation().y)\n    local x = desiredPos.x * math.sin(angle)\n    local z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n    local mult = 10^(dec or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\nExample:\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\n--]]\nAllMemoryBagsInScene = {\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\n}\n\nfunction AllMemoryBagsInScene:add(guid)\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\n    table.insert(guids, guid)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\nend\n\nfunction AllMemoryBagsInScene:getGuidList()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\nend",
      "LuaScriptState": "{\"ml\":{\"062ccb\":{\"lock\":false,\"pos\":{\"x\":44.2579,\"y\":1.4951,\"z\":20.2112},\"rot\":{\"x\":0,\"y\":270.0009,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0c8691\":{\"lock\":false,\"pos\":{\"x\":47.7679,\"y\":1.4951,\"z\":37.2838},\"rot\":{\"x\":0,\"y\":270.0036,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0ca6a8\":{\"lock\":false,\"pos\":{\"x\":44.1022,\"y\":1.4951,\"z\":34.9954},\"rot\":{\"x\":0,\"y\":270.0078,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0e764e\":{\"lock\":false,\"pos\":{\"x\":40.6112,\"y\":1.4951,\"z\":20.2223},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0ee456\":{\"lock\":false,\"pos\":{\"x\":47.882,\"y\":1.4951,\"z\":17.9395},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"16a710\":{\"lock\":false,\"pos\":{\"x\":47.877,\"y\":1.4951,\"z\":13.3277},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"16ada1\":{\"lock\":false,\"pos\":{\"x\":47.877,\"y\":1.4951,\"z\":8.728},\"rot\":{\"x\":0,\"y\":270.023,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"17b4e7\":{\"lock\":false,\"pos\":{\"x\":44.2423,\"y\":1.4951,\"z\":17.9269},\"rot\":{\"x\":0,\"y\":269.9998,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1d554a\":{\"lock\":false,\"pos\":{\"x\":47.7679,\"y\":1.4951,\"z\":34.9837},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"240226\":{\"lock\":false,\"pos\":{\"x\":44.109,\"y\":1.4951,\"z\":30.4255},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"297e73\":{\"lock\":false,\"pos\":{\"x\":47.877,\"y\":1.4951,\"z\":4.128},\"rot\":{\"x\":0,\"y\":270.0024,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2fe796\":{\"lock\":false,\"pos\":{\"x\":47.8929,\"y\":1.4951,\"z\":15.6322},\"rot\":{\"x\":0,\"y\":270.0005,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"48ada8\":{\"lock\":false,\"pos\":{\"x\":47.7604,\"y\":1.4951,\"z\":28.0462},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4edc4d\":{\"lock\":false,\"pos\":{\"x\":40.5489,\"y\":1.4951,\"z\":34.9736},\"rot\":{\"x\":0,\"y\":269.9946,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4f995d\":{\"lock\":false,\"pos\":{\"x\":47.777,\"y\":1.4951,\"z\":30.3572},\"rot\":{\"x\":0,\"y\":270.0019,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6e0f2e\":{\"lock\":false,\"pos\":{\"x\":44.2329,\"y\":1.4951,\"z\":15.624},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7db4d5\":{\"lock\":false,\"pos\":{\"x\":44.2336,\"y\":1.4951,\"z\":11.029},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"802a63\":{\"lock\":false,\"pos\":{\"x\":40.6268,\"y\":1.4951,\"z\":15.6163},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a197ad\":{\"lock\":false,\"pos\":{\"x\":44.109,\"y\":1.4951,\"z\":32.7131},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"af8351\":{\"lock\":false,\"pos\":{\"x\":44.2329,\"y\":1.4951,\"z\":13.3364},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b1469c\":{\"lock\":false,\"pos\":{\"x\":47.7679,\"y\":1.4951,\"z\":39.5838},\"rot\":{\"x\":0,\"y\":269.9902,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b1d01c\":{\"lock\":false,\"pos\":{\"x\":44.2748,\"y\":1.4951,\"z\":8.6896},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b362ea\":{\"lock\":false,\"pos\":{\"x\":40.5193,\"y\":1.4951,\"z\":39.5959},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"cf05ab\":{\"lock\":false,\"pos\":{\"x\":44.0999,\"y\":1.4951,\"z\":37.315},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00002\":{\"lock\":false,\"pos\":{\"x\":47.877,\"y\":1.4951,\"z\":6.428},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0000f\":{\"lock\":false,\"pos\":{\"x\":47.7955,\"y\":1.4951,\"z\":32.6648},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00012\":{\"lock\":false,\"pos\":{\"x\":47.877,\"y\":1.4951,\"z\":11.0278},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e30472\":{\"lock\":false,\"pos\":{\"x\":44.0806,\"y\":1.4951,\"z\":28.1271},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e39099\":{\"lock\":false,\"pos\":{\"x\":40.6268,\"y\":1.4951,\"z\":17.9158},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f159fd\":{\"lock\":false,\"pos\":{\"x\":44.1022,\"y\":1.4951,\"z\":39.5956},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f7cadb\":{\"lock\":false,\"pos\":{\"x\":47.8948,\"y\":1.4951,\"z\":20.2309},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
      "ContainedObjects": [
        {
          "GUID": "062ccb",
          "Name": "Card",
          "Transform": {
            "rotX": 9.138555e-08,
            "rotY": 270.000854,
            "rotZ": -1.14632179e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Loose Ends (2)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Tactic\",\"cost\":3,\"level\":2,\"combatIcons\":1,\"willpowerIcons\":1,\"TtsZoopGuid\":\"183f1eb7-2934-491c-9cc8-d19e083f0cab\",\"id\":\"183f1eb7-2934-491c-9cc8-d19e083f0cab\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 672900,
          "CustomDeck": {
            "6729": {
              "FaceURL": "https://i.ibb.co/BZMGgNK/37346c314414.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "0e764e",
          "Name": "Card",
          "Transform": {
            "rotX": -6.28466e-08,
            "rotY": 270.0,
            "rotZ": 1.907708e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Out of Dodge (2)",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Rogue\",\"traits\":\"Innate. Developed. Fated\",\"level\":2,\"agilityIcons\":1,\"wildIcons\":2,\"TtsZoopGuid\":\"23944ee8-b8c5-4132-b555-5fe4e0cf2f14\",\"combatIcons\":1,\"id\":\"23944ee8-b8c5-4132-b555-5fe4e0cf2f14\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 638700,
          "CustomDeck": {
            "6387": {
              "FaceURL": "https://i.ibb.co/zXKssXT/84dbac38cbe1.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "17b4e7",
          "Name": "Card",
          "Transform": {
            "rotX": -1.58374618e-07,
            "rotY": 269.9998,
            "rotZ": 1.3498898e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Shadow Physick (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"90d6ddb5-1248-4a2e-9fe7-5c9d7a992e67\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Insight. Science\",\"intellectIcons\":2,\"cost\":2,\"level\":2,\"id\":\"90d6ddb5-1248-4a2e-9fe7-5c9d7a992e67\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 626500,
          "CustomDeck": {
            "6265": {
              "FaceURL": "https://i.ibb.co/RS8ztfZ/4d60cb234666.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "6e0f2e",
          "Name": "Card",
          "Transform": {
            "rotX": 1.79347346e-08,
            "rotY": 270.0,
            "rotZ": -1.2556869e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Body Double (2)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Trick\",\"cost\":0,\"level\":2,\"TtsZoopGuid\":\"c2824484-9f75-4a12-a7b5-3426b799bbe0\",\"id\":\"c2824484-9f75-4a12-a7b5-3426b799bbe0\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 668400,
          "CustomDeck": {
            "6684": {
              "FaceURL": "https://i.ibb.co/Fhd1H6W/3ef39b41ddc3.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "7db4d5",
          "Name": "Card",
          "Transform": {
            "rotX": 1.79347346e-08,
            "rotY": 270.0,
            "rotZ": -1.2556869e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Assassination (5)",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Tactic. Trick\",\"level\":5,\"TtsZoopGuid\":\"37ee9cf5-b780-48c3-ba7b-44ad17360844\",\"id\":\"37ee9cf5-b780-48c3-ba7b-44ad17360844\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 671300,
          "CustomDeck": {
            "6713": {
              "FaceURL": "https://i.ibb.co/LQTHcrH/86d1a016acb5.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "802a63",
          "Name": "Card",
          "Transform": {
            "rotX": 1.79347346e-08,
            "rotY": 270.0,
            "rotZ": -1.2556869e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Apex (5)",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Rogue\",\"traits\":\"Innate. Developed\",\"level\":5,\"wildIcons\":2,\"TtsZoopGuid\":\"150f735f-5dca-4523-8970-dc8d6bdada5d\",\"id\":\"150f735f-5dca-4523-8970-dc8d6bdada5d\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 636200,
          "CustomDeck": {
            "6362": {
              "FaceURL": "https://i.ibb.co/NWGxdRy/816f51a81c5e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "af8351",
          "Name": "Card",
          "Transform": {
            "rotX": 1.79347346e-08,
            "rotY": 270.0,
            "rotZ": -1.2556869e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Feint (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"85a89b1c-078f-4db3-ba12-2e50cb27d83e\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Trick. Tactic\",\"agilityIcons\":1,\"combatIcons\":1,\"cost\":2,\"level\":2,\"id\":\"85a89b1c-078f-4db3-ba12-2e50cb27d83e\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 293800,
          "CustomDeck": {
            "2938": {
              "FaceURL": "https://i.ibb.co/wgJnbXW/9063d05c8ac6.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b1d01c",
          "Name": "Card",
          "Transform": {
            "rotX": 8.13415738e-07,
            "rotY": 270.0,
            "rotZ": 3.88392252e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Dead Man's Hand (5)",
          "GMNotes": "{\"TtsZoopGuid\":\"79ae6df0-907b-4bf7-a804-50a07fac9a97\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Fortune. Gambit. Trick\",\"wildIcons\":2,\"cost\":0,\"level\":5,\"id\":\"79ae6df0-907b-4bf7-a804-50a07fac9a97\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 291200,
          "CustomDeck": {
            "2912": {
              "FaceURL": "https://i.ibb.co/8jLvLh8/c311d5005015.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e39099",
          "Name": "Card",
          "Transform": {
            "rotX": -6.28466e-08,
            "rotY": 270.0,
            "rotZ": 1.907708e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fleeting Fortune (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"47f265ab-e117-46d8-98b7-5c994cdd00dc\",\"type\":\"Skill\",\"class\":\"Rogue\",\"traits\":\"Developed\",\"agilityIcons\":2,\"combatIcons\":2,\"level\":3,\"id\":\"47f265ab-e117-46d8-98b7-5c994cdd00dc\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 291600,
          "CustomDeck": {
            "2916": {
              "FaceURL": "https://i.ibb.co/ZTnf6tS/7ff0893ec958.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "240226",
          "Name": "Card",
          "Transform": {
            "rotX": -6.28466e-08,
            "rotY": 270.0,
            "rotZ": 1.907708e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Follow Through",
          "GMNotes": "{\"TtsZoopGuid\":\"eb259714-7eba-46fb-b8ee-1a628f66be64\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Tactic. Trick\",\"combatIcons\":1,\"willpowerIcons\":1,\"cost\":0,\"level\":0,\"agilityIcons\":1,\"id\":\"eb259714-7eba-46fb-b8ee-1a628f66be64\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 629300,
          "CustomDeck": {
            "6293": {
              "FaceURL": "https://i.ibb.co/mXgrxSz/fb8301bf186c.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e30472",
          "Name": "Card",
          "Transform": {
            "rotX": -6.28466e-08,
            "rotY": 270.0,
            "rotZ": 1.907708e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Bad Cop, Good Cop",
          "GMNotes": "{\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Tactic. Trick\",\"cost\":1,\"level\":0,\"combatIcons\":1,\"intellectIcons\":1,\"TtsZoopGuid\":\"d577afd7-770f-4348-8908-eb5b36c70020\",\"id\":\"d577afd7-770f-4348-8908-eb5b36c70020\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 642500,
          "CustomDeck": {
            "6425": {
              "FaceURL": "https://i.ibb.co/t80Nc9Y/b755cb9ba2b7.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "0c8691",
          "Name": "Card",
          "Transform": {
            "rotX": -4.88175544e-08,
            "rotY": 270.0036,
            "rotZ": 5.23546149e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Sly Fox",
          "GMNotes": "{\"TtsZoopGuid\":\"5bc06d67-4d45-40c3-9732-94fb2e916c35\",\"type\":\"Asset\",\"uses\":[{\"count\":3,\"token\":\"resource\",\"type\":\"Resource\"}],\"class\":\"Rogue\",\"traits\":\"Ally. Creature\",\"agilityIcons\":1,\"cost\":3,\"level\":0,\"id\":\"5bc06d67-4d45-40c3-9732-94fb2e916c35\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 293300,
          "CustomDeck": {
            "2933": {
              "FaceURL": "https://i.ibb.co/3hdng0N/b61c34a06c76.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "0ca6a8",
          "Name": "Card",
          "Transform": {
            "rotX": -1.65153281e-07,
            "rotY": 270.0078,
            "rotZ": -1.28525e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Tempest Snare",
          "GMNotes": "{\"TtsZoopGuid\":\"96082449-be3b-4285-b8f5-8e920b0cbf32\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Spell. Trap\",\"agilityIcons\":1,\"willpowerIcons\":1,\"cost\":2,\"level\":0,\"id\":\"96082449-be3b-4285-b8f5-8e920b0cbf32\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 292500,
          "CustomDeck": {
            "2925": {
              "FaceURL": "https://i.ibb.co/dGqyhbS/91e6333ce34e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "0ee456",
          "Name": "Card",
          "Transform": {
            "rotX": -1.2792043e-07,
            "rotY": 270.0,
            "rotZ": -4.67107157e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Dawnbreaker (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"8b58431a-3c2c-46d0-930c-3bca386ee444\",\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Item. Relic. Weapon. Melee\",\"agilityIcons\":2,\"cost\":3,\"level\":2,\"id\":\"8b58431a-3c2c-46d0-930c-3bca386ee444\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 270900,
          "CustomDeck": {
            "2709": {
              "FaceURL": "https://i.ibb.co/6gkvJ9q/2455ff236255.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "16ada1",
          "Name": "Card",
          "Transform": {
            "rotX": -2.91038873e-07,
            "rotY": 270.023,
            "rotZ": -5.015292e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Racketeering (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"7e9c7dce-d6dc-45fc-9d5b-4e0b5ad54978\",\"type\":\"Asset\",\"uses\":[{\"count\":6,\"token\":\"resource\",\"type\":\"Resource\"}],\"permanent\":true,\"class\":\"Rogue\",\"traits\":\"Talent. Illicit\",\"level\":3,\"id\":\"7e9c7dce-d6dc-45fc-9d5b-4e0b5ad54978\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 291900,
          "CustomDeck": {
            "2919": {
              "FaceURL": "https://i.ibb.co/pdRvt1V/f91ceedc3dc9.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "1d554a",
          "Name": "Card",
          "Transform": {
            "rotX": 1.14529996e-07,
            "rotY": 270.0,
            "rotZ": -1.3218596e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Match Fixing",
          "GMNotes": "{\"TtsZoopGuid\":\"6209967d-b489-4a4e-87a8-e8bb593dc8ee\",\"type\":\"Asset\",\"uses\":[{\"count\":0,\"token\":\"resource\",\"type\":\"Resource\"}],\"class\":\"Rogue\",\"traits\":\"Talent. Illicit\",\"combatIcons\":1,\"cost\":2,\"level\":0,\"id\":\"6209967d-b489-4a4e-87a8-e8bb593dc8ee\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 293700,
          "CustomDeck": {
            "2937": {
              "FaceURL": "https://i.ibb.co/zZpBsxK/e728624cfe35.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "297e73",
          "Name": "Card",
          "Transform": {
            "rotX": -3.14710178e-07,
            "rotY": 270.0024,
            "rotZ": -8.23449341e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Oliver Blackwood (5)",
          "Description": "Phantom Thief",
          "GMNotes": "{\"TtsZoopGuid\":\"9d969835-039c-43f8-ae36-092dd637c8ef\",\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Ally. Criminal\",\"agilityIcons\":3,\"cost\":4,\"level\":5,\"id\":\"9d969835-039c-43f8-ae36-092dd637c8ef\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 626200,
          "CustomDeck": {
            "6262": {
              "FaceURL": "https://i.ibb.co/ns2ktBr/d395b6b1f693.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "2fe796",
          "Name": "Card",
          "Transform": {
            "rotX": 8.46649471e-07,
            "rotY": 270.0005,
            "rotZ": -1.02636318e-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Sly Fox (2)",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Ally. Creature\",\"cost\":3,\"level\":2,\"agilityIcons\":1,\"intellectIcons\":1,\"uses\":[{\"count\":3,\"token\":\"resource\",\"type\":\"Resource\"}],\"TtsZoopGuid\":\"fe38fd41-86ae-425c-830f-e7e494bf3df6\",\"id\":\"fe38fd41-86ae-425c-830f-e7e494bf3df6\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 644200,
          "CustomDeck": {
            "6442": {
              "FaceURL": "https://i.ibb.co/yqJG3zc/560256302192.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "48ada8",
          "Name": "Card",
          "Transform": {
            "rotX": -6.28466e-08,
            "rotY": 270.0,
            "rotZ": 1.907708e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Martin Roche",
          "Description": "Cleans Up Any Mess",
          "GMNotes": "{\"TtsZoopGuid\":\"dddf8914-ca28-4534-b815-71b69df08889\",\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Ally. Criminal. Syndicate\",\"willpowerIcons\":1,\"cost\":3,\"level\":0,\"agilityIcons\":1,\"id\":\"dddf8914-ca28-4534-b815-71b69df08889\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 292200,
          "CustomDeck": {
            "2922": {
              "FaceURL": "https://i.ibb.co/gzyvj6N/a5cfc7f231cc.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "4edc4d",
          "Name": "Card",
          "Transform": {
            "rotX": 2.577223e-07,
            "rotY": 269.994568,
            "rotZ": -3.13309272e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Calculated Risk",
          "GMNotes": "{\"TtsZoopGuid\":\"0a276f8d-ee1b-427c-b14d-dd7daf639ede\",\"type\":\"Skill\",\"class\":\"Rogue\",\"traits\":\"Gambit. Fated\",\"level\":0,\"id\":\"0a276f8d-ee1b-427c-b14d-dd7daf639ede\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 292300,
          "CustomDeck": {
            "2923": {
              "FaceURL": "https://i.ibb.co/g3Q4zjx/8e034ebcc4fd.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "4f995d",
          "Name": "Card",
          "Transform": {
            "rotX": -1.62257166e-07,
            "rotY": 270.0019,
            "rotZ": 9.931725e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Matador",
          "GMNotes": "{\"TtsZoopGuid\":\"b33524da-ee23-47a8-aba8-c5f9f0dced91\",\"type\":\"Asset\",\"uses\":[{\"count\":4,\"token\":\"resource\",\"type\":\"Resource\"}],\"class\":\"Rogue\",\"traits\":\"Talent\",\"cost\":2,\"level\":0,\"agilityIcons\":1,\"id\":\"b33524da-ee23-47a8-aba8-c5f9f0dced91\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 626400,
          "CustomDeck": {
            "6264": {
              "FaceURL": "https://i.ibb.co/54gWv9g/6de4758b8150.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "a197ad",
          "Name": "Card",
          "Transform": {
            "rotX": -1.68198184e-07,
            "rotY": 270.0,
            "rotZ": 1.29146827e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Protection Fee",
          "GMNotes": "{\"TtsZoopGuid\":\"2ef78d5e-bbd9-455e-8cf0-d25ec193c6a6\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Favor. Illicit\",\"agilityIcons\":1,\"combatIcons\":1,\"cost\":0,\"level\":0,\"id\":\"2ef78d5e-bbd9-455e-8cf0-d25ec193c6a6\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 293600,
          "CustomDeck": {
            "2936": {
              "FaceURL": "https://i.ibb.co/dW44y45/1fe6e7c192fc.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000f",
          "Name": "Card",
          "Transform": {
            "rotX": -1.68198184e-07,
            "rotY": 270.0,
            "rotZ": 1.29146827e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Intel Network",
          "GMNotes": "{\"TtsZoopGuid\":\"6aa57031-2d7d-4441-b850-0438a67a3644\",\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Talent\",\"intellectIcons\":1,\"cost\":2,\"level\":0,\"id\":\"6aa57031-2d7d-4441-b850-0438a67a3644\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 638800,
          "CustomDeck": {
            "6388": {
              "FaceURL": "https://i.ibb.co/1ZSf2zS/91583d7ac0d0.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00012",
          "Name": "Card",
          "Transform": {
            "rotX": 1.79347346e-08,
            "rotY": 270.0,
            "rotZ": -1.2556869e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Fiona MacLeod (3)",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Ally. Sorcerer. Cursed\",\"cost\":3,\"level\":3,\"willpowerIcons\":1,\"wildIcons\":1,\"TtsZoopGuid\":\"2a7aa31e-80b1-4df6-b091-c894ca43cbe8\",\"id\":\"2a7aa31e-80b1-4df6-b091-c894ca43cbe8\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 673000,
          "CustomDeck": {
            "6730": {
              "FaceURL": "https://i.ibb.co/3s9sT5z/d2873cf49296.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f7cadb",
          "Name": "Card",
          "Transform": {
            "rotX": -1.68784865e-07,
            "rotY": 270.0,
            "rotZ": -4.14854725e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Gloom Cloak (2)",
          "GMNotes": "{\"TtsZoopGuid\":\"97891447-6e3f-42d9-9ac1-9acb09142723\",\"type\":\"Asset\",\"uses\":[{\"count\":1,\"token\":\"resource\",\"type\":\"Durability\"}],\"class\":\"Rogue\",\"traits\":\"Item. Clothing\",\"agilityIcons\":1,\"willpowerIcons\":1,\"cost\":3,\"level\":2,\"id\":\"97891447-6e3f-42d9-9ac1-9acb09142723\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 305100,
          "CustomDeck": {
            "3051": {
              "FaceURL": "https://i.ibb.co/5YC8NX4/4552a87a14ab.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "16a710",
          "Name": "Card",
          "Transform": {
            "rotX": -2.10655713e-07,
            "rotY": 270.0,
            "rotZ": 2.83831241e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Kunai (3)",
          "GMNotes": "{\"TtsZoopGuid\":\"1506de9c-59a4-4911-95bc-a392e80583c4\",\"type\":\"Asset\",\"uses\":[{\"count\":3,\"token\":\"resource\",\"type\":\"Supply\"}],\"class\":\"Rogue\",\"traits\":\"Item. Weapon. Ranged\",\"agilityIcons\":2,\"cost\":2,\"level\":3,\"id\":\"1506de9c-59a4-4911-95bc-a392e80583c4\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 291100,
          "CustomDeck": {
            "2911": {
              "FaceURL": "https://i.ibb.co/2KR8BGP/96560c2fd3d6.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00002",
          "Name": "Card",
          "Transform": {
            "rotX": -3.318818e-07,
            "rotY": 270.0,
            "rotZ": 2.21307445e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Intel Network (4)",
          "GMNotes": "{\"type\":\"Asset\",\"class\":\"Rogue\",\"traits\":\"Talent\",\"cost\":2,\"level\":4,\"intellectIcons\":2,\"TtsZoopGuid\":\"f7132815-6e0d-4e80-bd94-2b608492211e\",\"id\":\"f7132815-6e0d-4e80-bd94-2b608492211e\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 672000,
          "CustomDeck": {
            "6720": {
              "FaceURL": "https://i.ibb.co/YcYnHc2/dcd99a1809af.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "cf05ab",
          "Name": "Card",
          "Transform": {
            "rotX": 1.14529996e-07,
            "rotY": 270.0,
            "rotZ": -1.3218596e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Feint",
          "GMNotes": "{\"TtsZoopGuid\":\"c1288bed-dfdb-4137-88a0-47cdf564020d\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Trick. Tactic\",\"agilityIcons\":1,\"combatIcons\":1,\"cost\":2,\"level\":0,\"id\":\"c1288bed-dfdb-4137-88a0-47cdf564020d\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 626700,
          "CustomDeck": {
            "6267": {
              "FaceURL": "https://i.ibb.co/02d8RGt/3de5603d2f4b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b1469c",
          "Name": "Card",
          "Transform": {
            "rotX": -2.83249957e-08,
            "rotY": 269.9902,
            "rotZ": -7.160827e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Kunai",
          "GMNotes": "{\"TtsZoopGuid\":\"fa864749-b4e6-42b9-81ea-05a0e7340dc9\",\"type\":\"Asset\",\"uses\":[{\"count\":2,\"token\":\"resource\",\"type\":\"Supply\"}],\"class\":\"Rogue\",\"traits\":\"Item. Weapon. Ranged\",\"agilityIcons\":1,\"cost\":2,\"level\":0,\"id\":\"fa864749-b4e6-42b9-81ea-05a0e7340dc9\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 291400,
          "CustomDeck": {
            "2914": {
              "FaceURL": "https://i.ibb.co/M2bwmgY/0622dbd87286.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "f159fd",
          "Name": "Card",
          "Transform": {
            "rotX": 1.14529996e-07,
            "rotY": 270.0,
            "rotZ": -1.3218596e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Body Double",
          "GMNotes": "{\"TtsZoopGuid\":\"843347c5-e51f-4143-9e8a-835fe20634e8\",\"type\":\"Event\",\"class\":\"Rogue\",\"traits\":\"Trick\",\"cost\":1,\"level\":0,\"id\":\"843347c5-e51f-4143-9e8a-835fe20634e8\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 626300,
          "CustomDeck": {
            "6263": {
              "FaceURL": "https://i.ibb.co/j677x7h/5544bcfa7a79.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b362ea",
          "Name": "Card",
          "Transform": {
            "rotX": 1.14529996e-07,
            "rotY": 270.0,
            "rotZ": -1.3218596e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Out of Dodge",
          "GMNotes": "{\"type\":\"Skill\",\"class\":\"Rogue\",\"traits\":\"Innate. Fated\",\"level\":0,\"agilityIcons\":1,\"wildIcons\":1,\"TtsZoopGuid\":\"a36bd143-fbec-4a0b-974c-97dd6fc39c27\",\"combatIcons\":1,\"id\":\"a36bd143-fbec-4a0b-974c-97dd6fc39c27\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 636300,
          "CustomDeck": {
            "6363": {
              "FaceURL": "https://i.ibb.co/18Nvs5z/1701fb0b747f.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        }
      ]
    },
    {
      "GUID": "f4af40",
      "Name": "Bag",
      "Transform": {
        "rotX": -1.13187255e-07,
        "rotY": 89.99501,
        "rotZ": 1.88664046e-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Investigators",
      "Description": "By Directsun",
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.438995451,
        "b": 0.807
      },
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Utility memory bag by Directsun\n-- Version 2.7.0\n-- Fork of Memory Bag 2.0 by MrStump\n--\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\n\nCONFIG = {\n    MEMORY_GROUP = {\n        -- This determines how many frames to wait before actually placing objects onto the table when the \"Place\" button is clicked.\n        -- This gives the other bags time to recall their objects.\n        -- The delay ONLY occurs if other bags have objects out.\n        FRAME_DELAY_BEFORE_PLACING_OBJECTS = 30,\n    },\n}\n\n\n--[[ Memory Bag Groups ]]-------------------------------------------------------\n--[[\nUtility Memory Bags may be added to a named group, called a \"memory group\".\nYou can add a bag to a group through the bag's UI: \"Setup\" > \"Group Name\" (to the left of the bag).\nOnly one bag from a group may have it's contents placed on the table at a time.\nWhen \"Place\" is clicked on a bag, the other bags in it's memory group are recalled.\nBy default a memory bag is not in any group. It's memory group is \"nil\".\n--]]\n\nmemoryGroupName = {memoryBag=self}\nfunction memoryGroupName:get()\n    return self._name\nend\nfunction memoryGroupName:set(newName)\n    GlobalMemoryGroups:unregisterBagInGroup(self:get(), self.memoryBag.getGUID())\n    GlobalMemoryGroups:registerBagInGroup(newName, self.memoryBag.getGUID())\n\n    if newName == \"\" then\n        self._name = nil\n    else\n        self._name = newName\n    end\nend\n\n-- Click the \"Recall\" button on all other bags in my memory group.\nfunction recallOtherBagsInMyGroup()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        bag.call('buttonClick_recall')\n    end\nend\n\n-- Return \"true\" if another bag in my memory group has any objects out on the table.\nfunction anyOtherBagsInMyGroupArePlaced()\n    for _,bag in ipairs(getOtherBagsInMyGroup()) do\n        local state = bag.call('areAnyOfMyObjectsPlaced')\n        if state then return true end\n    end\n\n    return false\nend\n\n-- Return \"true\" if at least one object from this memory bag is out on the table.\nfunction areAnyOfMyObjectsPlaced()\n    for guid,_ in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then\n            return true\n        end\n    end\n    return false\nend\n\nfunction getOtherBagsInMyGroup()\n    local bags = {}\n    for bagGuid,_ in pairs(GlobalMemoryGroups:getGroup(memoryGroupName:get())) do\n        if bagGuid ~= self.getGUID() then\n            bag = getObjectFromGUID(bagGuid)\n            -- \"bag\" is nill if it has been deleted since the last time onLoad() was called.\n            if bag ~= nil then\n                table.insert(bags, bag)\n            end\n        end\n    end\n    return bags\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the names & guids of all memory bag groups.\nThe global variable is a table and holds data like this:\n{\n    'My First Group Name' = {\n        '805ebd' = {},\n        '35cc21' = {},\n        'fc8886' = {},\n    },\n    'My Second Group Name' = {\n        'f50264' = {},\n        '5f5f63' = {},\n    },\n}\n--]]\nGlobalMemoryGroups = {\n    NAME_OF_GLOBAL_VARIABLE = '_GlobalUtilityMemoryBagGroups',\n}\n\n-- Call me inside this script's \"onLoad()\" method!\nfunction GlobalMemoryGroups:onLoad(myGuid)\n    -- Create and initialize the global variable if it doesn't already exist:\n    if self:_getGroups() == nil then\n        self:_setGroups({})\n    end\nend\n\n-- Return the GUIDs of all bags in the \"groupName\". The return value is a dictionary that maps [GUID -> empty table].\nfunction GlobalMemoryGroups:getGroup(groupName)\n    guids = self:_getGroups()[groupName] or {}\n    return guids\nend\n\n-- Registers a bag in a memory group. Creates a new group if one doesn't exist.\nfunction GlobalMemoryGroups:registerBagInGroup(groupName, bagGuid)\n    if groupName == nil or groupName == \"\" then\n        return\n    end\n\n    self:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    groups[groupName][bagGuid] = {}\n    self:_setGroups(groups)\nend\n\n-- Removes this bag from the memory group.\nfunction GlobalMemoryGroups:unregisterBagInGroup(groupName, bagGuid)\n    local groups = self:_getGroups()\n    local group = groups[groupName]\n    if group ~= nil then\n        group[bagGuid] = nil\n        self:_setGroups(groups)\n    end\nend\n\n-- Return the global variable, which is a table holding all memory group names & guids.\nfunction GlobalMemoryGroups:_getGroups()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE)\nend\n\n-- Override the global variable (i.e. the entire table).\nfunction GlobalMemoryGroups:_setGroups(newTable)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, newTable)\nend\n\n-- Add a new memory group named \"groupName\" to the global variable, if one doesn't already exist.\nfunction GlobalMemoryGroups:_tryCreateNewGroup(groupName)\n    local groups = self:_getGroups()\n    if groups[groupName] == nil then\n        groups[groupName] = {}\n        self:_setGroups(groups)\n    end\nend\n\n\n-- This object controls the \"Group Name\" input text field that is part of the bag's ingame UI.\ngroupNameInput = {\n    greyedOutText = \"Group Name\",\n    widthPerCharacter = 100,\n    padding = 4,\n    memoryBag=self,\n}\nfunction groupNameInput:create(optionalStartingValue)\n    local effectiveText = optionalStartingValue or self.greyedOutText\n    local width = self:computeWidth(effectiveText)\n\n    self.memoryBag.createInput({\n        label=self.greyedOutText,\n        value=optionalStartingValue or nil,\n        alignment=3, -- Center aligned\n        input_function=\"groupNameInput_onCharacterTyped\", function_owner=self.memoryBag,\n        position={2.1,0.3,0}, rotation={0,270,0}, width=width, height=350,\n        font_size=250, color={0,0,0}, font_color={1,1,1},\n    })\nend\nfunction groupNameInput:computeWidth(text)\n    return (string.len(text) + self.padding) * self.widthPerCharacter\nend\nfunction groupNameInput:updatedWidth(text)\n    self.memoryBag.editInput({\n        index=0,\n        width=self:computeWidth(text)\n    })\nend\nfunction groupNameInput:onCharacterTyped(text, stillEditing)\n    if stillEditing then\n        self:updatedWidth(text)\n    else\n        if text == \"\" then\n            self:updatedWidth(self.greyedOutText)\n        end\n    end\nend\nfunction groupNameInput_onCharacterTyped(memoryBag, playerColor, text, stillEditing)\n    groupNameInput:onCharacterTyped(text, stillEditing)\nend\nfunction groupNameInput:setGroupNameToInputField()\n    local inputFields = self.memoryBag.getInputs()\n    if inputFields ~= nil then\n        -- Get input field 0, which corresponds to the groupNameInput.\n        -- Unfortunately \"self.getInputs()\" doesn't return the inputs in a guaranteed order.\n        local nameField = nil\n        for _,field in ipairs(inputFields) do\n            if field.index == 0 then\n                nameField = field\n            end\n        end\n\n        memoryGroupName:set(nameField.value)\n    end\nend\n\n\n\n\n\n--//////////////////////////////////////////////////////////////////////////////\n\n\nfunction updateSave()\n    local data_to_save = {[\"ml\"]=memoryList,[\"groupName\"]=memoryGroupName:get()}\n    saved_data = JSON.encode(data_to_save)\n    self.script_state = saved_data\nend\n\nfunction combineMemoryFromBagsWithin()\n    local bagObjList = self.getObjects()\n    for _, bagObj in ipairs(bagObjList) do\n        local data = bagObj.lua_script_state\n        if data ~= nil then\n            local j = JSON.decode(data)\n            if j ~= nil and j.ml ~= nil then\n                for guid, entry in pairs(j.ml) do\n                    memoryList[guid] = entry\n                end\n            end\n        end\n    end\nend\n\nfunction updateMemoryWithMoves()\n    memoryList = memoryListBackup\n    --get the first transposed object's coordinates\n    local obj = getObjectFromGUID(moveGuid)\n\n    -- p1 is where needs to go, p2 is where it was\n    local refObjPos = memoryList[moveGuid].pos\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\n    local movedRotation = obj.getRotation()\n    for guid, entry in pairs(memoryList) do\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\n        -- memoryList[guid].rot.x = movedRotation.x\n        -- memoryList[guid].rot.y = movedRotation.y\n        -- memoryList[guid].rot.z = movedRotation.z\n    end\n\n    --theList[obj.getGUID()] = {\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n    --    lock=obj.getLock()\n    --}\n    moveList = {}\nend\n\nfunction onload(saved_data)\n    GlobalMemoryGroups:onLoad(self.getGUID())\n    AllMemoryBagsInScene:add(self.getGUID())\n\n    fresh = true\n    if saved_data ~= \"\" then\n        local loaded_data = JSON.decode(saved_data)\n        --Set up information off of loaded_data\n        memoryList = loaded_data.ml\n        memoryGroupName:set(loaded_data.groupName)\n    else\n        --Set up information for if there is no saved saved data\n        memoryList = {}\n        memoryGroupName:set(nil)\n    end\n\n    moveList = {}\n    moveGuid = nil\n\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        fresh = false\n        createMemoryActionButtons()\n    end\nend\n\n\n--Beginning Setup\n\n\n--Make setup button\nfunction createSetupButton()\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n--Triggered by Transpose button\nfunction buttonClick_transpose()\n    moveGuid = nil\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(true)\n    createSetupActionButtons(true)\nend\n\n--Triggered by setup button,\nfunction buttonClick_setup()\n    memoryListBackup = duplicateTable(memoryList)\n    memoryList = {}\n    self.clearButtons()\n    self.clearInputs()\n    createButtonsOnAllObjects(false)\n    createSetupActionButtons(false)\nend\n\nfunction getAllObjectsInMemory()\n    local objTable = {}\n    local curObj = {}\n\n    for guid in pairs(memoryListBackup) do\n        curObj = getObjectFromGUID(guid)\n        table.insert(objTable, curObj)\n    end\n\n    return objTable\n    -- return getAllObjects()\nend\n\n--Creates selection buttons on objects\nfunction createButtonsOnAllObjects(move)\n    buttonIndexMap = {}\n    local howManyButtons = 0\n\n    local objsToHaveButtons = {}\n    if move == true then\n        objsToHaveButtons = getAllObjectsInMemory()\n    else\n        objsToHaveButtons = getAllObjects()\n    end\n\n    for _, obj in ipairs(objsToHaveButtons) do\n        if obj ~= self then\n            --On a normal bag, the button positions aren't the same size as the bag.\n            globalScaleFactor = 1.25 * 1/self.getScale().x\n            --Super sweet math to set button positions\n            local selfPos = self.getPosition()\n            local objPos = obj.getPosition()\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\n            local objPos = rotateLocalCoordinates(deltaPos, self)\n            objPos.x = -objPos.x * globalScaleFactor\n            objPos.y = objPos.y * globalScaleFactor\n            objPos.z = objPos.z * globalScaleFactor\n            --Workaround for custom PDFs\n            if obj.Book then\n                objPos.y = objPos.y + 0.5\n            end\n            --Offset rotation of bag\n            local rot = self.getRotation()\n            rot.y = -rot.y + 180\n            --Create function\n            local funcName = \"selectButton_\" .. howManyButtons\n            local func = function() buttonClick_selection(obj, move) end\n            local color = {0.75,0.25,0.25,0.6}\n            local colorMove = {0,0,1,0.6}\n            if move == true then\n                color = colorMove\n            end\n            self.setVar(funcName, func)\n            self.createButton({\n                click_function=funcName, function_owner=self,\n                position=objPos, rotation=rot, height=1000, width=1000,\n                color=color,\n            })\n            buttonIndexMap[obj.getGUID()] = howManyButtons\n            howManyButtons = howManyButtons + 1\n        end\n    end\nend\n\n--Creates submit and cancel buttons\nfunction createSetupActionButtons(move)\n    self.createButton({\n        label=\"Cancel\", click_function=\"buttonClick_cancel\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    self.createButton({\n        label=\"Submit\", click_function=\"buttonClick_submit\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=1100,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n\n    if move == false then\n        self.createButton({\n            label=\"Add\", click_function=\"buttonClick_add\", function_owner=self,\n            position={0,0.3,-3.6}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\n        })\n\n        self.createButton({\n            label=\"Selection\", click_function=\"editDragSelection\", function_owner=self,\n            position={0,0.3,2}, rotation={0,180,0}, height=350, width=1100,\n            font_size=250, color={0,0,0}, font_color={1,1,1}\n        })\n        groupNameInput:create(memoryGroupName:get())\n\n        if fresh == false then\n            self.createButton({\n                label=\"Set New\", click_function=\"buttonClick_setNew\", function_owner=self,\n                position={0,0.3,-4.4}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n            })\n            self.createButton({\n                label=\"Remove\", click_function=\"buttonClick_remove\", function_owner=self,\n                position={0,0.3,-5.2}, rotation={0,180,0}, height=350, width=1100,\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\n            })\n        end\n    end\n\n    self.createButton({\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\nend\n\n\n--During Setup\n\n\n--Checks or unchecks buttons\nfunction buttonClick_selection(obj, move)\n    local index = buttonIndexMap[obj.getGUID()]\n    local colorMove = {0,0,1,0.6}\n    local color = {0,1,0,0.6}\n\n    previousGuid = selectedGuid\n    selectedGuid = obj.getGUID()\n\n    theList = memoryList\n    if move == true then\n        theList = moveList\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\n            local prevObj = getObjectFromGUID(previousGuid)\n            prevObj.highlightOff()\n            self.editButton({index=previousIndex, color=colorMove})\n            theList[previousGuid] = nil\n        end\n        previousIndex = index\n    end\n\n    if theList[selectedGuid] == nil then\n        self.editButton({index=index, color=color})\n        --Adding pos/rot to memory table\n        local pos, rot = obj.getPosition(), obj.getRotation()\n        --I need to add it like this or it won't save due to indexing issue\n        theList[obj.getGUID()] = {\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n            lock=obj.getLock(),\n            tint=obj.getColorTint()\n        }\n        obj.highlightOn({0,1,0})\n    else\n        color = {0.75,0.25,0.25,0.6}\n        if move == true then\n            color = colorMove\n        end\n        self.editButton({index=index, color=color})\n        theList[obj.getGUID()] = nil\n        obj.highlightOff()\n    end\nend\n\nfunction editDragSelection(bagObj, player, remove)\n    local selectedObjs = Player[player].getSelectedObjects()\n    if not remove then\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            --Ignore if already in the memory list, or does not have a button\n            if index and not memoryList[obj.getGUID()] then\n                self.editButton({index=index, color={0,1,0,0.6}})\n                --Adding pos/rot to memory table\n                local pos, rot = obj.getPosition(), obj.getRotation()\n                --I need to add it like this or it won't save due to indexing issue\n                memoryList[obj.getGUID()] = {\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\n                    lock=obj.getLock(),\n                    tint=obj.getColorTint()\n                }\n                obj.highlightOn({0,1,0})\n            end\n        end\n    else\n        for _, obj in ipairs(selectedObjs) do\n            local index = buttonIndexMap[obj.getGUID()]\n            if index and memoryList[obj.getGUID()] then\n                color = {0.75,0.25,0.25,0.6}\n                self.editButton({index=index, color=color})\n                memoryList[obj.getGUID()] = nil\n                obj.highlightOff()\n            end\n        end\n    end\nend\n\n--Cancels selection process\nfunction buttonClick_cancel()\n    memoryList = memoryListBackup\n    moveList = {}\n    self.clearButtons()\n    self.clearInputs()\n    if next(memoryList) == nil then\n        createSetupButton()\n    else\n        createMemoryActionButtons()\n    end\n    removeAllHighlights()\n    broadcastToAll(\"Selection Canceled\", {1,1,1})\n    moveGuid = nil\nend\n\n--Saves selections\nfunction buttonClick_submit()\n    fresh = false\n    if next(moveList) ~= nil then\n        for guid in pairs(moveList) do\n            moveGuid = guid\n        end\n        if memoryListBackup[moveGuid] == nil then\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\n        else\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\n            self.clearButtons()\n            self.clearInputs()\n            createMemoryActionButtons()\n            local count = 0\n            for guid in pairs(moveList) do\n                moveGuid = guid\n                count = count + 1\n                local obj = getObjectFromGUID(guid)\n                if obj ~= nil then obj.highlightOff() end\n            end\n            updateMemoryWithMoves()\n            updateSave()\n            buttonClick_place()\n        end\n    elseif next(memoryList) == nil and moveGuid == nil then\n        memoryList = memoryListBackup\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\n    end\n    combineMemoryFromBagsWithin()\n    groupNameInput:setGroupNameToInputField()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\n    moveGuid = nil\nend\n\nfunction combineTables(first_table, second_table)\n    for k,v in pairs(second_table) do first_table[k] = v end\nend\n\nfunction buttonClick_add()\n    fresh = false\n    combineTables(memoryList, memoryListBackup)\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\n    combineMemoryFromBagsWithin()\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    updateSave()\nend\n\nfunction buttonClick_remove()\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for guid in pairs(memoryList) do\n        count = count + 1\n        memoryListBackup[guid] = nil\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then obj.highlightOff() end\n    end\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\nfunction buttonClick_setNew()\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\n    self.clearButtons()\n    self.clearInputs()\n    createMemoryActionButtons()\n    local count = 0\n    for _, obj in ipairs(getAllObjects()) do\n        guid = obj.guid\n        if memoryListBackup[guid] ~= nil then\n            count = count + 1\n            memoryListBackup[guid].pos = obj.getPosition()\n            memoryListBackup[guid].rot = obj.getRotation()\n            memoryListBackup[guid].lock = obj.getLock()\n            memoryListBackup[guid].tint = obj.getColorTint()\n        end\n    end\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\n    memoryList = memoryListBackup\n    updateSave()\nend\n\n--Resets bag to starting status\nfunction buttonClick_reset()\n    fresh = true\n    memoryList = {}\n    memoryGroupName:set(nil)\n    self.clearButtons()\n    self.clearInputs()\n    createSetupButton()\n    removeAllHighlights()\n    broadcastToAll(\"Tool Reset\", {1,1,1})\n    updateSave()\nend\n\n\n--After Setup\n\n\n--Creates recall and place buttons\nfunction createMemoryActionButtons()\n    self.createButton({\n        label=\"Place\", click_function=\"buttonClick_place\", function_owner=self,\n        position={0,0.3,-2}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Recall\", click_function=\"buttonClick_recall\", function_owner=self,\n        position={0,0.3,-2.8}, rotation={0,180,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Setup\", click_function=\"buttonClick_setup\", function_owner=self,\n        position={-2,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move\", click_function=\"buttonClick_transpose\", function_owner=self,\n        position={-2.8,0.3,0}, rotation={0,270,0}, height=350, width=800,\n        font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\n    })\nend\n\n--Sends objects from bag/table to their saved position/rotation\nfunction buttonClick_place()\n    if anyOtherBagsInMyGroupArePlaced() then\n        recallOtherBagsInMyGroup()\n        Wait.frames(_placeObjects, CONFIG.MEMORY_GROUP.FRAME_DELAY_BEFORE_PLACING_OBJECTS)\n    else\n        _placeObjects()\n    end\nend\n\nfunction _placeObjects()\n    local bagObjList = self.getObjects()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        --If obj is out on the table, move it to the saved pos/rot\n        if obj ~= nil then\n            obj.setPositionSmooth(entry.pos)\n            obj.setRotationSmooth(entry.rot)\n            obj.setLock(entry.lock)\n            obj.setColorTint(entry.tint)\n        else\n            --If obj is inside of the bag\n            for _, bagObj in ipairs(bagObjList) do\n                if bagObj.guid == guid then\n                    local item = self.takeObject({\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\n                    })\n                    item.setLock(entry.lock)\n                    item.setColorTint(entry.tint)\n                    break\n                end\n            end\n        end\n    end\n    broadcastToAll(\"Objects Placed\", {1,1,1})\nend\n\n--Recalls objects to bag from table\nfunction buttonClick_recall()\n    for guid, entry in pairs(memoryList) do\n        local obj = getObjectFromGUID(guid)\n        if obj ~= nil then self.putObject(obj) end\n    end\n    broadcastToAll(\"Objects Recalled\", {1,1,1})\nend\n\n\n--Utility functions\n\n\n--Find delta (difference) between 2 x/y/z coordinates\nfunction findOffsetDistance(p1, p2, obj)\n    local yOffset = 0\n    if obj ~= nil then\n        local bounds = obj.getBounds()\n        yOffset = (bounds.size.y - bounds.offset.y)\n    end\n    local deltaPos = {}\n    deltaPos.x = (p2.x-p1.x)\n    deltaPos.y = (p2.y-p1.y) + yOffset\n    deltaPos.z = (p2.z-p1.z)\n    return deltaPos\nend\n\n--Used to rotate a set of coordinates by an angle\nfunction rotateLocalCoordinates(desiredPos, obj)\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\n    local angle = math.rad(objRot.y)\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\n    return {x=x, y=desiredPos.y, z=z}\nend\n\nfunction rotateMyCoordinates(desiredPos, obj)\n    local angle = math.rad(obj.getRotation().y)\n    local x = desiredPos.x * math.sin(angle)\n    local z = desiredPos.z * math.cos(angle)\n    return {x=x, y=desiredPos.y, z=z}\nend\n\n--Coroutine delay, in seconds\nfunction wait(time)\n    local start = os.time()\n    repeat coroutine.yield(0) until os.time() > start + time\nend\n\n--Duplicates a table (needed to prevent it making reference to the same objects)\nfunction duplicateTable(oldTable)\n    local newTable = {}\n    for k, v in pairs(oldTable) do\n        newTable[k] = v\n    end\n    return newTable\nend\n\n--Moves scripted highlight from all objects\nfunction removeAllHighlights()\n    for _, obj in ipairs(getAllObjects()) do\n        obj.highlightOff()\n    end\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n    local mult = 10^(dec or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n\n--[[\nThis object provides access to a variable stored on the \"Global script\".\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\nExample:\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\n--]]\nAllMemoryBagsInScene = {\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\n}\n\nfunction AllMemoryBagsInScene:add(guid)\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\n    table.insert(guids, guid)\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\nend\n\nfunction AllMemoryBagsInScene:getGuidList()\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\nend",
      "LuaScriptState": "{\"ml\":{\"1b8a22\":{\"lock\":false,\"pos\":{\"x\":45.2569,\"y\":1.4951,\"z\":86.4168},\"rot\":{\"x\":0,\"y\":269.9999,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"31e6cf\":{\"lock\":false,\"pos\":{\"x\":38.6419,\"y\":1.4951,\"z\":71.115},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"606a75\":{\"lock\":false,\"pos\":{\"x\":45.2419,\"y\":1.4951,\"z\":63.465},\"rot\":{\"x\":0,\"y\":269.9912,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"756741\":{\"lock\":false,\"pos\":{\"x\":48.5419,\"y\":1.4951,\"z\":71.115},\"rot\":{\"x\":0,\"y\":270.0248,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"88a962\":{\"lock\":false,\"pos\":{\"x\":48.5419,\"y\":1.4951,\"z\":78.7651},\"rot\":{\"x\":0,\"y\":269.9956,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8ea192\":{\"lock\":false,\"pos\":{\"x\":41.9418,\"y\":1.5121,\"z\":55.9033},\"rot\":{\"x\":0,\"y\":269.9912,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9eb5a0\":{\"lock\":false,\"pos\":{\"x\":48.5419,\"y\":1.4951,\"z\":63.465},\"rot\":{\"x\":0,\"y\":269.9956,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b070d0\":{\"lock\":false,\"pos\":{\"x\":45.2419,\"y\":1.4951,\"z\":78.7651},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b11fa8\":{\"lock\":false,\"pos\":{\"x\":48.5419,\"y\":1.4951,\"z\":86.4151},\"rot\":{\"x\":0,\"y\":270.0103,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b1e93b\":{\"lock\":false,\"pos\":{\"x\":48.5419,\"y\":1.4951,\"z\":55.815},\"rot\":{\"x\":0,\"y\":270.0246,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bbaf11\":{\"lock\":false,\"pos\":{\"x\":41.9535,\"y\":1.5217,\"z\":78.7513},\"rot\":{\"x\":0,\"y\":269.9861,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d0ed57\":{\"lock\":false,\"pos\":{\"x\":45.2419,\"y\":1.4951,\"z\":55.815},\"rot\":{\"x\":0,\"y\":269.9912,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d58bf9\":{\"lock\":false,\"pos\":{\"x\":41.9539,\"y\":1.5121,\"z\":86.4176},\"rot\":{\"x\":0,\"y\":269.9999,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d8f0f8\":{\"lock\":false,\"pos\":{\"x\":38.6419,\"y\":1.4951,\"z\":78.7651},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0000a\":{\"lock\":false,\"pos\":{\"x\":41.9419,\"y\":1.4951,\"z\":71.115},\"rot\":{\"x\":0,\"y\":269.9867,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0000e\":{\"lock\":false,\"pos\":{\"x\":41.9539,\"y\":1.4951,\"z\":86.4203},\"rot\":{\"x\":0,\"y\":270.0001,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00011\":{\"lock\":false,\"pos\":{\"x\":38.6419,\"y\":1.4951,\"z\":86.4151},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00016\":{\"lock\":false,\"pos\":{\"x\":38.6419,\"y\":1.4951,\"z\":63.465},\"rot\":{\"x\":0,\"y\":269.9883,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e00017\":{\"lock\":false,\"pos\":{\"x\":41.9419,\"y\":1.4951,\"z\":63.465},\"rot\":{\"x\":0,\"y\":269.9917,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e0001d\":{\"lock\":false,\"pos\":{\"x\":38.6419,\"y\":1.4951,\"z\":55.815},\"rot\":{\"x\":0,\"y\":269.9911,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e3ab45\":{\"lock\":false,\"pos\":{\"x\":45.2419,\"y\":1.4951,\"z\":71.115},\"rot\":{\"x\":0,\"y\":270,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
      "ContainedObjects": [
        {
          "GUID": "1b8a22",
          "Name": "Card",
          "Transform": {
            "rotX": -1.86896742e-07,
            "rotY": 269.999939,
            "rotZ": 1.84284641e-08,
            "scaleX": 0.783099234,
            "scaleY": 1.0,
            "scaleZ": 0.783099234
          },
          "Nickname": "Sister Sophia",
          "Description": "The Penitent",
          "GMNotes": "{\"TtsZoopGuid\":\"9a4cc2e7-cc2b-41c7-83c0-a1014172a0b7\",\"type\":\"Investigator\",\"class\":\"Guardian\",\"traits\":\"Warden. Believer. Cursed\",\"agilityIcons\":1,\"combatIcons\":3,\"intellectIcons\":3,\"willpowerIcons\":5,\"id\":\"9a4cc2e7-cc2b-41c7-83c0-a1014172a0b7\"}",
          "Tags": [
            "Investigator",
            "PlayerCard"
          ],
          "CardID": 266400,
          "CustomDeck": {
            "2664": {
              "FaceURL": "https://i.ibb.co/jzqHXk3/835125f6ab21.png",
              "BackURL": "https://i.ibb.co/fk4LxH3/29d625e388b2.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "31e6cf",
          "Name": "Card",
          "Transform": {
            "rotX": 4.25808935e-08,
            "rotY": 270.0,
            "rotZ": -6.373006e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Doppelg�nger",
          "GMNotes": "{\"TtsZoopGuid\":\"fdfbd78d-b1de-4443-86a7-a6b01571b8b0\",\"type\":\"Enemy\",\"traits\":\"Humanoid. Criminal. Syndicate\",\"weakness\":true,\"id\":\"fdfbd78d-b1de-4443-86a7-a6b01571b8b0\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 100800,
          "CustomDeck": {
            "1008": {
              "FaceURL": "https://i.ibb.co/7JLMWnq/253ef4c31843.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "606a75",
          "Name": "Card",
          "Transform": {
            "rotX": -1.87660348e-07,
            "rotY": 269.9912,
            "rotZ": 4.358664e-09,
            "scaleX": 0.783099234,
            "scaleY": 1.0,
            "scaleZ": 0.783099234
          },
          "Nickname": "Miyu Yoshino",
          "Description": "The Tsukumogamist",
          "GMNotes": "{\"TtsZoopGuid\":\"c31f6d13-1e87-4e31-abe2-939329456fe2\",\"type\":\"Investigator\",\"class\":\"Mystic\",\"traits\":\"Sorcerer\",\"agilityIcons\":2,\"combatIcons\":3,\"intellectIcons\":4,\"willpowerIcons\":3,\"id\":\"c31f6d13-1e87-4e31-abe2-939329456fe2\"}",
          "Tags": [
            "Investigator",
            "PlayerCard"
          ],
          "CardID": 101300,
          "CustomDeck": {
            "1013": {
              "FaceURL": "https://i.ibb.co/8dDLQxD/5f0230693868.png",
              "BackURL": "https://i.ibb.co/5vqr77G/8c6f6fd4b163.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "756741",
          "Name": "Card",
          "Transform": {
            "rotX": 1.16942296e-07,
            "rotY": 270.0248,
            "rotZ": -3.856031e-07,
            "scaleX": 0.6,
            "scaleY": 1.0,
            "scaleZ": 0.6
          },
          "Nickname": "",
          "GMNotes": "{\"TtsZoopGuid\":\"03c38549-79ef-4daa-8931-a09f5c4a74a9\",\"type\":\"Minicard\",\"id\":\"b7962b11-db7f-4898-b088-a865afc7f7f4-m\"}",
          "Tags": [
            "PlayerCard",
            "ScenarioCard"
          ],
          "CardID": 100500,
          "CustomDeck": {
            "1005": {
              "FaceURL": "https://i.ibb.co/hcGPqdZ/cc731ca58ed0.png",
              "BackURL": "https://i.ibb.co/ZBx5zkk/72d96bf8e2bd.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "88a962",
          "Name": "Card",
          "Transform": {
            "rotX": -1.71594365e-07,
            "rotY": 269.9956,
            "rotZ": 2.06429078e-07,
            "scaleX": 0.6,
            "scaleY": 1.0,
            "scaleZ": 0.6
          },
          "Nickname": "",
          "GMNotes": "{\"TtsZoopGuid\":\"82ec8fe8-7564-448d-8cf5-3b724a80e66d\",\"type\":\"Minicard\",\"id\":\"74f6a647-2ede-4857-9ba3-610016c7d530-m\"}",
          "Tags": [
            "PlayerCard",
            "ScenarioCard"
          ],
          "CardID": 100200,
          "CustomDeck": {
            "1002": {
              "FaceURL": "https://i.ibb.co/HdBhZVX/cc50840231ad.png",
              "BackURL": "https://i.ibb.co/yB8j4C2/c6024df1b6ce.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "8ea192",
          "Name": "Deck",
          "Transform": {
            "rotX": -9.439126e-09,
            "rotY": 269.9912,
            "rotZ": -9.89501245e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "Hands": false,
          "DeckIDs": [
            101800,
            101800
          ],
          "CustomDeck": {
            "1018": {
              "FaceURL": "https://i.ibb.co/d5nZ2Tt/00205a0e503e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "e0001b",
              "Name": "Card",
              "Transform": {
                "rotX": -2.43744523e-07,
                "rotY": 270.0,
                "rotZ": 180.0,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Trap Rigging",
              "GMNotes": "{\"TtsZoopGuid\":\"5000c1b4-4c10-4c92-9845-6be9511b8abb\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent\",\"agilityIcons\":1,\"combatIcons\":1,\"wildIcons\":1,\"cost\":2,\"id\":\"5000c1b4-4c10-4c92-9845-6be9511b8abb\",\"permanent\":true,\"intellectIcons\":1}",
              "Tags": [
                "Asset",
                "PlayerCard"
              ],
              "CardID": 101800,
              "CustomDeck": {
                "1018": {
                  "FaceURL": "https://i.ibb.co/d5nZ2Tt/00205a0e503e.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "4c87ba",
              "Name": "Card",
              "Transform": {
                "rotX": -2.43744523e-07,
                "rotY": 270.0,
                "rotZ": 180.0,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Trap Rigging",
              "GMNotes": "{\"TtsZoopGuid\":\"5000c1b4-4c10-4c92-9845-6be9511b8abb\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Talent\",\"agilityIcons\":1,\"combatIcons\":1,\"wildIcons\":1,\"cost\":2,\"id\":\"5000c1b4-4c10-4c92-9845-6be9511b8abb\",\"permanent\":true,\"intellectIcons\":1}",
              "Tags": [
                "Asset",
                "PlayerCard"
              ],
              "CardID": 101800,
              "CustomDeck": {
                "1018": {
                  "FaceURL": "https://i.ibb.co/d5nZ2Tt/00205a0e503e.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "9eb5a0",
          "Name": "Card",
          "Transform": {
            "rotX": 2.525311e-07,
            "rotY": 269.9956,
            "rotZ": 8.58501039e-08,
            "scaleX": 0.6,
            "scaleY": 1.0,
            "scaleZ": 0.6
          },
          "Nickname": "",
          "GMNotes": "{\"TtsZoopGuid\":\"1202dcf5-8888-4262-8e97-e1ec3529adf5\",\"type\":\"Minicard\",\"id\":\"c31f6d13-1e87-4e31-abe2-939329456fe2-m\"}",
          "Tags": [
            "PlayerCard",
            "ScenarioCard"
          ],
          "CardID": 101400,
          "CustomDeck": {
            "1014": {
              "FaceURL": "https://i.ibb.co/RGnfrV9/70578b1e3d59.png",
              "BackURL": "https://i.ibb.co/WPKbY7j/c4a214377f0d.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b070d0",
          "Name": "Card",
          "Transform": {
            "rotX": -1.24871534e-07,
            "rotY": 270.0,
            "rotZ": -1.72930559e-09,
            "scaleX": 0.783099234,
            "scaleY": 1.0,
            "scaleZ": 0.783099234
          },
          "Nickname": "Clara Cartwright",
          "Description": "The Cartographer",
          "GMNotes": "{\"TtsZoopGuid\":\"74f6a647-2ede-4857-9ba3-610016c7d530\",\"type\":\"Investigator\",\"class\":\"Seeker\",\"traits\":\"Wayfarer. Dreamer\",\"agilityIcons\":2,\"combatIcons\":3,\"intellectIcons\":4,\"willpowerIcons\":3,\"id\":\"74f6a647-2ede-4857-9ba3-610016c7d530\"}",
          "Tags": [
            "Investigator",
            "PlayerCard"
          ],
          "CardID": 100100,
          "CustomDeck": {
            "1001": {
              "FaceURL": "https://i.ibb.co/H40DqLJ/a30004b51d8f.png",
              "BackURL": "https://i.ibb.co/2gjLtsh/770ab7aad712.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b11fa8",
          "Name": "Card",
          "Transform": {
            "rotX": -2.28425435e-07,
            "rotY": 270.0103,
            "rotZ": 2.48888171e-07,
            "scaleX": 0.6,
            "scaleY": 1.0,
            "scaleZ": 0.6
          },
          "Nickname": "",
          "GMNotes": "{\"TtsZoopGuid\":\"96b29eae-c77c-4490-8c2b-189df30c91af\",\"type\":\"Minicard\",\"id\":\"9a4cc2e7-cc2b-41c7-83c0-a1014172a0b7-m\"}",
          "Tags": [
            "PlayerCard",
            "ScenarioCard"
          ],
          "CardID": 101100,
          "CustomDeck": {
            "1011": {
              "FaceURL": "https://i.ibb.co/PQC1LJ1/ca92858be981.png",
              "BackURL": "https://i.ibb.co/cJcnmYN/784275af861b.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "b1e93b",
          "Name": "Card",
          "Transform": {
            "rotX": 1.787136e-08,
            "rotY": 270.0246,
            "rotZ": -4.36269914e-07,
            "scaleX": 0.6,
            "scaleY": 1.0,
            "scaleZ": 0.6
          },
          "Nickname": "",
          "GMNotes": "{\"TtsZoopGuid\":\"aa3a2c8d-e770-4ac5-904b-be64f485395c\",\"type\":\"Minicard\",\"id\":\"1e2a64c1-fc3a-48ae-93b7-2e18d239e9cf-m\"}",
          "Tags": [
            "PlayerCard",
            "ScenarioCard"
          ],
          "CardID": 101700,
          "CustomDeck": {
            "1017": {
              "FaceURL": "https://i.ibb.co/84MM1Bf/d02f70cd3fba.png",
              "BackURL": "https://i.ibb.co/YptMB45/5367da41332e.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "bbaf11",
          "Name": "Deck",
          "Transform": {
            "rotX": -8.112776e-08,
            "rotY": 269.9861,
            "rotZ": -2.389351e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Tags": [
            "PlayerCard"
          ],
          "Hands": false,
          "DeckIDs": [
            266500,
            266500,
            266500,
            100300
          ],
          "CustomDeck": {
            "2665": {
              "FaceURL": "https://i.ibb.co/R2ymwqB/94f7d3af6940.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            },
            "1003": {
              "FaceURL": "https://i.ibb.co/6R89B07/bed387c9c9de.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "ContainedObjects": [
            {
              "GUID": "e00005",
              "Name": "Card",
              "Transform": {
                "rotX": 0.000186513746,
                "rotY": 270.0,
                "rotZ": -0.00122067612,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Dreamspike",
              "GMNotes": "{\"TtsZoopGuid\":\"8fbcacc0-97d0-45da-8207-1ee07d44d785\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Item. Relic\",\"id\":\"8fbcacc0-97d0-45da-8207-1ee07d44d785\"}",
              "Tags": [
                "PlayerCard"
              ],
              "CardID": 266500,
              "CustomDeck": {
                "1004": {
                  "FaceURL": "https://i.ibb.co/R2ymwqB/94f7d3af6940.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "5e5f14",
              "Name": "Card",
              "Transform": {
                "rotX": 0.00214340677,
                "rotY": 270.0,
                "rotZ": 359.9934,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Dreamspike",
              "GMNotes": "{\"TtsZoopGuid\":\"8fbcacc0-97d0-45da-8207-1ee07d44d785\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Item. Relic\",\"id\":\"8fbcacc0-97d0-45da-8207-1ee07d44d785\"}",
              "Tags": [
                "PlayerCard"
              ],
              "CardID": 266500,
              "CustomDeck": {
                "1004": {
                  "FaceURL": "https://i.ibb.co/R2ymwqB/94f7d3af6940.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "561a93",
              "Name": "Card",
              "Transform": {
                "rotX": 0.0002159512,
                "rotY": 270.0,
                "rotZ": -0.0008301639,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Dreamspike",
              "GMNotes": "{\"TtsZoopGuid\":\"8fbcacc0-97d0-45da-8207-1ee07d44d785\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Item. Relic\",\"id\":\"8fbcacc0-97d0-45da-8207-1ee07d44d785\"}",
              "Tags": [
                "PlayerCard"
              ],
              "CardID": 266500,
              "CustomDeck": {
                "1004": {
                  "FaceURL": "https://i.ibb.co/R2ymwqB/94f7d3af6940.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            },
            {
              "GUID": "e00004",
              "Name": "Card",
              "Transform": {
                "rotX": -3.53790274e-05,
                "rotY": 269.9861,
                "rotZ": -0.00048541202,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Fantastical Voyage",
              "GMNotes": "{\"TtsZoopGuid\":\"082bbff6-c85c-4700-9d33-96b488290ccf\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Spirit\",\"agilityIcons\":1,\"intellectIcons\":1,\"wildIcons\":1,\"cost\":2,\"id\":\"082bbff6-c85c-4700-9d33-96b488290ccf\"}",
              "Tags": [
                "PlayerCard"
              ],
              "CardID": 100300,
              "CustomDeck": {
                "1003": {
                  "FaceURL": "https://i.ibb.co/6R89B07/bed387c9c9de.png",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
                  "NumWidth": 1,
                  "NumHeight": 1,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              }
            }
          ]
        },
        {
          "GUID": "d0ed57",
          "Name": "Card",
          "Transform": {
            "rotX": -7.6479914e-08,
            "rotY": 269.9912,
            "rotZ": -1.99091978e-08,
            "scaleX": 0.783099234,
            "scaleY": 1.0,
            "scaleZ": 0.783099234
          },
          "Nickname": "Makya",
          "Description": "The Trapper",
          "GMNotes": "{\"TtsZoopGuid\":\"1e2a64c1-fc3a-48ae-93b7-2e18d239e9cf\",\"type\":\"Investigator\",\"class\":\"Survivor\",\"traits\":\"Hunter\",\"agilityIcons\":4,\"combatIcons\":3,\"intellectIcons\":3,\"willpowerIcons\":2,\"id\":\"1e2a64c1-fc3a-48ae-93b7-2e18d239e9cf\"}",
          "Tags": [
            "Investigator",
            "PlayerCard"
          ],
          "CardID": 101900,
          "CustomDeck": {
            "1019": {
              "FaceURL": "https://i.ibb.co/Lnq516b/9600d5f72df4.png",
              "BackURL": "https://i.ibb.co/PQXZ2bk/7dce944f32ee.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "d8f0f8",
          "Name": "Card",
          "Transform": {
            "rotX": 4.25808935e-08,
            "rotY": 270.0,
            "rotZ": -6.373006e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Plateau of Leng",
          "GMNotes": "{\"TtsZoopGuid\":\"58c68a41-f82d-45b7-81a4-d2ae5704ad6a\",\"type\":\"Location\",\"class\":\"Mythos\",\"traits\":\"Leng\",\"locationFront\":{\"uses\":[{\"count\":0,\"token\":\"clue\",\"type\":\"Clue\"}]},\"locationBack\":{},\"id\":\"58c68a41-f82d-45b7-81a4-d2ae5704ad6a\"}",
          "Tags": [
            "Location",
            "ScenarioCard"
          ],
          "CardID": 100000,
          "CustomDeck": {
            "1000": {
              "FaceURL": "https://i.ibb.co/HPpF41R/e2c3667c0d17.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000a",
          "Name": "Card",
          "Transform": {
            "rotX": 1.44064831e-08,
            "rotY": 269.9867,
            "rotZ": -1.51320112e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Counterfeit",
          "GMNotes": "{\"TtsZoopGuid\":\"977d33ed-c92b-4468-afe6-ecec39f4f4ac\",\"type\":\"Asset\",\"uses\":[{\"count\":2,\"token\":\"resource\",\"type\":\"Forgeries\"}],\"class\":\"Neutral\",\"traits\":\"Talent. Illicit\",\"agilityIcons\":1,\"intellectIcons\":1,\"wildIcons\":1,\"cost\":0,\"id\":\"977d33ed-c92b-4468-afe6-ecec39f4f4ac\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 100700,
          "CustomDeck": {
            "1007": {
              "FaceURL": "https://i.ibb.co/0ZTqQNN/f44fea025015.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0000e",
          "Name": "Card",
          "Transform": {
            "rotX": -5.18949435e-08,
            "rotY": 270.000061,
            "rotZ": -1.181313e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Unshakable Faith",
          "GMNotes": "{\"TtsZoopGuid\":\"b042d356-b55e-4de6-b808-71e3196d4cab\",\"type\":\"Event\",\"class\":\"Neutral\",\"traits\":\"Spirit. Blessed\",\"willpowerIcons\":3,\"wildIcons\":1,\"cost\":0,\"id\":\"b042d356-b55e-4de6-b808-71e3196d4cab\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 100900,
          "CustomDeck": {
            "1009": {
              "FaceURL": "https://i.ibb.co/37SJV1x/d2be251fd4f4.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00011",
          "Name": "Card",
          "Transform": {
            "rotX": 4.25808935e-08,
            "rotY": 270.0,
            "rotZ": -6.373006e-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "The Downtrodden",
          "GMNotes": "{\"TtsZoopGuid\":\"268e450a-0038-4df5-a7e2-5b445ba7247e\",\"type\":\"Asset\",\"traits\":\"Ally. Believer\",\"weakness\":true,\"id\":\"268e450a-0038-4df5-a7e2-5b445ba7247e\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 101200,
          "CustomDeck": {
            "1012": {
              "FaceURL": "https://i.ibb.co/185yM2Y/05c084c93b8e.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00016",
          "Name": "Card",
          "Transform": {
            "rotX": -2.93578779e-08,
            "rotY": 269.9883,
            "rotZ": -1.113925e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Karakasa Obake",
          "GMNotes": "{\"TtsZoopGuid\":\"67ad5402-70e5-4e5a-9048-331b3f64cc66\",\"type\":\"Enemy\",\"traits\":\"Monster. Item. Cursed\",\"weakness\":true,\"id\":\"67ad5402-70e5-4e5a-9048-331b3f64cc66\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 101500,
          "CustomDeck": {
            "1015": {
              "FaceURL": "https://i.ibb.co/ng6CPdJ/fd588bd9960b.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e00017",
          "Name": "Card",
          "Transform": {
            "rotX": 3.088255e-09,
            "rotY": 269.9917,
            "rotZ": 2.3113931e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Tsukumogami",
          "GMNotes": "{\"TtsZoopGuid\":\"df03eb57-9b66-449a-b547-e00e1ed9d49f\",\"type\":\"Asset\",\"class\":\"Neutral\",\"traits\":\"Ally. Geist\",\"intellectIcons\":1,\"willpowerIcons\":1,\"wildIcons\":1,\"cost\":2,\"id\":\"df03eb57-9b66-449a-b547-e00e1ed9d49f\"}",
          "Tags": [
            "Asset",
            "PlayerCard"
          ],
          "CardID": 101600,
          "CustomDeck": {
            "1016": {
              "FaceURL": "https://i.ibb.co/8xwTg56/ab614fe75b91.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e0001d",
          "Name": "Card",
          "Transform": {
            "rotX": 8.525221e-08,
            "rotY": 269.9911,
            "rotZ": 1.60211485e-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Wendigo",
          "GMNotes": "{\"TtsZoopGuid\":\"02d79387-e6d9-407d-a53c-21f4ed2f9202\",\"type\":\"Enemy\",\"traits\":\"Monster\",\"weakness\":true,\"id\":\"02d79387-e6d9-407d-a53c-21f4ed2f9202\"}",
          "Tags": [
            "PlayerCard"
          ],
          "CardID": 102000,
          "CustomDeck": {
            "1020": {
              "FaceURL": "https://i.ibb.co/dBmVgkM/e1869529b812.png",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/2342503777940352139/A2D42E7E5C43D045D72CE5CFC907E4F886C8C690/",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          }
        },
        {
          "GUID": "e3ab45",
          "Name": "Card",
          "Transform": {
            "rotX": -1.06485992e-07,
            "rotY": 270.0,
            "rotZ": -1.45988848e-08,
            "scaleX": 0.783099234,
            "scaleY": 1.0,
            "scaleZ": 0.783099234
          },
          "Nickname": "Bellatrix Ricci",
          "Description": "The Counterfeiter",
          "GMNotes": "{\"TtsZoopGuid\":\"b7962b11-db7f-4898-b088-a865afc7f7f4\",\"type\":\"Investigator\",\"class\":\"Rogue\",\"traits\":\"Criminal. Syndicate\",\"agilityIcons\":4,\"combatIcons\":3,\"intellectIcons\":4,\"willpowerIcons\":1,\"id\":\"b7962b11-db7f-4898-b088-a865afc7f7f4\"}",
          "Tags": [
            "Investigator",
            "PlayerCard"
          ],
          "CardID": 100600,
          "CustomDeck": {
            "1006": {
              "FaceURL": "https://i.ibb.co/cFWX2sb/a6f83d9a94f5.png",
              "BackURL": "https://i.ibb.co/HKWLLpg/8b427c1290dc.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          }
        }
      ]
    }
  ],
  "AttachedDecals": [
    {
      "Transform": {
        "posX": 0,
        "posY": -0.1,
        "posZ": 0,
        "rotX": 270,
        "rotY": 0,
        "rotZ": 0,
        "scaleX": 2,
        "scaleY": 2,
        "scaleZ": 2
      },
      "CustomDecal": {
        "Name": "dunwich_back",
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/",
        "Size": 7.4
      }
    }
  ]
}
