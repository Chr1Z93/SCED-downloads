--[[ Library file for Difficulty Selectors
- define the "tokenData" table and then require this file
- list of valid ids: 'p1', '0', 'm1' - 'm8', 'skull', 'cultist', 'tablet', 'elder', 'red', 'blue', 'bless', 'curse', 'frost'

Example:
tokenData = {
  Easy = { token = { 'p1', 'p1', '0', '0', '0', 'm1', 'm1', 'm1', 'm2', 'm2', 'skull', 'skull', 'cultist', 'tablet', 'red', 'blue' } },
  Standard = { token = { 'p1', '0', '0', 'm1', 'm1', 'm1', 'm2', 'm2', 'm3', 'm4', 'skull', 'skull', 'cultist', 'tablet', 'red', 'blue' } }
}
require ...
]]

function onLoad()
  local z_offset = -0.15
  for difficulty, _ in pairs(tokenData) do
    local clickFunction = difficulty:lower() .. "Click"
    self.setVar(clickFunction, function() clickFun(difficulty) end)
    self.createButton({
      label          = difficulty,
      function_owner = self,
      click_function = clickFunction,
      position       = { 0, 0.1, z_offset },
      scale          = { 0.47, 1, 0.47 },
      height         = 200,
      width          = 1150,
      color          = { 0.87, 0.8, 0.70 },
    })
    z_offset = z_offset + 0.225
  end
end

function clickFun(difficulty)
  local data = tokenData[difficulty]
  if data.random then
    -- handling for Carcosa standalone mode
    local randomGroup = math.random(1, #data.random)
    for _, tokenId in ipairs(data.random[randomGroup]) do
      table.insert(data.token, tokenId)
    end
  end
  Global.call("setChaosBagState", data.token)
end
