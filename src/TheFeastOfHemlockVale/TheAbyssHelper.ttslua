local deckLib              = require("util/DeckLib")
local guidReferenceApi     = require("core/GUIDReferenceApi")
local MythosAreaApi        = require("mythos/MythosAreaApi")
local playAreaApi          = require("playarea/PlayAreaApi")
local playermatApi         = require("playermat/PlayermatApi")
local searchLib            = require("util/SearchLib")

local colliding            = false
local helpVisibleToPlayers = {}
local setupVisible         = true

---------------------------------------------------------
-- MARK: TTS Events
---------------------------------------------------------

function onLoad()
  self.max_typed_number = 99
end

--- ### TTS Event to trigger object movement
function onCollisionEnter(collisionInfo)
  -- flag to catch multiple calls
  if colliding then return end
  colliding = true
  Wait.time(function() colliding = false end, 0.1)

  local obj = collisionInfo.collision_object

  -- exit early if nothing found or not a card/deck
  if obj.type ~= "Card" and obj.type ~= "Deck" then return end

  -- check if colliding obj is above
  if obj.getPosition().y < self.getPosition().y then return end

  -- make sure cards are face-up
  obj.setRotation(self.getRotation():setAt("z", 0))

  -- place objects into deck
  local bag = getBag("abyss")
  if not bag then return end

  -- make sure they get added to the top
  obj.setPosition(bag.getPosition() + Vector(0, 1, 0))
  if obj.type == "Card" then
    bag.putObject(obj)
  else
    obj.shuffle()
    for i = 1, #obj.getObjects() do
      bag.putObject(obj.takeObject())
    end
  end
end

--- ### TTS Event typed number for drawing
function onNumberTyped(playerColor, number)
  if number > 0 then
    drawFromAbyss(Player[playerColor], number)
  end
end

---------------------------------------------------------
-- MARK: XML click functions
---------------------------------------------------------

--- ### draws a card to the playmat of the requesting player
function drawFromAbyss(player, number)
  local bag = getBag("abyss")
  if not bag then return end

  local bagCount = #bag.getObjects()
  if bagCount == 0 then
    printToColor("The Abyss deck is empty!", player.color)
    return
  end

  local matColor = playermatApi.getMatColor(player.color)
  local pos = playermatApi.getEncounterCardDrawPosition(matColor, false)
  local rot = playermatApi.returnRotation(matColor)

  for i = 1, math.min(number, bagCount) do
    deckLib.placeOrMergeIntoDeck(bag.takeObject({ index = 0 }), Vector(pos), rot)
  end
end

--- ### merges setup bags into abyss deck
--- - moves any investigator cards into top bag first
--- - makes sure there are enough investigator cards before merging
function finalizeAbyss()
  local bag = getBag("abyss")
  local topBag = getBag("top")
  local bottomBag = getBag("bottom")
  if bag == nil or topBag == nil or bottomBag == nil then
    broadcastToAll("AbyssHelper Setup Error: Can't find setup bags.", "Red")
    return
  end

  -- check Abyss deck for investigators
  local investigatorIndexes = {} -- keep track of investigator cards to move to top bag
  for _, obj in pairs(bag.getObjects()) do
    if isInvestigator(obj) then
      table.insert(investigatorIndexes, obj.index)
    end
  end

  -- move any investigator cards to top bag
  if #investigatorIndexes > 0 then
    -- pull from end to keep index order correct
    table.sort(investigatorIndexes, function(a, b) return a > b end)
    for _, idx in pairs(investigatorIndexes) do
      topBag.putObject(bag.takeObject({ index = idx, smooth = false }))
    end
  end

  -- get count of investigators
  local investigatorCardCount = 0
  for _, obj in pairs(topBag.getObjects()) do
    if isInvestigator(obj) then investigatorCardCount = investigatorCardCount + 1 end
  end

  -- make sure there is one investigator / player
  if investigatorCardCount ~= playAreaApi.getInvestigatorCount() then
    local msg = investigatorCardCount .. "/" .. playAreaApi.getInvestigatorCount() .. " Investigators currently in bag."
    broadcastToAll("Add each player's Investigator card to Top Setup before proceeding.\n" .. msg, "Yellow")
    return
  end

  -- shuffle bottom bag and place in Abyss deck
  bottomBag.shuffle()
  for i = 1, #bottomBag.getObjects() do
    bag.putObject(bottomBag.takeObject({ smooth = false }))
  end

  -- shuffle top bag and place in Abyss deck
  -- (investigator cards will be in top half of deck)
  topBag.shuffle()
  for i = 1, #topBag.getObjects() do
    bag.putObject(topBag.takeObject({ smooth = false }))
  end

  -- update UI
  setupToggleSetup()
end

--- ### split abyss deck in two halves & place in setup bags
--- - moves any investigator/player cards into appropriate bag first
--- - makes sure there are enough player cards before splitting
function splitAbyss()
  local bag = getBag("abyss")
  local bottomBag = getBag("bottom")
  local topBag = getBag("top")
  if bag == nil or topBag == nil or bottomBag == nil then
    broadcastToAll("AbyssHelper Setup Error: Can't find setup bags.", "Red")
    return
  end

  -- check Abyss deck for player cards and investigators
  local investigatorIndexes = {} -- keep track of investigator cards to move
  local playerCardCount = 0
  for _, objectData in pairs(bag.getObjects()) do
    if isInvestigator(objectData) then
      table.insert(investigatorIndexes, objectData.index)
    elseif isPlayerCard(objectData) then
      playerCardCount = playerCardCount + 1
    end
  end

  -- move any investigator cards to top bag
  if #investigatorIndexes > 0 then
    -- pull from end to keep index order correct
    table.sort(investigatorIndexes, function(a, b) return a > b end)
    for _, idx in pairs(investigatorIndexes) do
      topBag.putObject(bag.takeObject({ index = idx, smooth = false }))
    end
  end

  -- check top bag for player cards
  local playerCardIndexes = {} -- keep track of investigator cards to move
  for _, objectData in pairs(topBag.getObjects()) do
    if not isInvestigator(objectData) and isPlayerCard(objectData) then
      playerCardCount = playerCardCount + 1
      table.insert(playerCardIndexes, objectData.index)
    end
  end

  -- move any player cards to Abyss bag
  if #playerCardIndexes > 0 then
    -- pull from end to keep index order correct
    table.sort(playerCardIndexes, function(a, b) return a > b end)
    for _, idx in pairs(playerCardIndexes) do
      bag.putObject(topBag.takeObject({ index = idx, smooth = false }))
    end
  end

  -- make sure 5 cards/player and exit if not
  if playerCardCount ~= (playAreaApi.getInvestigatorCount() * 5) then
    local msg = playerCardCount .. "/" .. (playAreaApi.getInvestigatorCount() * 5) .. " cards currently in bag."
    broadcastToAll("Add 5 cards/player to the Abyss before proceeding.\n" .. msg, "Yellow")
    return
  end

  -- shuffle before splitting
  bag.shuffle()

  -- counts for splitting
  local bagCount = #bag.getObjects()
  local half = math.floor(bagCount / 2)

  -- move cards to appropriate bag
  bottomBag.call("setReadOnly", false)
  for i = 1, bagCount do
    if i <= half then
      bottomBag.putObject(bag.takeObject({ smooth = false }))
    else
      topBag.putObject(bag.takeObject({ smooth = false }))
    end
  end
  bottomBag.call("setReadOnly", true)

  -- update UI
  self.UI.setAttribute("splitRow", "active", false)
  self.UI.setAttribute("finalizeRow", "active", true)
  setupEnableNavigation()
end

--- ### adds a tag to all cards of each player
function tagPlayerCards()
  local count = 0
  for matColor, _ in pairs(guidReferenceApi.getObjectsByType("Playermat")) do
    -- collection of objects to tag
    local objsToTag = {}

    -- collect player hand
    for _, obj in pairs(Player[matColor].getHandObjects()) do
      table.insert(objsToTag, obj)
    end

    -- collect player mat area
    for _, obj in ipairs(playermatApi.searchAroundPlayermat(matColor)) do
      table.insert(objsToTag, obj)
    end

    -- tag collected objects
    for _, obj in pairs(objsToTag) do
      local tagString = "_" .. matColor
      if obj.type == "Card" then
        obj.addTag(tagString)
        count = count + 1
      elseif obj.type == "Deck" or obj.type == "Bag" then
        local data = obj.getData()
        for _, cardData in ipairs(data.ContainedObjects or {}) do
          cardData.Tags = cardData.Tags or {}
          table.insert(cardData.Tags, tagString)
          count = count + 1
        end
        obj.destruct()
        spawnObjectData({ data = data })
      end
    end
  end

  if count > 0 then
    printToAll("Tagged " .. count .. " cards with playermat color!", "Green")
  else
    printToAll("No cards found to tag!", "Orange")
  end

  -- update setup section
  self.UI.setAttribute("tagRow", "active", false)
  self.UI.setAttribute("splitRow", "active", true)
  setupEnableNavigation()
end

-- ### toggles the help text for the player that clicks it
function toggleHelp(player)
  if helpVisibleToPlayers[player.color] then
    helpVisibleToPlayers[player.color] = nil
  else
    helpVisibleToPlayers[player.color] = true
  end
  updateHelpVisibility()
end

---------------------------------------------------------
-- MARK: helper functions
---------------------------------------------------------

-- aliases for vscode code completion
---@alias bagTypes
---| '"abyss"'  # The Abyss deck
---| '"top"'    # Setup Top bag
---| '"bottom"' # Setup Bottom bag
local bagTypesPretty = {
  abyss  = "The Abyss Deck",
  top    = "Abyss Setup Top Bag",
  bottom = "Abyss Setup Bottom Bag"
}

--- ### called from the onNumberTyped of the Abyss Bag
function drawFromAbyssWrapper(params)
  drawFromAbyss(Player[params.playerColor], params.number)
end

---### get abyss deck or top/bottom setup bag
---@param bagType bagTypes
---@return tts__Object
function getBag(bagType)
  --set search offset
  local offset = { x = -1, y = 0, z = 3 } --Setup Top bag
  if bagType == "bottom" then offset.z = 4.12 end
  if bagType == "abyss" then offset = { x = 1, y = 0, z = 0 } end

  local bag
  for _, obj in ipairs(searchLib.atPosition(self.positionToWorld(offset))) do
    if obj.type == "Bag" then
      return obj
    end
  end

  -- didn't find one there, so try the Set-aside chest
  -- getBagFromSetAside will print error
  return getBagFromSetAside(bagType)
end

---### get bag out of set-aside chest
---@param bagType bagTypes # *!!! only works for setup bags !!!*
---@return tts__Object
function getBagFromSetAside(bagType)
  local setAside = getSetAside()
  if setAside == nil then return nil end

  -- position/rotation for after pulling from set-aside bag
  local rot = { x = 0, y = 270, z = 0 }
  local pos = { x = -17.21556, y = 1.59125, z = 10.29001 } -- Setup Top Bag
  if bagType == "bottom" then pos.x = pos.x - 2.2125 end

  local bag
  for _, obj in ipairs(setAside.getObjects()) do
    if obj.name == bagTypesPretty[bagType] then
      bag = setAside.takeObject({
        guid = obj.guid,
        position = pos,
        rotation = rot,
        smooth = false
      })
    end
  end

  if bag ~= nil then
    return bag
  else
    printToAll("Couldn't find " .. bagTypesPretty[bagType] .. "!", "Orange")
    return nil
  end
end

---### get Set-aside chest (bag)
function getSetAside()
  local chest = MythosAreaApi.getSetAsideChest()

  if chest then return chest end

  -- can't continue if we don't have a set-aside bag
  broadcastToAll("AbyssHelper Setup Error: Can't find Set-aside chest.", "Red")
  return nil
end

--- ### use tags to check if card is an Investigator
function isInvestigator(objectData)
  if objectData.tags ~= nil then
    for _, tag in pairs(objectData.tags) do
      if tag == "Investigator" then return true end
    end
  end
  return false
end

--- ### use tags to check if card is a Player Card
function isPlayerCard(objectData)
  if objectData.tags ~= nil then
    for _, tag in pairs(objectData.tags) do
      if tag == "PlayerCard" then return true end
    end
  end
  return false
end

--- ### updates the visibility of the help text
function updateHelpVisibility()
  local visibility = ""
  for playerColor, _ in pairs(helpVisibleToPlayers) do
    if string.len(visibility) > 0 then
      visibility = visibility .. "|" .. playerColor
    else
      visibility = playerColor
    end
  end
  self.UI.setAttribute("helpText", "visibility", visibility)
  self.UI.setAttribute("helpPanel", "visibility", visibility)
  self.UI.setAttribute("helpPanel", "active", string.len(visibility) > 0)
end

---------------------------------------------------------
-- MARK: setup UI helpers
---------------------------------------------------------

--- ### Setup UI: enable previous and next buttons
function setupEnableNavigation()
  Wait.frames(function()
    local back = true
    if self.UI.getAttribute("tagRow", "active") == "True" then back = false end
    self.UI.setAttribute("backButton", "active", back)

    local forward = true
    if self.UI.getAttribute("finalizeRow", "active") == "True" then forward = false end
    self.UI.setAttribute("forwardButton", "active", forward)

    setupUpdateExplanation()
  end, 1)
end

--- ### Setup UI: next step
function setupNextStep()
  if self.UI.getAttribute("tagRow", "active") == "True" then
    self.UI.setAttribute("tagRow", "active", false)
    self.UI.setAttribute("splitRow", "active", true)
  elseif self.UI.getAttribute("splitRow", "active") == "True" then
    self.UI.setAttribute("splitRow", "active", false)
    self.UI.setAttribute("finalizeRow", "active", true)
  end

  setupEnableNavigation()
end

--- ### Setup UI: previous step
function setupPreviousStep()
  if self.UI.getAttribute("splitRow", "active") == "True" then
    self.UI.setAttribute("splitRow", "active", false)
    self.UI.setAttribute("tagRow", "active", true)
  elseif self.UI.getAttribute("finalizeRow", "active") == "True" then
    self.UI.setAttribute("finalizeRow", "active", false)
    self.UI.setAttribute("splitRow", "active", true)
  end

  setupEnableNavigation()
end

--- ### Setup UI: toggle visibility
function setupToggleSetup()
  -- toggle visibility of setup panel
  setupVisible = not setupVisible
  self.UI.setAttribute("setupPanel", "active", setupVisible)

  -- get references to the setup bags
  -- if the bags are in the Set-aside chest,
  -- getBagFromSetAside() will automatically place them
  local topBag = getBag("top")
  local bottomBag = getBag("bottom")

  -- update button text
  if setupVisible then
    self.UI.setAttribute("showAbyssSetupButton", "text", "Hide Abyss Setup")
  else
    self.UI.setAttribute("showAbyssSetupButton", "text", "Show Abyss Setup")
    local setAside = getSetAside()
    if setAside ~= nil then
      setAside.putObject(topBag)
      setAside.putObject(bottomBag)
    end
  end
end

--- ### Setup UI: update explanation text
function setupUpdateExplanation()
  local explanationText = ""

  if self.UI.getAttribute("tagRow", "active") == "True" then
    explanationText = "Make sure all player decks are loaded, then click to tag all player cards with \n< AbyssMat<i>Color</i> >."
  elseif self.UI.getAttribute("splitRow", "active") == "True" then
    explanationText = "Add 5 cards from the deck of each player to the Abyss.\n\nThen click to shuffle Abyss & split into two halves."
  elseif self.UI.getAttribute("finalizeRow", "active") == "True" then
    explanationText = "Place player/Investigator cards in top bag.\n\nClick to shuffle top & place both halves back in Abyss."
  end

  self.UI.setValue("explanation", explanationText)
end
