local deckLib          = require("util/DeckLib")
local guidReferenceApi = require("core/GUIDReferenceApi")
local playermatApi     = require("playermat/PlayermatApi")
local searchLib        = require("util/SearchLib")
require("playercards/PlayerCardSpawner")

local CAST_POS             = {
  DRAW    = { x = 1.05, y = 0.05, z = 0.16 },
  DISCARD = { x = -1.05, y = 0.05, z = 0.16 }
}

local colliding            = false
local helpVisibleToPlayers = {}

---------------------------------------------------------
-- main functionality
---------------------------------------------------------

-- adding context menu entries
function onLoad()

end

-- TTS Event to trigger object movement
function onCollisionEnter(collisionInfo)
  -- flag to catch multiple calls
  if colliding then return end
  colliding = true
  Wait.time(function() colliding = false end, 0.1)

  -- check if colliding obj is above
  local pos = collisionInfo.collision_object.getPosition()
  local selfPos = self.getPosition()
  if pos.y < selfPos.y then return end

  returnObject()
end

-- moves an object to the bottom of the Abyss Deck if it is a card
function returnObject(obj)
  -- use provided object or get object from snap point
  local discard = obj or checkSnapPoint("DISCARD", "Card", "Deck")

  -- exit early if nothing found or not a card/deck
  if discard == nil or (discard.type ~= "Card" and discard.type ~= "Deck") then return end

  -- make sure cards are face-up
  discard.setRotation(self.getRotation():setAt("z", 0))

  -- place objects into deck
  discard.setPosition(self.positionToWorld(CAST_POS.DRAW))
end

---------------------------------------------------------
-- XML click functions
---------------------------------------------------------

-- draws a card to the playmat of the requesting player
function drawFromAbyss(player)
  local bag = getAbyssBag()
  if not bag or #bag.getObjects() == 0 then return end

  local matColor = playermatApi.getMatColor(player.color)
  local pos = playermatApi.getEncounterCardDrawPosition(matColor, false)
  local rot = playermatApi.returnRotation(matColor)

  deckLib.placeOrMergeIntoDeck(bag.takeObject(), Vector(pos), rot)
end

-- adds a tag to all cards of each player
function tagPlayerCards()
  log("Tagging player cards")
  for matColor, mat in pairs(guidReferenceApi.getObjectsByType("PlayerMat")) do
    log("Tagging player cards for " .. matColor)
    for _, obj in ipairs(playermatApi.searchAroundPlayermat(matColor, "isCardOrDeck")) do
      log("Tagging object " .. obj.getGUID())
      if obj.type == "Card" then
        obj.addTag("Mat" .. matColor)
      else
        for _, cardData in ipairs(obj.getData().ContainedObjects) do
          cardData.Tags = cardData.Tags or {}
          table.insert(cardData.Tags, "Mat" .. matColor)
        end
      end
    end
  end
end

-- toggles the help text for the player that clicks it
function toggleHelp(player)
  if helpVisibleToPlayers[player.color] then
    helpVisibleToPlayers[player.color] = nil
  else
    helpVisibleToPlayers[player.color] = true
  end
  updateHelpVisibility()
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

-- returns a reference to the tekeli-li deck
function getAbyssBag()
  local bag = checkSnapPoint("DRAW", "Bag")
  if not bag then
    printToAll("Couldn't find Abyss deck!", "Orange")
  else
    return bag
  end
end

-- returns the first object found, type can be "deck" or "discard"
function checkSnapPoint(type, objType1, objType2)
  for _, obj in ipairs(searchLib.atPosition(self.positionToWorld(CAST_POS[type]))) do
    if obj.type == objType1 or obj.type == objType2 then
      return obj
    end
  end
  return nil
end

-- updates the visibility of the help text
function updateHelpVisibility()
  local visibility = ""
  for playerColor, _ in pairs(helpVisibleToPlayers) do
    if string.len(visibility) > 0 then
      visibility = visibility .. "|" .. playerColor
    else
      visibility = playerColor
    end
  end
  self.UI.setAttribute("helpText", "visibility", visibility)
  self.UI.setAttribute("helpPanel", "visibility", visibility)
  self.UI.setAttribute("helpPanel", "active", string.len(visibility) > 0)
end
