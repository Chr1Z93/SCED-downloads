local MythosAreaApi        = require("mythos/MythosAreaApi")
local playAreaApi          = require("playarea/PlayAreaApi")
local tokenSpawnTrackerApi = require("tokens/TokenSpawnTrackerApi")

FLOOD_BAG_GUID = "fe6f38"
FLOOD_OFFSET = Vector(2, 0.2, -0.6)
TT_DECK_GUID = "3d5b6e"
TT_POSITIONS = {
  { -17.12, 1.6, 7.57 },
  { -17.12, 1.6, -7.70 },
  { -23.68, 1.6, 7.57 },
  { -23.68, 1.6, -7.70 },
  { -30.22, 1.6, 7.57 },
  { -30.22, 1.6, -0.03 },
  { -30.22, 1.6, -7.70 }
}
GATEWAY_GUID = "e0573a"
-- play area positions
YP = {
  gateway = { -23.67, 1.525, -0.02 },
  A1 = { -30.22, 1.53, 15.19 },
  B1 = { -30.22, 1.53, 11.46 },
  C1 = { -30.22, 1.53, 7.57 },
  D1 = { -30.22, 1.53, 3.86 },
  E1 = { -30.22, 1.53, 0 },
  F1 = { -30.22, 1.53, -3.83 },
  G1 = { -30.22, 1.53, -7.70 },
  H1 = { -30.22, 1.53, -11.51 },
  I1 = { -30.22, 1.53, -15.28 },
  A2 = { -36.77, 1.53, 15.19 },
  C2 = { -36.77, 1.53, 7.57 },
  D2 = { -36.77, 1.53, 3.86 },
  E2 = { -36.77, 1.53, 0 },
  F2 = { -36.77, 1.53, -3.83 },
  G2 = { -36.77, 1.53, -7.70 },
  I2 = { -36.77, 1.53, -15.28 },
  C3 = { -43.37, 1.53, 7.57 },
  D3 = { -43.37, 1.53, 3.86 },
  E3 = { -43.37, 1.53, 0 },
  F3 = { -43.37, 1.53, -3.83 },
  G3 = { -43.37, 1.53, -7.70 }
}
DAGON_GUID = "819894"
HYDRA_GUID = "ee2f20"
SANCTUM_DECK_GUID = "e6b7fd"
YHANTHLEI_DECK_GUID = "94c00b"
ROTATION = { 0, 270, 0 }

function onLoad()
  self.createButton({
    label = "Set Up",
    click_function = "setup",
    function_owner = self,
    position = { 0, 0.1, 0 },
    height = 120,
    width = 400,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
end

function setup()
  if DISABLED then return end
  DISABLED = true

  tokenSpawnTrackerApi.resetAllLocations()

  local deck = getObjectFromGUID(TT_DECK_GUID)
  deck.shuffle()
  local cards = deck.getObjects()
  for i = #cards - 1, 1, -1 do
    deck.takeObject({
      index    = i,
      position = TT_POSITIONS[i],
      smooth   = false
    })
  end

  self.editButton({
    label = "Act 2\nSet Up ",
    click_function = "setup_2",
    function_owner = self,
    position = { 0, 0.1, 0 },
    height = 240,
    width = 400,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
end

function setup_2(_, color, alt_click)
  if DISABLED_2 then return end
  if not alt_click and not WARNED then
    broadcastToColor("Clean up first (see Act 1b), then click the Act 2 " ..
      "Set Up button again. Right-click this button in the future to " ..
      "skip this message.", color)
    WARNED = true
    return
  end
  DISABLED_2 = true

  local numPlayers = playAreaApi.getInvestigatorCount()
  local dagonPosition, hydraPosition
  local lines = {}

  if numPlayers == 4 then
    dagonPosition = "F3"
    hydraPosition = "D3"
    sanctumPositions = { "B1", "H1", "C2", "G2" }
    yhanthleiPositions = { "C1", "D1", "E1", "F1", "G1", "E2", "E3" }
    drawConnection("B1", "H1", lines)
    drawConnection("gateway", "E3", lines)
    drawConnection("D3", "F3", lines)
    drawConnection("C1", "C2", lines)
    drawConnection("G1", "G2", lines)
  elseif numPlayers == 3 then
    dagonPosition = "F2"
    hydraPosition = "D2"
    sanctumPositions = { "B1", "H1", "C2", "G2" }
    yhanthleiPositions = { "C1", "D1", "E1", "F1", "G1", "E2" }
    drawConnection("B1", "H1", lines)
    drawConnection("gateway", "E2", lines)
    drawConnection("C2", "G2", lines)
    drawConnection("C1", "C2", lines)
    drawConnection("D1", "D2", lines)
    drawConnection("F1", "F2", lines)
    drawConnection("G1", "G2", lines)
  elseif numPlayers == 2 then
    dagonPosition = "G3"
    hydraPosition = "C3"
    sanctumPositions = { "A1", "I1", "C2", "G2" }
    yhanthleiPositions = { "C1", "E1", "G1", "E2", "E3" }
    drawConnection("gateway", "E3", lines)
    drawConnection("A1", "I1", lines)
    drawConnection("C2", "G2", lines)
    drawConnection("C3", "G3", lines)
    drawConnection("C1", "C3", lines)
    drawConnection("G1", "G3", lines)
  else
    dagonPosition = "G2"
    hydraPosition = "C2"
    sanctumPositions = { "A1", "I1", "A2", "I2" }
    yhanthleiPositions = { "C1", "E1", "G1", "E2" }
    drawConnection("gateway", "E2", lines)
    drawConnection("A1", "I1", lines)
    drawConnection("A2", "I2", lines)
    drawConnection("A1", "A2", lines)
    drawConnection("C1", "C2", lines)
    drawConnection("G1", "G2", lines)
    drawConnection("I1", "I2", lines)
  end

  local chest = MythosAreaApi.getSetAsideChest()

  chest.takeObject({
    guid = DAGON_GUID,
    position = YP[dagonPosition],
    rotation = ROTATION,
    smooth = false
  })

  chest.takeObject({
    guid = HYDRA_GUID,
    position = YP[hydraPosition],
    rotation = ROTATION,
    smooth = false
  })

  chest.takeObject({
    guid = SANCTUM_DECK_GUID,
    position = { -10.70, 1.64, 4.63 },
    rotation = ROTATION,
    smooth = false,
    callback_function = function(obj)
      Wait.frames(function() placeSanctumLocations(obj) end, 1)
    end
  })

  chest.takeObject({
    guid = YHANTHLEI_DECK_GUID,
    position = { -10.70, 1.65, 7.99 },
    rotation = ROTATION,
    smooth = false,
    callback_function = function(obj)
      Wait.frames(function() placeYhanthleiLocations(obj) end)
    end
  })

  Global.setVectorLines(lines)
end

function placeSanctumLocations(deck)
  deck.shuffle()
  for i, coord in ipairs(sanctumPositions) do
    if i == 4 then
      deck.remainder.setPosition(YP[coord])
    else
      deck.takeObject({
        position = YP[coord],
        rotation = ROTATION,
        smooth = false
      })
    end
    addFloodToken(YP[coord], "full")
  end
end

function placeYhanthleiLocations(deck)
  deck.shuffle()
  for i, coord in ipairs(yhanthleiPositions) do
    if i == 7 then
      deck.remainder.setPosition(YP[coord])
    else
      deck.takeObject({
        position = YP[coord],
        rotation = ROTATION,
        smooth = false
      })
    end
    addFloodToken(YP[coord], "partial")
  end
end

function addFloodToken(position, level)
  local bag = getObjectFromGUID(FLOOD_BAG_GUID)
  position = Vector(position) + FLOOD_OFFSET
  bag.takeObject({
    position = position,
    rotation = { 0, 270, (level == "partial") and 0 or 180 },
    smooth = false
  })
end

function drawConnection(origin, target, lines)
  table.insert(lines, { points = { YP[origin], YP[target] } })
end
