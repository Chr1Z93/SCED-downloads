-- Clickable Card: The Stakeout

-- Color information for buttons
boxSize       = 50

-- static values
x_1           = -0.90
x_offset      = 0.075
y_visible     = 0.25
y_invisible   = -0.5

-- z-values (lines on the sheet)
posZ          = {
  -0.58,
  -0.44,
  -0.21,
  0.03,
  0.26,
  0.39
}

-- box setup (amount of boxes per line and amount of marked boxes in that line)
existingBoxes = { 1, 1, 1, 1, 1, 1 }

-- override 'marked boxes' for debugging ('all' or 'none')
markDEBUG     = ""

-- save state when going into bags / decks
function onDestroy() self.script_state = onSave() end

function onSave() return JSON.encode(markedBoxes) end

-- Startup procedure
function onLoad(savedData)
  if savedData ~= "" and markDEBUG == "" then
    markedBoxes = JSON.decode(savedData)
  else
    markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
  end

  makeData()
  createButtonsAndBoxes()

  self.addContextMenuItem("Reset Inputs", function() updateState() end)
  self.addContextMenuItem("Scale: normal", function() self.setScale({ 1, 1, 1 }) end)
  self.addContextMenuItem("Scale: double", function() self.setScale({ 2, 1, 2 }) end)
end

function updateState(markedBoxesNew)
  if markedBoxesNew then
    markedBoxes = markedBoxesNew
  else
    markedBoxes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
  end

  makeData()
  createButtonsAndBoxes()
end

-- create Data
function makeData()
  Data = {}
  Data.checkbox = {}

  -- repeat this for each entry (= line) in existingBoxes
  local totalCount = 0
  for i = 1, #existingBoxes do
    -- repeat this for each checkbox per line
    for j = 1, existingBoxes[i] do
      totalCount                      = totalCount + 1
      Data.checkbox[totalCount]       = {}
      Data.checkbox[totalCount].pos   = {}
      Data.checkbox[totalCount].pos.x = x_1 + j * x_offset
      Data.checkbox[totalCount].pos.z = posZ[i]
      Data.checkbox[totalCount].row   = i

      if (markDEBUG == "all") or (markedBoxes[i] >= j and markDEBUG ~= "none") then
        Data.checkbox[totalCount].pos.y = y_visible
        Data.checkbox[totalCount].state = true
      else
        Data.checkbox[totalCount].pos.y = y_invisible
        Data.checkbox[totalCount].state = false
      end
    end
  end
end

-- checks or unchecks the given box
function click_checkbox(tableIndex)
  local row = Data.checkbox[tableIndex].row

  if Data.checkbox[tableIndex].state == true then
    Data.checkbox[tableIndex].pos.y = y_invisible
    Data.checkbox[tableIndex].state = false
    markedBoxes[row] = markedBoxes[row] - 1
  else
    Data.checkbox[tableIndex].pos.y = y_visible
    Data.checkbox[tableIndex].state = true
    markedBoxes[row] = markedBoxes[row] + 1
  end

  self.editButton({
    index = tableIndex - 1,
    position = Data.checkbox[tableIndex].pos
  })
end

function createButtonsAndBoxes()
  self.clearButtons()
  self.clearInputs()

  for i, box_data in ipairs(Data.checkbox) do
    local funcName = "checkbox" .. i
    local func = function() click_checkbox(i) end
    self.setVar(funcName, func)

    self.createButton({
      click_function = funcName,
      function_owner = self,
      position       = box_data.pos,
      height         = boxSize,
      width          = boxSize,
      font_size      = box_data.size,
      scale          = { 1, 1, 1 },
      color          = { 0, 0, 0 },
      font_color     = { 0, 0, 0 }
    })
  end
end
