local guidReferenceApi     = require("core/GUIDReferenceApi")
local tokenSpawnTrackerApi = require("tokens/TokenSpawnTrackerApi")

TOP_LOCATION = Vector(-14.65, 1.55, 0)

function onLoad()
  self.createButton({
    label          = "Set Up",
    click_function = "setup",
    function_owner = self,
    position       = { 0, 0.11, 0 },
    height         = 120,
    width          = 400,
    scale          = { x = 1.75, y = 1, z = 1.75 },
    font_size      = 80
  })
end

function getLocationDeck()
  deck = nil
  for i, obj in ipairs(getObjects()) do
    local name = obj.getName()
    if name == "Ancient Facilities" or name == "Locations" then
      deck = obj
    elseif obj.type == "Card" then
      local md = JSON.decode(obj.getGMNotes()) or {}
      if md.id == "08649" then -- The Gate of Y'quaa
        gateGuid = obj.getGUID()
        gatePos = obj.getPosition()
      end
    end
  end
end

function setup(_, playerColor, _)
  getLocationDeck()
  if gatePos == nil or deck == nil then
    broadcastToColor("Either The Gate of Y'quaa or the location deck were not found", playerColor)
    return
  end

  deck.shuffle()

  -- reset clue spawned status for locations
  tokenSpawnTrackerApi.resetAllLocations()

  -- add spawned status back for Gate
  tokenSpawnTrackerApi.markTokensSpawned(gateGuid)

  Wait.frames(function() placeLocations() end, 5)
  Wait.frames(function() drawLines() end, 10)
end

function placeLocations()
  local offset = Vector.between(gatePos, TOP_LOCATION):scale(1 / 3)
  locationPositions = {}
  for i = 1, 5 do
    for j = 1, 3 do
      local pos = gatePos + offset * j + Vector(0, 1, 0)
      locationPositions[i .. "-" .. j] = pos
      if i == 5 and j == 3 then
        deck.remainder.setPosition(pos)
        deck.remainder.use_snap_points = false
      else
        local card = deck.takeObject({ position = pos, smooth = false })
        card.use_snap_points = false
      end
    end
    offset:rotateOver('y', 72)
  end
end

function drawLines()
  local playarea = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayArea")
  local center = playarea.positionToLocal(gatePos)
  local vectorLines = {}

  -- draw spokes
  for i = 1, 5 do
    local edge = locationPositions[i .. "-3"]
    table.insert(vectorLines, {
      color = { 0.6, 0.6, 0.6 },
      thickness = 0.01,
      points = { center, playarea.positionToLocal(edge):setAt("y", center.y) }
    })
  end

  local offset = Vector.between(
    playarea.positionToLocal(gatePos),
    playarea.positionToLocal(TOP_LOCATION)
  ):scale(1 / 3)

  -- draw rings
  for j = 1, 3 do
    drawCircle(center, j * offset:magnitude(), vectorLines)
  end

  playarea.setVectorLines(vectorLines)
end

function drawCircle(center, radius, vectorLines)
  local points = {}
  for i = 0, 60 do
    local angle = math.rad(360 / 60 * i)
    table.insert(points, {
      center.x + math.cos(angle) * radius,
      0.06,
      center.z + math.sin(angle) * radius
    })
  end
  table.insert(vectorLines, {
    color = { 0.6, 0.6, 0.6 },
    thickness = 0.01,
    points = points
  })
end
