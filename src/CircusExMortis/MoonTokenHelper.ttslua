-- this is a modified version of the library file (2023-07-17) for moon tokens
-- only [unnamed] tokens will be eligible for sealing

UPDATE_ON_HOVER = true
KEEP_OPEN = true
SHOW_SINGLE_RELEASE = true

local tokenArrangerApi = require("accessories/TokenArrangerApi")
local sealedTokens = {}
local tokensInBag = 0

local buttonParameters = {}
buttonParameters.label = 0
buttonParameters.width = 0
buttonParameters.height = 0
buttonParameters.scale = {0.3, 0.3, 0.3}
buttonParameters.position = {x = 0, y = 0.06, z = -0.05}
buttonParameters.function_owner = self
buttonParameters.click_function = "updateCountLabel"
buttonParameters.font_size = 3000

function onSave() return JSON.encode(sealedTokens) end

function onLoad(savedData)
  sealedTokens = JSON.decode(savedData) or {}
  generateContextMenu()
  self.addTag("CardThatSeals")
  updateCountLabel()
end

function updateCountLabel()
  self.clearButtons()
  if sealedTokens ~= {} and #sealedTokens > 0 then
    buttonParameters.position.y = #sealedTokens * 0.1 + 0.1
    buttonParameters.label = #sealedTokens
    self.createButton(buttonParameters)
  end
end

-- builds the context menu
function generateContextMenu()
  -- conditional single or multi release options
  if SHOW_SINGLE_RELEASE then
    self.addContextMenuItem("Release single", releaseOneToken)
  elseif SHOW_MULTI_RELEASE then
    self.addContextMenuItem("Release " .. SHOW_MULTI_RELEASE .. " token(s)", releaseMultipleTokens)
  end

  self.addContextMenuItem("Release all", releaseAllTokens)

  -- main context menu options to seal [unnamed] tokens
  if not SHOW_MULTI_SEAL then
    self.addContextMenuItem("Seal Moon", function(playerColor)
      sealToken(playerColor)
    end, KEEP_OPEN)
  else
    self.addContextMenuItem("Seal " .. SHOW_MULTI_SEAL .. " " .. "Moon", function(playerColor)
      readBag()
      local allowed = true
      local notFound

      if tokensInBag < SHOW_MULTI_SEAL then
        allowed = false
        notFound = name
      end

      if allowed then
        for i = 1, SHOW_MULTI_SEAL do
          sealToken(playerColor)
        end
      else
        printToColor("Not enough Moon tokens in the chaos bag.", playerColor)
      end
    end)
  end
end

-- generates a list of chaos tokens that is in the chaos bag
function readBag()
  local chaosbag = Global.call("findChaosBag")
  tokensInBag = 0

  for _, token in ipairs(chaosbag.getObjects()) do
    if token.name == "" then
      tokensInBag = tokensInBag + 1
    end
  end
end

-- native event from TTS - used to update the context menu for cards like "Unrelenting"
function onHover()
  if UPDATE_ON_HOVER then
    readBag()
    self.clearContextMenu()
    generateContextMenu()
  end
end

-- seals the named token on this card
function sealToken(playerColor)
  if not Global.call("canTouchChaosTokens") then return end
  local chaosbag = Global.call("findChaosBag")
  for i, obj in ipairs(chaosbag.getObjects()) do
    if obj.name == "Custom Tile" then
      chaosbag.takeObject({
        position = self.getPosition() + Vector(0, 0.5 + 0.1 * #sealedTokens, 0),
        rotation = self.getRotation(),
        index = i - 1,
        smooth = false,
        callback_function = function(token)
          local guid = token.getGUID()
          table.insert(sealedTokens, guid)
          tokenArrangerApi.layout()
          updateCountLabel()
        end
      })
      return
    end
  end
  printToColor("Moon token not found in chaos bag", playerColor)
end

-- release the last sealed token
function releaseOneToken(playerColor)
  if not Global.call("canTouchChaosTokens") then return end
  if #sealedTokens == 0 then
    printToColor("No sealed token(s) found", playerColor)
  else
    printToColor("Releasing token", playerColor)
    putTokenAway(table.remove(sealedTokens))
  end
end

-- release multiple tokens at once
function releaseMultipleTokens(playerColor)
  if SHOW_MULTI_RELEASE <= #sealedTokens then
    for i = 1, SHOW_MULTI_RELEASE do
      putTokenAway(table.remove(sealedTokens))
    end
    printToColor("Releasing " .. SHOW_MULTI_RELEASE .. " tokens", playerColor)
  else
    printToColor("Not enough tokens sealed.", playerColor)
  end
end

-- releases all sealed tokens
function releaseAllTokens(playerColor)
  if not Global.call("canTouchChaosTokens") then return end
  if #sealedTokens == 0 then
    printToColor("No sealed token(s) found", playerColor)
  else
    printToColor("Releasing token(s)", playerColor)
    for _, guid in ipairs(sealedTokens) do
      putTokenAway(guid)
    end
    sealedTokens = {}
    updateCountLabel()
  end
end

-- returns the token (referenced by GUID) to the chaos bag
function putTokenAway(guid)
  local token = getObjectFromGUID(guid)
  if not token then return end

  local name = token.getName()
  local chaosbag = Global.call("findChaosBag")
  chaosbag.putObject(token)
  tokenArrangerApi.layout()
  updateCountLabel()
end
