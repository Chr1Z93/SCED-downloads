VALID_TOKENS = {
  ["Moon"] = true
}

MAX_SEALED = 99
hasXML = true
isHelperEnabled = true

require("playercards/CardsThatSealTokens")
require("playercards/CardsWithHelper")
local ChaosBagApi = require("chaosbag/ChaosBagApi")
local helpVisibleToPlayers = {}

function getSaveData()
  return {
    isHelperEnabled = isHelperEnabled,
    loopId = loopId
  }
end

function onLoad2(loadedData)
  if loadedData then
    isHelperEnabled = loadedData.isHelperEnabled or true
    loopId = loadedData.loopId
  end

  createHelperXML()
  updateDisplay()
end

function generateDefaults(buttonCount)
  local defaults = {
    tag = "Defaults",
    children = {
      {
        tag = "Button",
        attributes = {
          font          = "font_teutonic-arkham",
          fontSize      = "275",
          color         = "#77674DE6",
          textColor     = "White",
        }
      },
      {
        tag = "TableLayout",
        attributes = {
          class = "button",
          position            = "180 -3 -10",
          rotation            = "0 0 180",
          height              = buttonCount * 500,
          width               = "1550",
          scale               = "0.1 0.1 1",
          cellSpacing         = "65",
          cellPadding         = "0 6 6 6",
          cellBackgroundColor = "rgba(1,1,1,0)",
          rowBackgroundColor  = "rgba(0,0,0,0.666)"
        }
      }
    }
  }
  return defaults
end

function createHelperXML()
    -- create the XML table
    local buttonLabels = {"Seal From Bag", "Seal From Play", "Release Token"}
    local onClickFunctions = {"sealMoon", "triggerXMLTokenLabelCreation", "releaseMoon"}
    local xmlTable      = {}

    -- get the defaults
    table.insert(xmlTable, generateDefaults(3))

    -- create the table layout
    local tableLayoutXml = {
      tag = "TableLayout",
      attributes = { class = "button", id = "Helper", active = "false" },
      children = {}
    }

    -- add the buttons to it
    for i = 1, 3 do
      local buttonXml = {
        tag = "Row",
        attributes = { id = "Row" .. i },
        children = {
          {
            tag = "Cell",
            children = {
              {
                tag = "Button",
                attributes = {
                  id          = ("Button" .. i),
                  text        = buttonLabels[i],
                  onClick     = onClickFunctions[i]
                }
              }
            }
          }
        }
      }

      table.insert(tableLayoutXml.children, buttonXml)
    end

  -- add to the XmlTable
  table.insert(xmlTable, tableLayoutXml)

  addMoonRules(xmlTable)
end

function addMoonRules(xmlTable)

  local moonRulesXml = {
    tag = "Panel",
    attributes = {
      id = "rulesPanel",
      width = "2100",
      height = "1500",
      rotation = "0 0 180",
      color = "#404040",
      textColor = "White",
      position ="-210 0 -5",
      active="false",
      scale = "0.1 0.1 1"
    },
    children = {
      {
        tag = "Tablelayout",
        attributes = {
          width = 1950,
          height = 1350,
          position = "0 0 0",
          rowBackgroundColor = "#D4B889",
          cellPadding = "10 10 10 10"
        },
        children = {
          {
          tag = "Row",
          attributes = {
            preferredheight = 210
          },
          children = {
            tag = "Cell",
            children = {
              tag = "Text",
              attributes = {
                fontsize=180,
                font="font_teutonic-arkham"
              },
              value = "Moon Token Rules Reminder"
              }
            }
          },
          {
          tag = "Row",
          attributes = {
            color="#cfcfcf"
          },
          children = {
            tag = "Cell",
            children = {
              tag = "Text",
              attributes = {
                fontsize=100,
              },
              value = "Moon Tokens revealed during a skill test have the following effect: \"0. Seal this token on your investigator card <i>(immediately)</i> and reveal another token.\""
            }
          }
          },
          {
          tag = "Row",
          attributes = {
            color="#cfcfcf"
          },
          children = {
            tag = "Cell",
            attributes = {color = "#D4B889"},
            children = {
              tag = "Text",
              attributes = {
                fontsize=100,
              },
              value = "At the end of the round, for each sealed token, you may take 1 damage or 1 horror to release it <i>(if you don't, leave it sealed)</i>."
            }
          }
          }
        }
      }
    }
  }

  table.insert(xmlTable, moonRulesXml)

-- add help button
local helpButtonXml = {
  tag = "Panel",
    attributes = {
      width = "86",
      height = "86",
      rotation = "0 0 180",
      position ="0 82 -15",
      active = "true",
      scale = "0.25 0.25 1"
    },
    children = {
      tag = "Button",
      attributes = { fontSize = "80", onClick="toggleRules" },
      value = "?"
    }
  }
  table.insert(xmlTable, helpButtonXml)
  self.UI.setXmlTable(xmlTable)
end

function triggerXMLTokenLabelCreation(player)
  local playerColor = player.color
  ChaosBagApi.removeTokenFromPlay("seal", VALID_TOKENS, _, _, _, self.getGUID(), playerColor)
end

function sealTokenWrapper(params)
  sealToken("Moon", params.playerColor)
end

function sealMoon(player)
  local playerColor = player.color
  sealToken("Moon", playerColor)
end

function releaseMoon(player)
  local playerColor = player.color
  releaseOneToken(playerColor)
end

function toggleRules(player)
  if helpVisibleToPlayers[player.color] then
    helpVisibleToPlayers[player.color] = nil
  else
    helpVisibleToPlayers[player.color] = true
  end
  updateRulesVisibility()
end

-- updates the visibility of the rules text
function updateRulesVisibility()
  local visibility = ""
  for playerColor, _ in pairs(helpVisibleToPlayers) do
    if string.len(visibility) > 0 then
      visibility = visibility .. "|" .. playerColor
    else
      visibility = playerColor
    end
  end
  self.UI.setAttribute("rulesPanel", "visibility", visibility)
  self.UI.setAttribute("rulesPanel", "active", string.len(visibility) > 0)
end
