local guidReferenceApi = require("core/GUIDReferenceApi")

LOCATIONS = {
  { name = "Blasted Heath",    position = Vector(-17.04, 1.6, 0.00) },
  { name = "Devil's Hop Yard", position = Vector(-17.04, 1.6, -7.65) },
  { name = "Dunwich Village",  position = Vector(-23.64, 1.6, 7.65) },
  { name = "Ten-Acre Meadow",  position = Vector(-23.64, 1.6, 0.00) },
  { name = "Whateley Ruins",   position = Vector(-23.64, 1.6, -7.65) },
  { name = "Cold Spring Glen", position = Vector(-30.24, 1.6, 0.00) }
}

ID_TO_NAME = {
  ["02248"] = "Blasted Heath",
  ["02249"] = "Blasted Heath",
  ["02252"] = "Devil's Hop Yard",
  ["02253"] = "Devil's Hop Yard",
  ["02242"] = "Dunwich Village",
  ["02243"] = "Dunwich Village",
  ["02246"] = "Ten-Acre Meadow",
  ["02247"] = "Ten-Acre Meadow",
  ["02250"] = "Whateley Ruins",
  ["02251"] = "Whateley Ruins",
  ["02244"] = "Cold Spring Glen",
  ["02245"] = "Cold Spring Glen"
}

BROOD_IDS = {
  ["02255"] = true,
  ["51042"] = true,
  ["51043"] = true,
  ["51044"] = true,
  ["51045"] = true
}

BORDER_COLORS = {
  Color(230 / 255, 159 / 255, 0),
  Color(0, 158 / 255, 115 / 255),
  Color(0, 114 / 255, 178 / 255),
  Color(213 / 255, 94 / 255, 0),
  Color(204 / 255, 121 / 255, 167 / 255)
}

SET_ASIDE = {
  position = Vector(-5.75, 1.54, 19.25),
  rotation = Vector(0, 270, 0)
}

function onSave()
  local dataToSave = ""
  if SETUP_DONE then
    dataToSave = {
      SETUP_DONE    = SETUP_DONE,
      locationMap   = locationMap,
      locationCards = locationCards
    }
  end
  return JSON.encode(dataToSave)
end

function onLoad(savedData)
  if savedData ~= nil and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    SETUP_DONE       = loadedData.SETUP_DONE
    locationMap      = loadedData.locationMap
    locationCards    = loadedData.locationCards
  end

  self.createButton({
    label = "Set Up",
    click_function = "setup",
    function_owner = self,
    position = { 0, 0.1, -0.6 },
    height = 120,
    width = 400,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 80
  })

  self.createButton({
    label = "Move\nBroods",
    click_function = "moveBroods",
    function_owner = self,
    position = { 0, 0.1, 0.4 },
    height = 240,
    width = 400,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 80
  })

  self.addContextMenuItem("Reset savestate", resetSaveState)
  math.randomseed(os.time())
end

function resetSaveState()
  SETUP_DONE = false
  onSave()
end

function setup()
  if SETUP_DONE then return end
  SETUP_DONE = true

  findLocations()

  locationCards = {}
  for _, locationData in pairs(locationMap) do
    -- randomly get a GUID
    local chosen = math.random(2)
    local guid = locationData.guids[chosen]

    -- set aside this version of the location
    local card = getObjectFromGUID(locationData.guids[3 - chosen])
    card.setPosition(SET_ASIDE.position)
    card.setRotation({ 0, 270, 0 })

    -- put this version in play and store its guid
    card = getObjectFromGUID(guid)
    card.setPosition(locationData.position)
    card.setRotation({ 0, 270, 0 })
    locationCards[locationData.name] = guid
  end
end

function getPlayAreaObjects()
  local zone = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  return zone.getObjects()
end

function findLocations()
  locationMap = {}
  for _, locationData in ipairs(LOCATIONS) do
    locationData.guids = {}
    locationMap[locationData.name] = locationData
  end

  for _, obj in ipairs(getPlayAreaObjects()) do
    local md = JSON.decode(obj.getGMNotes()) or {}
    local locationName = ID_TO_NAME[md.id]
    if locationName then
      local locationData = locationMap[locationName]
      table.insert(locationData.guids, obj.getGUID())
    end
  end
end

function moveBroods(_, color)
  local broods = {}
  for _, obj in ipairs(getPlayAreaObjects()) do
    local md = JSON.decode(obj.getGMNotes()) or {}
    if md.id and BROOD_IDS[md.id] then -- "Brood of Yog-Sothoth"
      table.insert(broods, obj)
    end
  end

  if #broods == 0 then
    printToColor("No broods found in play area", color)
    return
  end

  -- clear location highlights
  for _, guid in pairs(locationCards) do
    local obj = getObjectFromGUID(guid)
    if obj ~= nil then obj.setVectorLines({}) end
  end

  locationBorders = {}
  for i, brood in ipairs(broods) do
    local j = math.random(6)
    local locationName = LOCATIONS[j].name

    -- initialize table to track borders
    locationBorders[locationName] = locationBorders[locationName] or {}

    brood.setVar("targetLocation", locationName)
    brood.setVar("colorIndex", i)
    drawBorder(brood, { i })

    table.insert(locationBorders[locationName], i)
    printToAll("Move brood once toward " .. locationName, BORDER_COLORS[i])
  end

  for locationName, border in pairs(locationBorders) do
    drawBorder(locationCards[locationName], border)
  end
end

function drawBorder(card, colorIndexes)
  if type(card) == "string" then
    card = getObjectFromGUID(card)
    if card == nil then return end
  end
  local bounds = card.getBoundsNormalized()
  local xSize = bounds.size.x / 2
  local zSize = bounds.size.z / 2
  local offset = 0.15
  local borders = {}
  for _, index in ipairs(colorIndexes) do
    local color = BORDER_COLORS[index]
    table.insert(borders, {
      points = {
        { 0 - xSize, 0, 0 - zSize },
        { 0 + xSize, 0, 0 - zSize },
        { 0 + xSize, 0, 0 + zSize },
        { 0 - xSize, 0, 0 + zSize },
        { 0 - xSize, 0, 0 - zSize }
      },
      color = color,
      thickness = 0.1,
      rotation = { 0, 0, 0 }
    })
    xSize = xSize + offset
    zSize = zSize + offset
  end
  card.setVectorLines(borders)
end

-- called by the Brood script
function removeBorder(params)
  local locationName = params.location
  local card         = locationCards[locationName]
  local indexes      = locationBorders[locationName]
  for i, index in ipairs(indexes) do
    if index == params.colorIndex then
      table.remove(indexes, i)
      break
    end
  end
  drawBorder(card, indexes)
end
