local MythosAreaApi = require("mythos/MythosAreaApi")
local searchLib     = require("util/SearchLib")

ASSEMBLY = {
  position = { x = 68, y = 2, z = 36 },
  rotation = { x = 0, y = 270, z = 180 }
}

LOCATIONS = {
  { name = "House in the Reeds",     position = Vector( -23.68, 1.65, 7.57 ),  offset = Vector( 3.25, 0, 0 ) },
  { name = "Schoolhouse",            position = Vector( -23.68, 1.65, 0 ),     offset = Vector( 3.25, 0, 0 ) },
  { name = "Congregational Church",  position = Vector( -30.22, 1.66, 7.57 ),  offset = Vector( 0, 0, 2.5 ) },
  { name = "Osborn's General Store", position = Vector( -30.22, 1.65, -7.70 ), offset = Vector( 0, 0, -2.5 ) },
  { name = "Burned Ruins",           position = Vector( -36.77, 1.67, 7.57 ),  offset = Vector( -3.25, 0, 0 ) },
  { name = "Bishop's Brook",         position = Vector( -36.77, 1.66, 0 ),     offset = Vector( -3.25, 0, 0 ) }
}

function onLoad()
  self.createButton({
    label = "Place\nLocations",
    click_function = "setup",
    function_owner = self,
    position = { 0, 0.3, 2 },
    height = 600,
    width = 1200,
    font_size = 250,
    color = { 0, 0, 0 },
    font_color = { 1, 1, 1 }
  })
  math.randomseed(os.time())

  -- create index of locations
  local removedLoc = math.random(6)
  locationMap = {}
  for i, loc in ipairs(LOCATIONS) do
    if i ~= removedLoc then
      locationMap[loc.name] = loc
    end
  end
end

function getAssemblyDeck()
  local result = searchLib.inArea(ASSEMBLY.position, ASSEMBLY.rotation, { x = 3, y = 3, z = 3 }, "isDeck")
  if #result > 0 then
    return result[1]
  end
  return nil
end

function setup(obj, color, alt_click)
  if DISABLED then return end
  DISABLED = true

  local objs = self.getObjects()
  for i = #objs, 1, -1 do
    local name = objs[i].name
    local loc = locationMap[name]
    if name ~= nil and loc ~= nil then
      self.takeObject({
        position = loc.position,
        rotation = { 0, 270, 0 },
        smooth = false,
        index = i - 1
      })
    end
  end

  Player[color].showOptionsDialog(
    "Check Campaign log. Does the O'Bannion gang have a bone to pick with the investigators?", { "Yes", "No" }, 1,
    function(text)
      boneToPick = (text == "Yes")
      Wait.time(setup_2, 1)
    end
  )
end

function setup_2()
  for _, obj in ipairs(getObjects()) do
    local name = obj.getName()
    if name == "Encounter Deck" then
      eDeck = obj
    elseif name == "Naomi's Crew" then
      naomisCrew = obj
    else
      local loc = locationMap[name]
      if loc ~= nil then
        obj.shuffle()
        local loopLength = obj.getQuantity() - 1
        for i = 1, loopLength do
          self.putObject(obj.takeObject())
        end
      else
        -- check if playing "Return to"
        if obj.type == "Card" and obj.hasTag("ScenarioCard") and obj.hasTag("Location") then
          local md = JSON.decode(obj.getGMNotes()) or {}
          if md.id == "51033" then -- Village Commons
            playingReturnTo = true
          end
        end
      end
    end
  end

  chest = MythosAreaApi.getSetAsideChest()

  takeObjectiveCards()

  -- if playing the regular version, shuffle Naomis Crew first into the encounter deck
  if not playingReturnTo then
    if boneToPick then
      eDeck.putObject(naomisCrew)
    end
    takeEncounterCards(eDeck)
  else
    takeEncounterCards(eDeck)
    if boneToPick then
      eDeck.putObject(naomisCrew)

      -- take hired guns from chest
      for _, obj in ipairs(chest.getObjects()) do
        if obj.name == "Hired Guns" then
          chest.takeObject({
            smooth = false,
            index = obj.index,
            callback_function = function(guns)
              guns.takeObject({ position = Vector(-13, 1.55, -11), rotation = Vector(0, 270, 0) })
              eDeck.putObject(guns.remainder)
            end
          })
          broadcastToAll("Place the spawned Hired Gun at one of the locations not connected to Village Commons.")
          break
        end
      end
    end
  end

  eDeck.shuffle()
  Wait.time(setup_3, 1)
end

function setup_3()
  local deck = getAssemblyDeck()
  deck.shuffle()
  local i = 1
  for _, loc in pairs(locationMap) do
    if i < (#LOCATIONS - 1) then
      deck.takeObject({
        position = loc.position + loc.offset,
        rotation = ASSEMBLY.rotation,
        smooth = false
      })
    else
      deck.remainder.setPosition(loc.position + loc.offset)
    end
    i = i + 1
  end
end

function takeObjectiveCards()
  local objs = chest.getObjects()
  for i = #objs, 1, -1 do
    local md = JSON.decode(objs[i].gm_notes) or {}
    if md.id == "02214" or md.id == "02215" then -- The Hidden Chamber or Key to the Chamber
      chest.takeObject({
        position = ASSEMBLY.position,
        rotation = ASSEMBLY.rotation,
        smooth = false,
        index = i - 1
      })
    end
  end
end

function takeEncounterCards(deck)
  deck.shuffle()
  for i = 1, 3 do
    deck.takeObject({
      position = ASSEMBLY.position,
      rotation = ASSEMBLY.rotation,
      smooth = false
    })
  end
end
