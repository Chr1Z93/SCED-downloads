-- Campaign Log: The Scarlet Keys (Page 2)

--Set this to true while editing and false when you have finished
local disableSave       = false
local buttonFontColor   = { 0, 0, 0 }
local buttonColor       = { 1, 1, 1 }
local buttonScale       = { 0.13, 0.13, 0.13 }
local defaultButtonData = {
  checkbox = {},
  counter = {},
  --Add editable text boxes
  textbox = {
    -- San Juan
    { pos = { -0.72, 0.11, -1.44 },
      rot = { 0, -6, 0 } },
    -- Quito
    { pos = { -0.86, 0.11, -0.93 },
      rot = { 0, -19, 0 } },
    -- Reykjavik
    { pos = { 0.25, 0.11, -1.21 },
      rot = { 0, -6, 0 } },
    -- London
    { pos = { 0.56, 0.11, -0.92 },
      rot = { 0, 5, 0 } },
    -- Hong Kong
    { pos = { -0.49, 0.11, -0.14 },
      rot = { 0, -3, 0 } },
    -- Kuala Lumpur
    { pos = { -0.9, 0.11, 0.28 },
      rot = { 0, 9, 0 } },
    -- Manokwari
    { pos = { -0.11, 0.11, 0.52 },
      rot = { 0, 14, 0 } },
    -- Tunguska
    { pos = { 0.905, 0.11, -0.03 },
      rot = { 0, -16, 0 } },
    -- Kabul
    { pos = { 0.53, 0.11, 0.61 },
      rot = { 0, -4, 0 } },
    -- killed investigators
    { pos = { -0.7, 0.11, 1.7 },
      rot       = { 0, 3, 0 },
      rows      = 9,
      width     = 4500,
      font_size = 200,
      label     = "Click to type",
      value     = "",
      noDefault = true
    }
  }
}

function updateSave() self.script_state = onSave() end

function onSave() return JSON.encode(ref_buttonData) end

--Startup procedure
function onLoad(saved_data)
  if disableSave == true then saved_data = "" end
  if saved_data ~= "" then
    local loaded_data = JSON.decode(saved_data)
    ref_buttonData = loaded_data
  else
    -- default settings for all boxes
    for _, entry in ipairs(defaultButtonData.textbox) do
      if entry.noDefault == true then break end
      entry.label = "Click"
      entry.value = ""
      entry.width = 950
      entry.font_size = 300
      if entry.rows == nil then entry.rows = 1 end
    end

    ref_buttonData = defaultButtonData
  end

  spawnedButtonCount = 0
  createCheckbox()
  createCounter()
  createTextbox()
end

--Click functions for buttons
--Checks or unchecks the given box
function click_checkbox(tableIndex, buttonIndex)
  if ref_buttonData.checkbox[tableIndex].state == true then
    ref_buttonData.checkbox[tableIndex].state = false
    self.editButton({ index = buttonIndex, label = "" })
  else
    ref_buttonData.checkbox[tableIndex].state = true
    self.editButton({ index = buttonIndex, label = string.char(10008) })
  end
  updateSave()
end

--Applies value to given counter display
function click_counter(tableIndex, buttonIndex, amount)
  ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount
  self.editButton({ index = buttonIndex, label = ref_buttonData.counter[tableIndex].value })
  updateSave()
end

--Updates saved value for given text box
function click_textbox(i, value, selected)
  if selected == false then
    ref_buttonData.textbox[i].value = value
    updateSave()
  end
end

--Makes checkboxes
function createCheckbox()
  for i, data in ipairs(ref_buttonData.checkbox) do
    --Sets up reference function
    local buttonNumber = spawnedButtonCount
    local funcName = "checkbox" .. i
    local func = function() click_checkbox(i, buttonNumber) end
    self.setVar(funcName, func)
    local label = ""
    if data.state == true then label = string.char(10008) end
    --Creates button and counts it
    self.createButton({
      label          = label,
      click_function = funcName,
      function_owner = self,
      position       = data.pos,
      rotation       = data.rot or { 0, 0, 0 },
      height         = data.size,
      width          = data.size,
      font_size      = data.size,
      scale          = buttonScale,
      color          = buttonColor,
      font_color     = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

--Makes counters
function createCounter()
  for i, data in ipairs(ref_buttonData.counter) do
    -- common parameters
    local size                      = 400
    local offsetDistance            = 3 / 4 * size * buttonScale[1] * 0.002
    local buttonParameters          = {}
    buttonParameters.function_owner = self
    buttonParameters.scale          = buttonScale
    buttonParameters.color          = buttonColor
    buttonParameters.font_color     = buttonFontColor

    --Sets up display
    local displayNumber             = spawnedButtonCount
    buttonParameters.label          = data.value
    buttonParameters.click_function = "click_none"
    buttonParameters.position       = data.pos
    buttonParameters.height         = 0
    buttonParameters.width          = 0
    buttonParameters.font_size      = size
    self.createButton(buttonParameters)
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up add 1
    local funcName = "counterAdd" .. i
    local func = function() click_counter(i, displayNumber, 1) end
    self.setVar(funcName, func)

    buttonParameters.label          = "+"
    buttonParameters.click_function = funcName
    buttonParameters.position       = { data.pos[1] + offsetDistance, data.pos[2], data.pos[3] - 0.005 }
    buttonParameters.height         = size * 0.55
    buttonParameters.width          = size * 0.55
    buttonParameters.font_size      = size * 0.55
    self.createButton(buttonParameters)
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up subtract 1
    local funcName = "counterSub" .. i
    local func = function() click_counter(i, displayNumber, -1) end
    self.setVar(funcName, func)

    buttonParameters.label          = "-"
    buttonParameters.click_function = funcName
    buttonParameters.position       = { data.pos[1] - offsetDistance, data.pos[2], data.pos[3] - 0.005 }
    self.createButton(buttonParameters)
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

function createTextbox()
  for i, data in ipairs(ref_buttonData.textbox) do
    --Sets up reference function
    local funcName = "textbox" .. i
    local func = function(_, _, val, sel) click_textbox(i, val, sel) end
    self.setVar(funcName, func)
    self.createInput({
      input_function = funcName,
      function_owner = self,
      label          = data.label,
      alignment      = 2,
      position       = data.pos,
      rotation       = data.rot or { 0, 0, 0 },
      scale          = buttonScale,
      width          = data.width,
      height         = (data.font_size * data.rows) + 33,
      font_size      = data.font_size,
      color          = buttonColor,
      font_color     = buttonFontColor,
      value          = data.value
    })
  end
end

