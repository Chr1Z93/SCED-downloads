local CoroutineLib       = require("util/CoroutineLib")
local GUIDReferenceApi   = require("core/GUIDReferenceApi")
local PlayAreaApi        = require("playarea/PlayAreaApi")

local LOCATION_DECK_GUID = "99af89"
local TARGET_GUID        = "d78c15"
local DECOYS_GUID        = "546d02"
local LA_CHICA_ROJA_GUID = "6f608a"
local nextSetupStep      = 1
local trash

local locationMap        = {
  ["09550"] = { x = 0.5, y = 1 },
  ["09551"] = { x = -0.5, y = 1 },
  ["09552"] = { x = -1, y = 0 },
  ["09553"] = { x = -1, y = -1 },
  ["09554"] = { x = 1, y = -1 },
  ["09555"] = { x = 1, y = 0 },
  ["09556"] = { x = 0, y = -1 },
}

local buttonParameters   = {
  function_owner = self,
  position       = { 0, 0.1, 0 },
  scale          = { x = 1.75, y = 1.75, z = 1.75 },
  font_color     = { r = 0, g = 0, b = 0 },
  color          = { r = 1, g = 1, b = 1 }
}

function updateSave()
  self.script_state = tostring(nextSetupStep)
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    nextSetupStep = tonumber(savedData)
  end

  trash = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  if not trash then
    printToAll("Trash not found!", "Red")
  end

  createButtons()
end

function setup()
  function setupCoroutine()
    -- shuffle locations and remove one
    local locationDeck = getObjectFromGUID(LOCATION_DECK_GUID)
    locationDeck.shuffle()

    local removedLocation = locationDeck.takeObject()
    broadcastToAll("Removed '" .. removedLocation.getName() .. "' from the game.", "White")
    trash.putObject(removedLocation)
    CoroutineLib.yieldSeconds(1)

    -- place remaining locations according to the map
    local usedLocationMap = {}
    for i = 1, 6 do
      local locationCard = locationDeck.takeObject()
      local md = JSON.decode(locationCard.getGMNotes())
      usedLocationMap[i] = PlayAreaApi.gridToWorld(locationMap[md.id])
      locationCard.setPositionSmooth(usedLocationMap[i])
    end
    broadcastToAll("Placed remaining locations on the PlayArea.", "White")
    CoroutineLib.yieldSeconds(1)

    -- place a target on each eligible location
    local targetContainer = getObjectFromGUID(TARGET_GUID)
    for i = 1, 6 do
      targetContainer.takeObject({ position = usedLocationMap[i] + Vector(2, 0, 0) })
    end
    broadcastToAll("Placed targets on each location.", "White")
    CoroutineLib.yieldSeconds(1)

    -- shuffle CMCs and place at each eligible location
    local laChicaRojaCMC = getObjectFromGUID(LA_CHICA_ROJA_GUID)
    local cmcPilePos = laChicaRojaCMC.getPosition()
    local decoyDeck = getObjectFromGUID(DECOYS_GUID)
    local cutDecks = decoyDeck.cut(5)
    local cmcPile = cutDecks[2]
    cmcPile.setPosition(cmcPilePos)
    cmcPile.setRotation({ 0, 270, 0 })
    CoroutineLib.yieldSeconds(1)

    cmcPile.flip()
    CoroutineLib.yieldSeconds(0.5) -- to make sure viewers know the CMCs are being shuffled

    cmcPile.shuffle()
    CoroutineLib.yieldSeconds(1)

    for i = 1, 6 do
      cmcPile.takeObject({ position = usedLocationMap[i] - Vector(0, 0, 2) })
    end
    broadcastToAll("Resolved La Chica Roja's Concealed keyword.", "White")
    increaseSetupStep()
  end

  CoroutineLib.start(setupCoroutine)
end

function getRandomLocation()
  -- used for setting up Act 3 (in campaign guide). Could be modified to only search
  -- for locations without a target but this is potentially unreliable.
  local playAreaZone = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  local locationsInPlay = {}

  for _, obj in ipairs(playAreaZone.getObjects()) do
    if obj.hasTag("Location") == true then
      local md = JSON.decode(obj.getGMNotes()) or {}
      if tonumber(md.id) ~= nil
          and tonumber(md.id) >= 9550 and tonumber(md.id) <= 9556
          and obj.locked == false
          and obj.interactable == true then
        table.insert(locationsInPlay, obj)
      end
    end
  end

  local randomLocation = locationsInPlay[math.random(6)]
  broadcastToAll("Randomized location chosen is '" .. randomLocation.getName() .. "'", "White")
end

function createButtons()
  self.clearButtons()

  if nextSetupStep == 1 then
    buttonParameters.label          = "Setup"
    buttonParameters.click_function = "setup"
    buttonParameters.height         = 130
    buttonParameters.width          = 410
    buttonParameters.font_size      = 125
    self.createButton(buttonParameters)
  elseif nextSetupStep == 2 then
    buttonParameters.label          = "Random\nLocation"
    buttonParameters.click_function = "getRandomLocation"
    buttonParameters.height         = 310
    buttonParameters.width          = 410
    buttonParameters.font_size      = 100
    self.createButton(buttonParameters)
  end
end

function increaseSetupStep()
  nextSetupStep = nextSetupStep + 1
  updateSave()
  createButtons()
end
