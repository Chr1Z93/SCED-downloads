-- Campaign Log: Cyclopean Foundations

-- returns the trauma values for the investigators from left to right (4x physical, 4x mental)
function returnTrauma()
  local trauma = {}

  -- physical trauma from left to right
  trauma[1] = ref_buttonData.counter[2].value or 0
  trauma[2] = ref_buttonData.counter[5].value or 0
  trauma[3] = ref_buttonData.counter[8].value or 0
  trauma[4] = ref_buttonData.counter[11].value or 0

  -- mental trauma from left to right
  trauma[5] = ref_buttonData.counter[3].value or 0
  trauma[6] = ref_buttonData.counter[6].value or 0
  trauma[7] = ref_buttonData.counter[9].value or 0
  trauma[8] = ref_buttonData.counter[12].value or 0

  return trauma
end

--Set this to true while editing and false when you have finished
disableSave = false
--Remember to set this to false once you are done making changes
--Then, after you save & apply it, save your game too

--Color information for button text (r,g,b, values of 0-1)
buttonFontColor = { 0, 0, 0 }
--Color information for button background
buttonColor = { 1, 1, 1 }
--Change scale of button (Avoid changing if possible)
buttonScale = { 0.1, 0.1, 0.1 }

--This is the button placement information
defaultButtonData = {
  checkbox = {},
  counter = {
    --1st Player Experience
    {
      pos    = { -1.080, 0.1, -1.010 },
      size   = 800,
      value  = 0,
      hideBG = true
    },
    --1st Player Physical Trauma
    {
      pos    = { -1.270, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    },
    --1st Player Mental Trauma
    {
      pos    = { -1.000, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    },
    --2nd Player Experience
    {
      pos    = { -0.251, 0.1, -1.010 },
      size   = 800,
      value  = 0,
      hideBG = true
    },
    --2nd Player Physical Trauma
    {
      pos    = { -0.441, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    },
    --2nd Player Mental Trauma
    {
      pos    = { -0.171, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    },
    --3rd Player Experience
    {
      pos    = { 0.579, 0.1, -1.010 },
      size   = 800,
      value  = 0,
      hideBG = true
    },
    --3rd Player Physical Trauma
    {
      pos    = { 0.389, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    },
    --3rd Player Mental Trauma
    {
      pos    = { 0.659, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    },
    --4th Player Experience
    {
      pos    = { 1.407, 0.1, -1.010 },
      size   = 800,
      value  = 0,
      hideBG = true
    },
    --4th Player Physical Trauma
    {
      pos    = { 1.217, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    },
    --4th Player Mental Trauma
    {
      pos    = { 1.487, 0.1, -0.790 },
      size   = 600,
      value  = 0,
      hideBG = true
    }
  },
  textbox = {
    --1st Player Name
    {
      pos       = { -1.265, 0.1, -1.390 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --1st Player Investigator
    {
      pos       = { -1.265, 0.1, -1.195 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --1st Player Story Assets/Weaknesses
    {
      pos       = { -1.265, 0.1, -0.420 },
      rows      = 7,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --2nd Player Name
    {
      pos       = { -0.436, 0.1, -1.390 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --2nd Player Investigator
    {
      pos       = { -0.436, 0.1, -1.195 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --2nd Player Story Assets/Weaknesses
    {
      pos       = { -0.436, 0.1, -0.420 },
      rows      = 7,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --3rd Player Name
    {
      pos       = { 0.394, 0.1, -1.390 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --3rd Player Investigator
    {
      pos       = { 0.394, 0.1, -1.195 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --3rd Player Story Assets/Weaknesses
    {
      pos       = { 0.394, 0.1, -0.420 },
      rows      = 7,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --4th Player Name
    {
      pos       = { 1.222, 0.1, -1.390 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --4th Player Investigator
    {
      pos       = { 1.222, 0.1, -1.195 },
      rows      = 1,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --4th Player Story Assets/Weaknesses
    {
      pos       = { 1.222, 0.1, -0.420 },
      rows      = 7,
      width     = 3800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --Campaign Notes 1
    {
      pos       = { -0.930, 0.1, 0.982 },
      rows      = 25,
      width     = 7800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --Campaign Notes 2
    {
      pos       = { 0.820, 0.1, 0.707 },
      rows      = 20,
      width     = 7800,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    },
    --Killed and Insane Investigators
    {
      pos       = { 1.010, 0.1, 1.700 },
      rows      = 5,
      width     = 7400,
      font_size = 300,
      label     = "Empty",
      value     = "",
      alignment = 2
    }
  }
}

function updateSave()
  if disableSave then
    self.script_state = ""
  else
    self.script_state = JSON.encode(ref_buttonData)
  end
end

--Startup procedure
function onLoad(savedData)
  if disableSave == true then savedData = "" end
  if savedData ~= "" then
    local loaded_data = JSON.decode(savedData)
    ref_buttonData = loaded_data
  else
    ref_buttonData = defaultButtonData
  end

  spawnedButtonCount = 0
  createCheckbox()
  createCounter()
  createTextbox()
end

--Click functions for buttons



--Checks or unchecks the given box
function click_checkbox(tableIndex, buttonIndex)
  if ref_buttonData.checkbox[tableIndex].state == true then
    ref_buttonData.checkbox[tableIndex].state = false
    self.editButton({ index = buttonIndex, label = "" })
  else
    ref_buttonData.checkbox[tableIndex].state = true
    self.editButton({ index = buttonIndex, label = string.char(10008) })
  end
  updateSave()
end

--Applies value to given counter display
function click_counter(tableIndex, buttonIndex, amount)
  ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount
  self.editButton({ index = buttonIndex, label = ref_buttonData.counter[tableIndex].value })
  updateSave()
end

--Updates saved value for given text box
function click_textbox(i, value, selected)
  if selected == false then
    ref_buttonData.textbox[i].value = value
    updateSave()
  end
end

--Dud function for if you have a background on a counter
function click_none() end

--Button creation



--Makes checkboxes
function createCheckbox()
  for i, data in ipairs(ref_buttonData.checkbox) do
    --Sets up reference function
    local buttonNumber = spawnedButtonCount
    local funcName = "checkbox" .. i
    local func = function() click_checkbox(i, buttonNumber) end
    self.setVar(funcName, func)
    --Sets up label
    local label = ""
    if data.state == true then label = string.char(10008) end
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = data.pos,
      height = data.size,
      width = data.size,
      font_size = data.size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

--Makes counters
function createCounter()
  for i, data in ipairs(ref_buttonData.counter) do
    --Sets up display
    local displayNumber = spawnedButtonCount
    --Sets up label
    local label = data.value
    --Sets height/width for display
    local size = data.size
    if data.hideBG == true then size = 0 end
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = "click_none",
      function_owner = self,
      position = data.pos,
      height = size,
      width = size,
      font_size = data.size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up add 1
    local funcName = "counterAdd" .. i
    local func = function() click_counter(i, displayNumber, 1) end
    self.setVar(funcName, func)
    --Sets up label
    local label = "+"
    --Sets up position
    local offsetDistance = (data.size / 2 + data.size / 4) * (buttonScale[1] * 0.002)
    local pos = { data.pos[1] + offsetDistance, data.pos[2], data.pos[3] }
    --Sets up size
    local size = data.size / 2
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = pos,
      height = size,
      width = size,
      font_size = size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up subtract 1
    local funcName = "counterSub" .. i
    local func = function() click_counter(i, displayNumber, -1) end
    self.setVar(funcName, func)
    --Sets up label
    local label = "-"
    --Set up position
    local pos = { data.pos[1] - offsetDistance, data.pos[2], data.pos[3] }
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = pos,
      height = size,
      width = size,
      font_size = size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

function createTextbox()
  for i, data in ipairs(ref_buttonData.textbox) do
    --Sets up reference function
    local funcName = "textbox" .. i
    local func = function(_, _, val, sel) click_textbox(i, val, sel) end
    self.setVar(funcName, func)

    self.createInput({
      input_function = funcName,
      function_owner = self,
      label          = data.label,
      alignment      = data.alignment,
      position       = data.pos,
      scale          = buttonScale,
      width          = data.width,
      height         = (data.font_size * data.rows) + 24,
      font_size      = data.font_size,
      color          = buttonColor,
      font_color     = buttonFontColor,
      value          = data.value,
    })
  end
end
