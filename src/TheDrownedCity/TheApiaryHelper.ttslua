local CoroutineLib          = require("util/CoroutineLib")
local DeckLib               = require("util/DeckLib")
local GUIDReferenceApi      = require("core/GUIDReferenceApi")
local MythosAreaApi         = require("mythos/MythosAreaApi")

local ENCOUNTER_DECK_DISCARD_POSITION = MythosAreaApi.getEncounterDiscardPosition()
local INESCAPABLE_SET_GUID       = "4a2ddd"
local trash

local APIARY_DATA = {
  west = {
    bag = "d54b36",
    apiaryLocations = "88bb86",
    notecard = "6f6d63",
    extraEncounterSets = "33bd39",
    extraEncounterSetsName = "Dark Cult",
    locationCard1 = "100805",  -- the location shuffled in on initial set-up
    locationCard2 = "09c80b",  -- the next two are shuffled in when the initial location is revealed
    locationCard3 = "7a307a",
    locationCard4Name = "Lost Campsite" -- unique "last" card for this direction
  },
  east = {
    bag = "c143ae",
    apiaryLocations = "216965",
    notecard = "e8311d",
    extraEncounterSets = "26fd95",
    extraEncounterSetsName = "Dark Cult and Infected Star Spawn",
    locationCard1 = "0dcde7",
    locationCard2 = "52e4c1",
    locationCard3 = "7a307a",
    locationCard4Name = "Acidic Coelom"
  }
}

function onLoad()
  trash = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  if not trash then
    printToAll("Trash not found!", "Red")
  end

  self.createButton({
    label = "Western",
    click_function = "westernSetup",
    function_owner = self,
    position = { 0, 0.1, -0.5 },
    height = 150,
    width = 460,
    scale = { x = 2, y = 2, z = 2 },
    font_color = { r = 0, g = 0, b = 0 },
    color = { r = 1, g = 1, b = 1 }
  })

  self.createButton({
    label = "Eastern",
    click_function = "easternSetup",
    function_owner = self,
    position = { 0, 0.1, 0.5 },
    height = 150,
    width = 460,
    scale = { x = 2, y = 2, z = 2 },
    font_color = { r = 0, g = 0, b = 0 },
    color = { r = 1, g = 1, b = 1 }
  })
end

function westernSetup()
  direction = "west"
  local otherBag = getObjectFromGUID(APIARY_DATA["east"].bag)
  trash.putObject(otherBag)

  setup()
end

function easternSetup(_, color)
  direction = "east"
  local otherBag = getObjectFromGUID(APIARY_DATA["west"].bag)
  trash.putObject(otherBag)

  setup(color)
end

function setup(color)
  local bag = getObjectFromGUID(APIARY_DATA[direction].bag)
  if #bag.getObjects() > 0 then
    bag.call("buttonClick_place")
  end

  trash.putObject(getObjectFromGUID(APIARY_DATA[direction].notecard))
  trash.putObject(bag)

  function apiarySetupCoroutine()
    -- set up specific encounter sets based on direction
    local extraEncounter = getObjectFromGUID(APIARY_DATA[direction].extraEncounterSets)
    DeckLib.placeOrMergeIntoDeck(extraEncounter, MythosAreaApi.getEncounterDeckPosition(), nil, false, true)
    broadcastToAll("Shuffled '" .. APIARY_DATA[direction].extraEncounterSetsName .."' into the encounter deck.")
    CoroutineLib.yieldSeconds(1.5)

    local encounterDeck = MythosAreaApi.getEncounterDeckObjects()
    local newFirstLocation = getObjectFromGUID(APIARY_DATA[direction].locationCard1)
    local firstLocationName = newFirstLocation.getName()

    DeckLib.shuffleIntoTopOrBottomX(newFirstLocation, encounterDeck.draw, true, 10, true)

    broadcastToAll("Shuffled '" .. firstLocationName .."' into the bottom 10 cards of the encounter deck.")
    self.removeButton(1)
    self.editButton({
      index = 0,
      label = "Set Up\nNext Part\nWhen\nInstructed ",
      click_function = "setup2",
      position = { 0, 0.1, 0 },
      height = 450,
      font_size = 90
    })

    if direction == "east" then
      local chest = MythosAreaApi.getSetAsideChest()
      -- prompt user to report on the Inescapable
      Player[color].showOptionsDialog("Was the creature defeated?", { "Yes", "No" }, 1, function(text)
        local inescapableSet = getObjectFromGUID(INESCAPABLE_SET_GUID)
        if text == "No" then
          -- add the entire Inescapable Encounter set to the set-aside chest
          chest.putObject(inescapableSet)
          broadcastToAll("Added 'The Inescapable' Encounter Set to the set-aside chest.", "White")
        else
          trash.putObject(inescapableSet)
          broadcastToAll("Removed 'The Inescapable' Encounter Set from the game.", "White")
        end
      end)
    end

  end

  CoroutineLib.start(apiarySetupCoroutine)
end

function setup2()
  function setup2Coroutine()

    local chest = MythosAreaApi.getSetAsideChest()
    local encounterDeck = MythosAreaApi.getEncounterDeckObjects()
    if direction == "west" then
      -- shuffle in Pilgrims
      chest.takeObject({ guid = "d7784d" , position = ENCOUNTER_DECK_DISCARD_POSITION, rotation = {0, 270, 0}, smooth = false})
      CoroutineLib.yieldSeconds(0.5)
      MythosAreaApi.reshuffleEncounterDeck(true)
      broadcastToAll("Shuffled 'Pilgrims' encounter set and discard pile into the encounter deck.")
    else
      MythosAreaApi.reshuffleEncounterDeck(false)
    end

    -- take two locations out of set-aside box
    setAsideLocations = chest.takeObject({guid = APIARY_DATA[direction].apiaryLocations, position = {1.50, 1.60, 7}, rotation = {0, 270, 180}})
    CoroutineLib.yieldSeconds(1)
    card1 = setAsideLocations.takeObject({guid = APIARY_DATA[direction].locationCard2, position = {1.50, 1.60, 3}})
    card2 = setAsideLocations.takeObject({guid = APIARY_DATA[direction].locationCard3, position = {1.50, 1.60, 3.5}})
    CoroutineLib.yieldSeconds(1)
    local newLocations = group({card1, card2})
    CoroutineLib.yieldSeconds(1)
    DeckLib.shuffleIntoTopOrBottomX(newLocations, encounterDeck.draw, true, 10)
    broadcastToAll("Shuffled '" .. card1.getName() .. "' and 'Corrupted Vault' into the bottom 10 cards of the encounter deck.")
    chest.putObject(setAsideLocations)
    self.editButton({ index = 0, click_function = "setup3" })
  end

  CoroutineLib.start(setup2Coroutine)
end

function setup3()
  function setup3Coroutine()

    local chest = MythosAreaApi.getSetAsideChest()
    -- shuffle encounter deck
    local encounterDeck = MythosAreaApi.getEncounterDeckObjects()
    MythosAreaApi.reshuffleEncounterDeck(false)
  
    -- take out final two locations from the set-aside box
    setAsideLocations = chest.takeObject({guid = APIARY_DATA[direction].apiaryLocations, position = {1.50, 1.60, 7}, rotation = {0, 270, 180}})
    CoroutineLib.yieldSeconds(0.5)
    DeckLib.shuffleIntoTopOrBottomX(setAsideLocations, encounterDeck.draw, true, 10)
    broadcastToAll("Shuffled '".. APIARY_DATA[direction].locationCard4Name .."' and 'Churning Chasm' into the bottom 10 cards of the encounter deck.")
    trash.putObject(self)
  end

  CoroutineLib.start(setup3Coroutine)
end
