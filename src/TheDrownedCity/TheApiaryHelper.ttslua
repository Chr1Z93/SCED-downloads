local CoroutineLib                    = require("util/CoroutineLib")
local DeckLib                         = require("util/DeckLib")
local GUIDReferenceApi                = require("core/GUIDReferenceApi")
local MythosAreaApi                   = require("mythos/MythosAreaApi")

local INESCAPABLE_SET_GUID            = "4a2ddd"
local nextSetupStep                   = 1
local trash

local APIARY_DATA                     = {
  west = {
    bag                    = "d54b36",
    apiaryLocations        = "88bb86",
    notecard               = "6f6d63",
    extraEncounterSets     = "33bd39",
    extraEncounterSetsName = "Dark Cult",
    locationCard1          = "100805",       -- the location shuffled in on initial set-up
    locationCard2          = "09c80b",       -- the next two are shuffled in when the initial location is revealed
    locationCard3          = "7a307a",
    locationCard4Name      = "Lost Campsite" -- unique "last" card for this direction
  },
  east = {
    bag                    = "c143ae",
    apiaryLocations        = "216965",
    notecard               = "e8311d",
    extraEncounterSets     = "26fd95",
    extraEncounterSetsName = "Dark Cult and Infected Star Spawn",
    locationCard1          = "0dcde7",
    locationCard2          = "52e4c1",
    locationCard3          = "7a307a",
    locationCard4Name      = "Acidic Coelom"
  }
}

function updateSave()
  self.script_state = tostring(nextSetupStep)
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    nextSetupStep = tonumber(savedData)
  end

  trash = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  if not trash then
    printToAll("Trash not found!", "Red")
  end

  createButtons()
end

function createButtons()
  if nextSetupStep > 3 then
    trash.putObject(self)
  end

  self.clearButtons()

  if nextSetupStep == 1 then
    self.createButton({
      label          = "Western",
      click_function = "westernSetup",
      function_owner = self,
      position       = { 0, 0.1, -0.5 },
      height         = 150,
      width          = 460,
      scale          = { x = 2, y = 2, z = 2 },
      font_color     = { r = 0, g = 0, b = 0 },
      color          = { r = 1, g = 1, b = 1 }
    })

    self.createButton({
      label          = "Eastern",
      click_function = "easternSetup",
      function_owner = self,
      position       = { 0, 0.1, 0.5 },
      height         = 150,
      width          = 460,
      scale          = { x = 2, y = 2, z = 2 },
      font_color     = { r = 0, g = 0, b = 0 },
      color          = { r = 1, g = 1, b = 1 }
    })
  else
    self.createButton({
      label          = "Set Up\nNext Part\nWhen\nInstructed ",
      click_function = "setup" .. nextSetupStep,
      function_owner = self,
      position       = { 0, 0.1, 0 },
      height         = 450,
      width          = 460,
      font_size      = 90,
      scale          = { x = 2, y = 2, z = 2 },
      font_color     = { r = 0, g = 0, b = 0 },
      color          = { r = 1, g = 1, b = 1 }
    })
  end
end

function increaseSetupStep()
  nextSetupStep = nextSetupStep + 1
  updateSave()
  createButtons()
end

function westernSetup()
  direction = "west"

  local otherBag = getObjectFromGUID(APIARY_DATA["east"].bag)
  trash.putObject(otherBag)

  setup()
end

function easternSetup(_, playerColor)
  direction = "east"

  local otherBag = getObjectFromGUID(APIARY_DATA["west"].bag)
  trash.putObject(otherBag)

  setup(playerColor)
end

function setup(playerColor)
  local bag = getObjectFromGUID(APIARY_DATA[direction].bag)
  if #bag.getObjects() > 0 then
    bag.call("buttonClick_place")
  end

  trash.putObject(getObjectFromGUID(APIARY_DATA[direction].notecard))
  trash.putObject(bag)

  function apiarySetupCoroutine()
    -- set up specific encounter sets based on direction
    local extraEncounter = getObjectFromGUID(APIARY_DATA[direction].extraEncounterSets)
    DeckLib.placeOrMergeIntoDeck(extraEncounter, MythosAreaApi.getEncounterDeckPosition(), nil, false, true)
    broadcastToAll("Shuffled '" .. APIARY_DATA[direction].extraEncounterSetsName .. "' into the encounter deck.")
    CoroutineLib.yieldSeconds(2)

    local encounterDeck = MythosAreaApi.getEncounterDeckObjects()
    local newFirstLocation = getObjectFromGUID(APIARY_DATA[direction].locationCard1)
    local firstLocationName = newFirstLocation.getName()

    DeckLib.shuffleIntoTopOrBottomX(newFirstLocation, encounterDeck.draw, true, 10, true)

    broadcastToAll("Shuffled '" .. firstLocationName .. "' into the bottom 10 cards of the encounter deck.")
    CoroutineLib.yieldSeconds(1)

    increaseSetupStep()

    if direction == "east" then
      local chest = MythosAreaApi.getSetAsideChest()
      -- prompt user to report on the Inescapable
      Player[playerColor].showOptionsDialog("Was the creature defeated?", { "Yes", "No" }, 1, function(text)
        local inescapableSet = getObjectFromGUID(INESCAPABLE_SET_GUID)
        if text == "No" then
          -- add the entire Inescapable Encounter set to the set-aside chest
          chest.putObject(inescapableSet)
          broadcastToAll("Added 'The Inescapable' Encounter Set to the set-aside chest.", "White")
        else
          trash.putObject(inescapableSet)
          broadcastToAll("Removed 'The Inescapable' Encounter Set from the game.", "White")
        end
      end)
    end
  end

  CoroutineLib.start(apiarySetupCoroutine)
end

function setup2()
  function setup2Coroutine()
    local chest = MythosAreaApi.getSetAsideChest()
    local encounterDeck = MythosAreaApi.getEncounterDeckObjects()
    local mythosArea = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "MythosArea")

    MythosAreaApi.reshuffleEncounterDeck(true)

    if direction == "west" then
      CoroutineLib.yieldSeconds(0.5)

      broadcastToAll("Shuffled 'Pilgrims' encounter set and discard pile into the encounter deck.")
      local pilgrims = chest.takeObject({ guid = "d7784d", rotation = MythosAreaApi.getEncounterDiscardRotation():setAt("z", 180)})
      DeckLib.placeOrMergeIntoDeck(pilgrims, MythosAreaApi.getEncounterDeckPosition(), nil, false, true)

      CoroutineLib.yieldSeconds(1)
    end

    -- take two locations out of set-aside box
    local setAsideLocations = chest.takeObject({ guid = APIARY_DATA[direction].apiaryLocations, position = mythosArea.positionToWorld(Vector(1.07,0.117,-0.43)), rotation = mythosArea.getRotation():setAt("z", 180) })
    CoroutineLib.yieldSeconds(1.5)

    local card2 = setAsideLocations.takeObject({ guid = APIARY_DATA[direction].locationCard2, position = mythosArea.positionToWorld(Vector(0.461,0.117,-0.43)) })
    local card3 = setAsideLocations.takeObject({ guid = APIARY_DATA[direction].locationCard3, position = mythosArea.positionToWorld(Vector(0.538,0.117,-0.43)) })
    CoroutineLib.yieldSeconds(1.5)

    local name2 = card2.getName()
    local name3 = card3.getName()

    local newLocations = group({ card2, card3 })[1]
    CoroutineLib.yieldSeconds(1.5)

    DeckLib.shuffleIntoTopOrBottomX(newLocations, encounterDeck.draw, true, 10)

    broadcastToAll("Shuffled '" .. name2 .. "' and '" .. name3 .. "' into the bottom 10 cards of the encounter deck.")
    chest.putObject(setAsideLocations)
    increaseSetupStep()
  end

  CoroutineLib.start(setup2Coroutine)
end

function setup3()
  function setup3Coroutine()
    local chest = MythosAreaApi.getSetAsideChest()
    -- shuffle encounter deck
    local encounterDeck = MythosAreaApi.getEncounterDeckObjects()
    MythosAreaApi.reshuffleEncounterDeck(true)

    -- take out final two locations from the set-aside box
    local setAsideLocations = chest.takeObject({ guid = APIARY_DATA[direction].apiaryLocations, position = mythosArea.positionToWorld(Vector(1.07,0.117,-0.43)), rotation = mythosArea.getRotation():setAt("z", 180) })
    CoroutineLib.yieldSeconds(1)

    DeckLib.shuffleIntoTopOrBottomX(setAsideLocations, encounterDeck.draw, true, 10)
    broadcastToAll("Shuffled '" ..
      APIARY_DATA[direction].locationCard4Name ..
      "' and 'Churning Chasm' into the bottom 10 cards of the encounter deck.")
    increaseSetupStep()
  end

  CoroutineLib.start(setup3Coroutine)
end
