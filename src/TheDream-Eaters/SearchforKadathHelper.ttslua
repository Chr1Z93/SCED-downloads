local deckLib           = require("util/DeckLib")
local guidReferenceApi  = require("core/GUIDReferenceApi")
local MythosAreaApi     = require("mythos/MythosAreaApi")
local playAreaApi       = require("playarea/PlayAreaApi")
local searchLib         = require("util/SearchLib")
local victoryDisplayApi = require("mythos/VictoryDisplayApi")

PLAYAREA                = {
  position = Vector(-25, 4, 0),
  rotation = Vector(0, 90, 0),
  scale    = Vector(37, 5, 43)
}

SET_ASIDE               = {
  position = Vector(-2.52, 2, 14.87),
  rotation = Vector(0, 270, 0)
}

RFG                     = {
  position = Vector(-6.01, 1.61, 14.90),
  rotation = Vector(0, 270, 0)
}

ROTATION                = Vector(0, 270, 180)
RIGHT                   = Vector(0, 0, -2.5)
LEFT                    = Vector(0, 0, 2.5)

CRAWLING_MIST           = "aa76f7"

SKAI                    = 1
ORIAB                   = 2
MNAR                    = 3
FORBIDDEN_LANDS         = 4
TIMELESS_REALM          = 5

LOCATIONS               = {
  -- Skai
  { name = "Ulthar",                         region = SKAI },
  { name = "Skai River",                     region = SKAI },
  { name = "Dylath-Leen",                    region = SKAI },
  -- Oriab
  { name = "Baharna",                        region = ORIAB,           position = { -36.77, 1.6, 0 } },
  { name = "Mt. Ngranek",                    region = ORIAB,           position = { -43.37, 1.6, 0 } },
  { name = "Nameless Ruins",                 region = ORIAB,           position = { -43.37, 1.6, 7.57 } },
  -- Mnar
  { name = "Kadatheron",                     region = MNAR,            position = { -30.22, 1.6, 7.57 } },
  { name = "Ruins of Ib",                    region = MNAR,            position = { -36.77, 1.6, 15.19 } },
  { name = "Sarnath",                        region = MNAR,            position = { -30.22, 1.6, 15.19 } },
  -- Forbidden Lands
  { name = "Ilek-Vad",                       region = FORBIDDEN_LANDS, position = { -17.12, 1.6, 0 } },
  { name = "Zulan-Thek",                     region = FORBIDDEN_LANDS, position = { -17.12, 1.6, 15.19 } },
  { name = "Forbidden Lands",                region = FORBIDDEN_LANDS, position = { -17.12, 1.6, 7.57 } },
  -- Timeless Realm
  { name = "Serannian",                      region = TIMELESS_REALM,  position = { -23.68, 1.6, -15.28 } },
  { name = "CelephaÃ¯s",                      region = TIMELESS_REALM,  position = { -30.22, 1.6, -15.28 } },
  { name = "Hazuth-Kleg",                    region = TIMELESS_REALM,  position = { -36.77, 1.64, -15.28 } },
  { name = "City-Which-Appears-On-No-Map",   region = TIMELESS_REALM, },
  { name = "Temple of Unattainable Desires", region = TIMELESS_REALM, }
}

RFG_CARDS               = {
  "Pack of Vooniths",
  "Cats of Ulthar",
  "Zoog Burrow",
  "Stealthy Zoog",
  "Furtive Zoog",
  "Inconspicuous Zoog"
}

function onLoad()
  self.createButton({
    label = "Oriab",
    click_function = "setup_oriab",
    function_owner = self,
    position = { 0, 0.1, -1.8 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
  self.createButton({
    label = "Mnar",
    click_function = "setup_mnar",
    function_owner = self,
    position = { 0, 0.1, -0.6 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
  self.createButton({
    label = "Forbidden\nLands",
    click_function = "setup_forbidden_lands",
    function_owner = self,
    position = { 0, 0.1, 0.6 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
  self.createButton({
    label = "Timeless\nRealm",
    click_function = "setup_timeless_realm",
    function_owner = self,
    position = { 0, 0.1, 1.8 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })

  chest = MythosAreaApi.getSetAsideChest()
  ENCOUNTER_DECK_POS = Global.getTable("ENCOUNTER_DECK_POS")
  ENCOUNTER_DECK_SPAWN_POS = Vector(ENCOUNTER_DECK_POS) + Vector(0, 2.5, 0)
  ENCOUNTER_DECK_DISCARD_POSITION = Global.getTable("ENCOUNTER_DECK_DISCARD_POSITION")
  ACT1_ADVANCED = false
  makeIndexes()
end

function makeIndexes()
  nameMap = {}
  for i, loc in ipairs(LOCATIONS) do
    if (loc.name == "City-Which-Appears-On-No-Map" or loc.name == "Temple of Unattainable Desires") then
      loc.position = chest.getPosition() + Vector(0, i - 10, 0)
    end
    nameMap[loc.name] = loc
  end

  rfgMap = {}
  for i, card in ipairs(RFG_CARDS) do
    rfgMap[card] = true
  end
end

-- click functions for buttons
function setup_oriab(_, color) setup(ORIAB, color) end

function setup_mnar(_, color) setup(MNAR, color) end

function setup_forbidden_lands(_, color) setup(FORBIDDEN_LANDS, color) end

function setup_timeless_realm(_, color)
  setup(TIMELESS_REALM, color)
  local card = chest.takeObject({ guid = CRAWLING_MIST })
  deckLib.placeOrMergeIntoDeck(card, ENCOUNTER_DECK_POS, ROTATION)
end

function setup(region, color)
  -- remove clues from players
  local masterClueCounter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "MasterClueCounter")
  if masterClueCounter ~= nil then
    masterClueCounter.call("removeAllPlayerClues")
  end

  -- spawn locationDeck if not yet done
  if locationDeck == nil then
    locationDeck = chest.takeObject({
      guid     = "c5ed15", -- locations
      smooth   = false,
      position = SET_ASIDE.position,
      rotation = SET_ASIDE.rotation
    })
  end

  Wait.time(function() MythosAreaApi.reshuffleEncounterDeck() end, 0.1)
  Wait.time(function() cleanZone() end, 1)
  Wait.time(function() placeLocations(region) end, 2)
  Wait.time(function() shuffleDeck() end, 2)
end

function shuffleDeck()
  local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()

  if encounterDeckObjects.draw and encounterDeckObjects.topCard then
    encounterDeckObjects.draw.putObject(encounterDeckObjects.topCard)
    encounterDeckObjects.draw.shuffle()
    MythosAreaApi.flipTopCardFromDeck(1)
  elseif encounterDeckObjects.draw then
    encounterDeckObjects.draw.shuffle()
  end
end

function cleanZone()
  -- clean the encounter deck
  if not ACT1_ADVANCED then
    local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()
    if encounterDeckObjects.draw and encounterDeckObjects.topCard then
      encounterDeckObjects.draw.putObject(encounterDeckObjects.topCard)
    end

    local cardsToRemove = {}
    for i, card in ipairs(encounterDeckObjects.draw.getObjects()) do
      if rfgMap[card.name] then
        table.insert(cardsToRemove, card.index)
      end
    end

    for i = #cardsToRemove, 1, -1 do
      encounterDeckObjects.draw.takeObject({
        position = RFG.position,
        rotation = RFG.rotation,
        smooth = false,
        index = cardsToRemove[i]
      })
    end
  end

  -- clean the play area
  local zone = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  for i, obj in ipairs(zone.getObjects()) do
    -- remove certain cards from game
    if not ACT1_ADVANCED then
      if obj.type == "Card" and rfgMap[obj.getName()] then
        obj.setRotation(RFG.rotation)
        obj.setPosition(RFG.position)
        goto continue
      elseif obj.type == "Deck" then
        local cardsToRemove = {}
        for _, card in ipairs(obj.getObjects()) do
          if rfgMap[card.name] then
            table.insert(cardsToRemove, card.index)
          end
        end

        for i = #cardsToRemove, 1, -1 do
          obj.takeObject({
            position = RFG.position,
            rotation = RFG.rotation,
            smooth = false,
            index = cardsToRemove[i]
          })
        end
        goto continue
      end
    end

    -- move enemies and treacheries to the encounter deck
    if obj.type == "Card" and obj.hasTag("ScenarioCard") and not obj.hasTag("Location") then
      deckLib.placeOrMergeIntoDeck(obj, ENCOUNTER_DECK_POS, ROTATION)
    end

    -- move locations to victory display or set aside
    if obj.type == "Card" then
      local md = JSON.decode(obj.getGMNotes()) or {}
      local locationFront = md.locationFront or {}
      if locationFront.victory and not obj.is_face_down and not cardHasClues(obj) then
        playAreaApi.maybeUntrackLocation(obj)
        victoryDisplayApi.placeCard(obj)
      else
        obj.setPosition(SET_ASIDE.position + Vector(0, 1, 0))
      end
    end

    -- delete clues and doom tokens
    if obj.memo == "clueDoom" then
      obj.destruct()
    end

    ::continue::
  end

  if not ACT1_ADVANCED then -- add in copies of Priest of A Thousand Masks
    local card = chest.takeObject({ guid = "678204" })
    deckLib.placeOrMergeIntoDeck(card, ENCOUNTER_DECK_POS, ROTATION, _, true)
  end

  ACT1_ADVANCED = true
end

function placeLocations(region)
  -- take locations from locationDeck if region matches
  for i, loc in ipairs(LOCATIONS) do
    if loc.region == region then
      for j, card in ipairs(locationDeck.getObjects()) do
        if loc.name == card.name then
          locationDeck.takeObject({
            position = loc.position,
            smooth   = false,
            index    = card.index
          })
          break
        end
      end
    end
  end

  local numPlayers = playAreaApi.getInvestigatorCount()

  if lastRegion == TIMELESS_REALM then
    placeEnemyFromEncounterDeck("06086", "The Crawling Mist", RFG.position, Vector({ 0, 1, 0 }))
  end

  if region == ORIAB then
    placeEnemyFromEncounterDeck("06152", "Nightriders", nameMap["Mt. Ngranek"].position, RIGHT)
    if numPlayers >= 3 then
      placeEnemyFromEncounterDeck("06152", "Nightriders", nameMap["Nameless Ruins"].position, LEFT)
    end
    broadcastToAll("Place each investigator at Baharna. Add swarm cards to enemies.")
  elseif region == MNAR then
    placeEnemyFromContainer("06148", "Beings of Ib", chest, nameMap["Ruins of Ib"].position, RIGHT)
    broadcastToAll("Place each investigator at Kadatheron. Add swarm cards to enemies.")
  elseif region == FORBIDDEN_LANDS then
    placeEnemyFromContainer("06146", "Stalking Manticore", chest, nameMap["Forbidden Lands"].position, RIGHT)
    placeEnemyFromContainer("06147", "Horde of Night", chest, nameMap["Zulan-Thek"].position, RIGHT)
    broadcastToAll("Place each investigator at Ilek-Vad. Add swarm cards to enemies.")
  elseif region == TIMELESS_REALM then
    placeEnemyFromEncounterDeck("06149", "Priest of a Thousand Masks", nameMap["Hazuth-Kleg"].position, LEFT)
    if numPlayers >= 3 then
      placeEnemyFromEncounterDeck("06149", "Priest of a Thousand Masks", nameMap["CelephaÃ¯s"].position, LEFT)
    end
    broadcastToAll("Place each investigator at CelephaÃ¯s.")
  end

  lastRegion = region
end

function placeEnemyFromEncounterDeck(id, name, position, side)
  local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()

  if encounterDeckObjects.topCard and encounterDeckObjects.topCard.getName() == name then
    encounterDeckObjects.topCard.setPosition(Vector(position) + side)
    encounterDeckObjects.topCard.setRotation({ 0, 270, 0 })
    MythosAreaApi.flipTopCardFromDeck()
    return
  end

  if encounterDeckObjects.draw then
    for i, card in ipairs(encounterDeckObjects.draw.getObjects()) do
      local md = JSON.decode(card.gm_notes) or {}
      if md.id == id then
        encounterDeckObjects.draw.takeObject({
          index    = card.index,
          position = Vector(position) + side,
          rotation = { 0, 270, 0 },
          smooth   = false
        })
        return
      end
    end
  end

  broadcastToAll("Couldn't find " .. name, "Orange")
end

function placeEnemyFromContainer(id, name, container, position, side)
  for i, card in ipairs(container.getObjects()) do
    local md = JSON.decode(card.gm_notes) or {}
    if md.id == id then
      container.takeObject({
        index    = card.index,
        position = Vector(position) + side,
        rotation = { 0, 270, 0 },
        smooth   = false
      })
      return
    end
  end
  broadcastToAll("Couldn't find " .. name, "Orange")
end

-- Checks if a card has clues on it
---@param card tts__Object Card to check for clues
---@return boolean hasClues True if card has clues on it
function cardHasClues(card)
  local searchResult = searchLib.onObject(card, "isClue")
  return #searchResult > 0
end
