local deckLib           = require("util/DeckLib")
local mythosAreaApi     = require("mythos/MythosAreaApi")
local playAreaApi       = require("playarea/PlayAreaApi")
local victoryDisplayApi = require("mythos/VictoryDisplayApi")

PLAYAREA                = {
  position = { x = -25, y = 4, z = 0 },
  rotation = { x = 0, y = 90, z = 0 },
  scale = { x = 37, y = 5, z = 43 }
}

SET_ASIDE               = {
  position = Vector({ x = -2.52, y = 2, z = 14.87 }),
  rotation = { x = 0, y = 270, z = 0 }
}

RFG                     = {
  position = { -6.01, 1.61, 14.90 },
  rotation = { x = 0, y = 270, z = 0 }
}

ROTATION                = { 0, 270, 180 }
RIGHT                   = Vector({ 0, 0, -2.5 })
LEFT                    = Vector({ 0, 0, 2.5 })

CRAWLING_MIST           = "aa76f7"

TOKEN_IMAGES            = {
  doom = "https://i.imgur.com/EoL7yaZ.png",
  clue = "https://steamusercontent-a.akamaihd.net/ugc/1758068501357164917/1D06F1DC4D6888B6F57124BD2AFE20D0B0DA15A8/"
}

SKAI                    = 1
ORIAB                   = 2
MNAR                    = 3
FORBIDDEN_LANDS         = 4
TIMELESS_REALM          = 5

LOCATIONS               = {
  -- Skai
  { name = "Ulthar",                         region = SKAI },
  { name = "Skai River",                     region = SKAI },
  { name = "Dylath-Leen",                    region = SKAI },
  -- Oriab
  { name = "Baharna",                        region = ORIAB,           vp = 1,                             position = { -36.77, 1.6, 0 } },
  { name = "Mt. Ngranek",                    region = ORIAB,           vp = 1,                             position = { -43.37, 1.6, 0 } },
  { name = "Nameless Ruins",                 region = ORIAB,           vp = 1,                             position = { -43.37, 1.6, 7.57 } },
  -- Mnar
  { name = "Kadatheron",                     region = MNAR,            position = { -30.22, 1.6, 7.57 } },
  { name = "Ruins of Ib",                    region = MNAR,            vp = 1,                             position = { -36.77, 1.6, 15.19 } },
  { name = "Sarnath",                        region = MNAR,            vp = 1,                             position = { -30.22, 1.6, 15.19 } },
  -- Forbidden Lands
  { name = "Ilek-Vad",                       region = FORBIDDEN_LANDS, vp = 1,                             position = { -17.12, 1.6, 0 } },
  { name = "Zulan-Thek",                     region = FORBIDDEN_LANDS, position = { -17.12, 1.6, 15.19 } },
  { name = "Forbidden Lands",                region = FORBIDDEN_LANDS, position = { -17.12, 1.6, 7.57 } },
  -- Timeless Realm
  { name = "Serannian",                      region = TIMELESS_REALM,  vp = 1,                             position = { -23.68, 1.6, -15.28 } },
  { name = "CelephaÃ¯s",                      region = TIMELESS_REALM,  vp = 1,                             position = { -30.22, 1.6, -15.28 } },
  { name = "Hazuth-Kleg",                    region = TIMELESS_REALM,  position = { -36.77, 1.64, -15.28 } },
  { name = "City-Which-Appears-On-No-Map",   region = TIMELESS_REALM,  vp = 2 },
  { name = "Temple of Unattainable Desires", region = TIMELESS_REALM,  vp = 1 }
}

RFG_CARDS               = { "Pack of Vooniths", "Cats of Ulthar", "Zoog Burrow", "Stealthy Zoog", "Furtive Zoog",
  "Inconspicuous Zoog" }

function onLoad()
  self.createButton({
    label = "Oriab",
    click_function = "setup_oriab",
    function_owner = self,
    position = { 0, 0.1, -1.8 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
  self.createButton({
    label = "Mnar",
    click_function = "setup_mnar",
    function_owner = self,
    position = { 0, 0.1, -0.6 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
  self.createButton({
    label = "Forbidden\nLands",
    click_function = "setup_forbidden_lands",
    function_owner = self,
    position = { 0, 0.1, 0.6 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })
  self.createButton({
    label = "Timeless\nRealm",
    click_function = "setup_timeless_realm",
    function_owner = self,
    position = { 0, 0.1, 1.8 },
    height = 280,
    width = 600,
    scale = { x = 1.75, y = 1.75, z = 1.75 },
    font_size = 100
  })

  chest = getObjectFromGUID("7a167a")
  ENCOUNTER_DECK_POS = Global.getTable("ENCOUNTER_DECK_POS")
  ENCOUNTER_DECK_SPAWN_POS = Vector(ENCOUNTER_DECK_POS) + Vector(0, 2.5, 0)
  ENCOUNTER_DECK_DISCARD_POSITION = Global.getTable("ENCOUNTER_DECK_DISCARD_POSITION")
  ACT1_ADVANCED = false
  COUNTER = getObjectFromGUID('f182ee')
  makeIndexes()
end

function makeIndexes()
  nameMap = {}
  for i, loc in ipairs(LOCATIONS) do
    if (loc.name == "City-Which-Appears-On-No-Map" or loc.name == "Temple of Unattainable Desires") then
      loc.position = chest.getPosition() + Vector(0, i - 10, 0)
    end
    nameMap[loc.name] = loc
  end

  rfgMap = {}
  for i, card in ipairs(RFG_CARDS) do
    rfgMap[card] = true
  end
end

-- click functions for buttons
function setup_oriab(_, color) setup(ORIAB, color) end

function setup_mnar(_, color) setup(MNAR, color) end

function setup_forbidden_lands(_, color) setup(FORBIDDEN_LANDS, color) end

function setup_timeless_realm(_, color)
  setup(TIMELESS_REALM, color)
  local card = chest.takeObject({ guid = CRAWLING_MIST })
  deckLib.placeOrMergeIntoDeck(card, ENCOUNTER_DECK_POS, ROTATION)
end

function setup(region, color)
  -- remove clues from players
  local masterClueCounter = getObjectFromGUID("4a3aa4")
  if masterClueCounter ~= nil then
    masterClueCounter.call("removeAllPlayerClues")
  end

  -- spawn locationDeck if not yet done
  if locationDeck == nil then
    locationDeck = chest.takeObject({
      guid = "c5ed15", -- locations
      smooth = false,
      position = SET_ASIDE.position,
      rotation = SET_ASIDE.rotation
    })
  end
  Wait.time(function() mythosAreaApi.reshuffleEncounterDeck() end, 0.1)
  Wait.time(function() cleanZone() end, 1)
  Wait.time(function() placeLocations(region) end, 2)
  Wait.time(function() mythosAreaApi.getEncounterDeck().shuffle() end, 0.1)
end

function cleanZone()
  -- clean the encounter deck
  if not ACT1_ADVANCED then
    local deck = mythosAreaApi.getEncounterDeck()
    local cardsToRemove = {}

    for i, card in ipairs(deck.getObjects()) do
      if rfgMap[card.name] then
        table.insert(cardsToRemove, card.index)
      end
    end

    for i = #cardsToRemove, 1, -1 do
      deck.takeObject({
        position = RFG.position,
        rotation = RFG.rotation,
        smooth = false,
        index = cardsToRemove[i]
      })
    end
  end

  -- clean the play area
  local zone = getObjectFromGUID("a2f932")
  for i, obj in ipairs(zone.getObjects()) do
    local loc = nameMap[obj.getName()]

    -- remove certain cards from game
    if not ACT1_ADVANCED then
      if obj.tag == "Card" and rfgMap[obj.getName()] then
        obj.setRotation(RFG.rotation)
        obj.setPosition(RFG.position)
        goto continue
      elseif obj.tag == "Deck" then
        local cardsToRemove = {}
        for _, card in ipairs(obj.getObjects()) do
          if rfgMap[card.name] then
            table.insert(cardsToRemove, card.index)
          end
        end
        for i = #cardsToRemove, 1, -1 do
          obj.takeObject({
            position = RFG.position,
            rotation = RFG.rotation,
            smooth = false,
            index = cardsToRemove[i]
          })
        end
        goto continue
      end
    end

    -- move enemies and treacheries to the encounter deck
    if obj.tag == "Card" and obj.hasTag("ScenarioCard") and not obj.hasTag("Location") then
      deckLib.placeOrMergeIntoDeck(obj, ENCOUNTER_DECK_POS, ROTATION)
    end

    -- move locations to victory display or set aside
    if obj.tag == "Card" and loc ~= nil then
      if loc.vp ~= nil and not obj.is_face_down and not hasClues(obj) then
        playAreaApi.maybeUntrackLocation(obj)
        victoryDisplayApi.placeCard(obj)
      else
        obj.setPosition(SET_ASIDE.position + Vector(0, 1, 0))
      end
    end

    -- delete clues and doom tokens
    if obj.tag == "Tile" then
      local props = obj.getCustomObject()
      if (props.image == TOKEN_IMAGES.clue and props.image_bottom == TOKEN_IMAGES.doom) or
          (props.image == TOKEN_IMAGES.doom and props.image_bottom == TOKEN_IMAGES.clue)
      then
        obj.destruct()
      end
    end

    ::continue::
  end

  if not ACT1_ADVANCED then -- add in copies of Priest of A Thousand Masks
    local card = chest.takeObject({ guid = "678204" })
    deckLib.placeOrMergeIntoDeck(card, ENCOUNTER_DECK_POS, ROTATION, _, true)
  end

  ACT1_ADVANCED = true
end

function placeLocations(region)
  -- take locations from locationDeck if region matches
  for i, loc in ipairs(LOCATIONS) do
    if loc.region == region then
      for j, card in ipairs(locationDeck.getObjects()) do
        if loc.name == card.name then
          locationDeck.takeObject({
            position = loc.position,
            smooth = false,
            index = card.index
          })
          break
        end
      end
    end
  end

  local numPlayers = COUNTER.getVar("val")
  local deck = mythosAreaApi.getEncounterDeck()

  if lastRegion == TIMELESS_REALM then
    placeEnemy("The Crawling Mist", deck, RFG.position, Vector({ 0, 1, 0 }))
  end

  if region == ORIAB then
    placeEnemy("Nightriders", deck, nameMap["Mt. Ngranek"].position, RIGHT)
    if numPlayers >= 3 then
      placeEnemy("Nightriders", deck, nameMap["Nameless Ruins"].position, LEFT)
    end
    broadcastToAll("Place each investigator at Baharna. Add swarm cards to enemies.")
  elseif region == MNAR then
    placeEnemy("Beings of Ib", chest, nameMap["Ruins of Ib"].position, RIGHT)
    broadcastToAll("Place each investigator at Kadatheron. Add swarm cards to enemies.")
  elseif region == FORBIDDEN_LANDS then
    placeEnemy("Stalking Manticore", chest, nameMap["Forbidden Lands"].position, RIGHT)
    placeEnemy("Horde of Night", chest, nameMap["Zulan-Thek"].position, RIGHT)
    broadcastToAll("Place each investigator at Ilek-Vad. Add swarm cards to enemies.")
  elseif region == TIMELESS_REALM then
    placeEnemy("Priest of a Thousand Masks", deck, nameMap["Hazuth-Kleg"].position, LEFT)
    if numPlayers >= 3 then
      placeEnemy("Priest of a Thousand Masks", deck, nameMap["CelephaÃ¯s"].position, LEFT)
    end
    broadcastToAll("Place each investigator at CelephaÃ¯s.")
  end

  lastRegion = region
end

function placeEnemy(name, container, position, side)
  for i, card in ipairs(container.getObjects()) do
    if card.name == name then
      container.takeObject({
        index = card.index,
        position = Vector(position) + side,
        rotation = { 0, 270, 0 },
        smooth = false
      })
      return
    end
  end
  broadcastToAll("Couldn't find " .. name, "Orange")
end

function hasClues(card)
  local objs = Physics.cast({
    origin = card.getPosition(),
    direction = { 0, 1, 0 },
    type = 2,
    size = { 4, 5, 4 },
    max_distance = 0
  })
  local cluesFound = false
  for i, v in ipairs(objs) do
    local obj = v.hit_object
    if obj.tag == "Tile" then
      local props = obj.getCustomObject()
      if (props.image == TOKEN_IMAGES.clue and props.image_bottom == TOKEN_IMAGES.doom)
          or (props.image == TOKEN_IMAGES.doom and props.image_bottom == TOKEN_IMAGES.clue)
      then
        cluesFound = true
        break
      end
    end
  end
  return cluesFound
end
