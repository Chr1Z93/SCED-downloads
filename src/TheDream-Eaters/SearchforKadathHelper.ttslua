local CoroutineLib      = require("util/CoroutineLib")
local GUIDReferenceApi  = require("core/GUIDReferenceApi")
local MythosAreaApi     = require("mythos/MythosAreaApi")
local PlayAreaApi       = require("playarea/PlayAreaApi")
local SearchLib         = require("util/SearchLib")
local VictoryDisplayApi = require("mythos/VictoryDisplayApi")

local SET_ASIDE         = {
  position = Vector(-2.52, 2, 14.87),
  rotation = Vector(0, 270, 0)
}

local RFG               = {
  position = Vector(-6, 1.6, 14.9),
  rotation = Vector(0, 270, 0)
}

local RIGHT             = Vector(0, 0, -2.5)
local LEFT              = Vector(0, 0, 2.5)

local CRAWLING_MIST     = "aa76f7"

local LOCATIONS         = {
  -- Skai
  { name = "Ulthar",                         id = "06127", region = "Skai" },
  { name = "Skai River",                     id = "06128", region = "Skai" },
  { name = "Dylath-Leen",                    id = "06129", region = "Skai" },
  -- Oriab
  { name = "Baharna",                        id = "06136", region = "Oriab",           position = { -36.77, 1.6, 0 } },
  { name = "Mt. Ngranek",                    id = "06137", region = "Oriab",           position = { -43.37, 1.6, 0 } },
  { name = "Nameless Ruins",                 id = "06138", region = "Oriab",           position = { -43.37, 1.6, 7.57 } },
  -- Mnar
  { name = "Kadatheron",                     id = "06130", region = "Mnar",            position = { -30.22, 1.6, 7.57 } },
  { name = "Sarnath",                        id = "06131", region = "Mnar",            position = { -30.22, 1.6, 15.19 } },
  { name = "Ruins of Ib",                    id = "06132", region = "Mnar",            position = { -36.77, 1.6, 15.19 } },
  -- Forbidden Lands
  { name = "Ilek-Vad",                       id = "06133", region = "Forbidden Lands", position = { -17.12, 1.6, 0 } },
  { name = "Forbidden Lands",                id = "06134", region = "Forbidden Lands", position = { -17.12, 1.6, 7.57 } },
  { name = "Zulan-Thek",                     id = "06135", region = "Forbidden Lands", position = { -17.12, 1.6, 15.19 } },
  -- Timeless Realm
  { name = "Celepha√Øs",                      id = "06139", region = "Timeless Realm",  position = { -30.22, 1.6, -15.28 } },
  { name = "Serannian",                      id = "06140", region = "Timeless Realm",  position = { -23.68, 1.6, -15.28 } },
  { name = "Hazuth-Kleg",                    id = "06141", region = "Timeless Realm",  position = { -36.77, 1.6, -15.28 } },
  { name = "Temple of Unattainable Desires", id = "06142", region = "Timeless Realm", },
  { name = "City-Which-Appears-On-No-Map",   id = "06143", region = "Timeless Realm", }
}

local RFG_IDS           = {
  ["06151"] = true, -- "Pack of Vooniths"
  ["06145"] = true, -- "Cats of Ulthar"
  ["06109"] = true, -- "Zoog Burrow"
  ["06108"] = true, -- "Inconspicuous Zoog"
  ["06107"] = true, -- "Stealthy Zoog"
  ["06106"] = true, -- "Furtive Zoog"
  ["06086"] = true, -- "The Crawling Mist"
  ["06146"] = true, -- "Stalking Manticore"
  ["06147"] = true, -- "Horde of Night"
  ["06148"] = true  -- "Beings of Ib"
}

local visited           = {}

local buttonParameters  = {
  function_owner = self,
  height         = 1000,
  width          = 2100,
  font_size      = 375,
  scale          = { x = 0.5, y = 0.5, z = 0.5 }
}

function updateSave()
  self.script_state = JSON.encode({
    locationDeckGuid = locationDeckGuid,
    visited          = visited
  })
end

function onLoad(saveData)
  if saveData and saveData ~= "" then
    local loadedData = JSON.decode(saveData)
    locationDeckGuid = loadedData.locationDeckGuid
    visited          = loadedData.visited or {}

    if locationDeckGuid then
      Wait.time(function() locationDeck = getObjectFromGUID(locationDeckGuid) end, 0.25)
    end
  end

  self.addContextMenuItem("Reset state",
    function()
      locationDeckGuid = nil
      visited          = {}
      buttonCreation()
      updateSave()
    end
  )

  buttonCreation()

  -- delay to allow mythos area and chest to spawn
  Wait.time(function()
    addDynamicPositions()
    ready = true
  end, 1)
end

function buttonCreation()
  self.clearButtons()

  for i, region in ipairs({ "Oriab", "Mnar", "Forbidden Lands", "Timeless Realm" }) do
    local funcName                  = "setup_" .. string.lower(region):gsub(" ", "_")
    _G[funcName]                    = function() maybeSetup(region) end
    buttonParameters.click_function = funcName
    buttonParameters.label          = region:gsub(" ", "\n")
    buttonParameters.position       = Vector(0, 0.1, -3 + 1.2 * i)
    buttonParameters.color          = visited[region] and { r = 0.5, g = 0.5, b = 0.5 } or { r = 1, g = 1, b = 1 }
    self.createButton(buttonParameters)
  end
end

function addDynamicPositions()
  local chest = MythosAreaApi.getSetAsideChest()
  for i, loc in ipairs(LOCATIONS) do
    if (loc.name == "City-Which-Appears-On-No-Map" or loc.name == "Temple of Unattainable Desires") then
      loc.position = chest.getPosition() + Vector(0, i - 10, 0)
    end
  end
end

function maybeSetup(region)
  if not ready then
    broadcastToAll("Still initializing, try again in a few seconds.")
  elseif visited[region] then
    broadcastToAll(region .. " was already visited.")
  else
    visited[region] = true
    buttonCreation()
    updateSave()
    setup(region)
  end
end

function setup(region)
  function KadathCoroutine()
    MythosAreaApi.reshuffleEncounterDeck(true)
    CoroutineLib.yieldSeconds(0.5)

    -- remove clues from players
    local masterClueCounter = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "MasterClueCounter")
    if masterClueCounter ~= nil then
      masterClueCounter.call("removeAllPlayerClues")
    end

    -- spawn locationDeck if not yet done
    local chest = MythosAreaApi.getSetAsideChest()
    if locationDeck == nil then
      locationDeck = chest.takeObject({
        guid     = "c5ed15", -- locations
        smooth   = false,
        position = SET_ASIDE.position,
        rotation = SET_ASIDE.rotation
      })
      locationDeckGuid = locationDeck.getGUID()
      CoroutineLib.yieldSeconds(0.5)
    end

    local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()

    if region == "Timeless Realm" then
      local card = chest.takeObject({ guid = CRAWLING_MIST })
      encounterDeckObjects.draw.putObject(card)
      CoroutineLib.yieldSeconds(2)
    end

    cleanZone()
    CoroutineLib.yieldSeconds(0.5)

    placeLocationsAndEnemies(region)
    CoroutineLib.yieldSeconds(0.5)

    -- shuffle encounter deck
    if encounterDeckObjects.topCard then
      encounterDeckObjects.draw.putObject(encounterDeckObjects.topCard)
      Wait.time(MythosAreaApi.flipTopCardFromDeck, 1)
    end
    encounterDeckObjects.draw.shuffle()
    CoroutineLib.yieldSeconds(0.5)
  end

  CoroutineLib.start(KadathCoroutine)
end

function cleanZone()
  -- clean the encounter deck
  local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()
  if encounterDeckObjects.topCard then
    encounterDeckObjects.draw.putObject(encounterDeckObjects.topCard)
  end

  removeCardsFromDeck(encounterDeckObjects.draw)

  -- clean the play area
  local zone = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  for _, obj in ipairs(zone.getObjects()) do
    -- remove certain cards from game
    if obj.type == "Card" then
      local md = getMetadata(obj)
      if md.id and RFG_IDS[md.id] then
        obj.setRotation(RFG.rotation)
        obj.setPosition(RFG.position)
        goto continue
      end
    elseif obj.type == "Deck" then
      removeCardsFromDeck(obj)
      goto continue
    end

    if obj.type == "Card" and obj.hasTag("ScenarioCard") then
      local md = getMetadata(obj)
      -- move enemies and treacheries to the encounter deck
      if  md.type == "Enemy" or md.type == "Treachery" then
        encounterDeckObjects.draw.putObject(obj)
      elseif obj.hasTag("Location") then
        -- move locations to victory display or set aside
        if md.locationFront and md.locationFront.victory and not obj.is_face_down and not cardHasClues(obj) then
          PlayAreaApi.maybeUntrackLocation(obj)
          VictoryDisplayApi.placeCard(obj)
        else
          obj.setPosition(SET_ASIDE.position + Vector(0, 1, 0))
        end
      end
    end

    -- delete clues and doom tokens
    if obj.memo == "clueDoom" then
      obj.destruct()
    end

    ::continue::
  end

  -- add in copies of Priest of A Thousand Masks
  local chest = MythosAreaApi.getSetAsideChest()
  for _, object in ipairs(chest.getObjects()) do
    if object.guid == "678204" then
      local priests = chest.takeObject({ index = object.index })
      encounterDeckObjects.draw.putObject(priests)
      CoroutineLib.yieldSeconds(1.5)
      break
    end
  end
end

-- loop in reverse since we are removing cards from the deck and that changes the index
function removeCardsFromDeck(deck)
  local deckInfo = deck.getObjects()
  for i = #deckInfo, 1, -1 do
    local card = deckInfo[i]
    local md = getMetadata(card)
    if md.id and RFG_IDS[md.id] then
      deck.takeObject({
        position = RFG.position,
        rotation = RFG.rotation,
        smooth   = false,
        index    = card.index
      })
    end
  end
end

function placeLocationsAndEnemies(region)
  -- take locations from locationDeck if region matches
  for i, loc in ipairs(LOCATIONS) do
    if loc.region == region then
      for j, card in ipairs(locationDeck.getObjects()) do
        local md = getMetadata(card)
        if md.id and md.id == loc.id then
          locationDeck.takeObject({
            position = loc.position,
            rotation = Vector(0, 270, 0),
            smooth   = false,
            index    = card.index
          })
          break
        end
      end
    end
  end

  local chest = MythosAreaApi.getSetAsideChest()

  if region == "Oriab" then
    placeEnemyFromEncounterDeck("06152", "Nightriders", getLocationPositionByName("Mt. Ngranek"), RIGHT)
    if PlayAreaApi.getInvestigatorCount() >= 3 then
      placeEnemyFromEncounterDeck("06152", "Nightriders", getLocationPositionByName("Nameless Ruins"), LEFT)
    end
    broadcastToAll("Place each investigator at Baharna. Add swarm cards to enemies.")
  elseif region == "Mnar" then
    placeEnemyFromContainer("06148", "Beings of Ib", chest, getLocationPositionByName("Ruins of Ib"), RIGHT)
    broadcastToAll("Place each investigator at Kadatheron. Add swarm cards to enemies.")
  elseif region == "Forbidden Lands" then
    placeEnemyFromContainer("06146", "Stalking Manticore", chest, getLocationPositionByName("Forbidden Lands"), RIGHT)
    placeEnemyFromContainer("06147", "Horde of Night", chest, getLocationPositionByName("Zulan-Thek"), RIGHT)
    broadcastToAll("Place each investigator at Ilek-Vad. Add swarm cards to enemies.")
  elseif region == "Timeless Realm" then
    placeEnemyFromEncounterDeck("06149", "Priest of a Thousand Masks", getLocationPositionByName("Hazuth-Kleg"), LEFT)
    if PlayAreaApi.getInvestigatorCount() >= 3 then
      placeEnemyFromEncounterDeck("06149", "Priest of a Thousand Masks", getLocationPositionByName("Celepha√Øs"), LEFT)
    end
    broadcastToAll("Place each investigator at Celepha√Øs.")
  end
end

function placeEnemyFromEncounterDeck(id, name, position, side)
  side = side or Vector(0, 1, 0)
  local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()
  if encounterDeckObjects.topCard then
    local md = getMetadata(encounterDeckObjects.topCard)
    if md.id and md.id == id then
      encounterDeckObjects.topCard.setPosition(Vector(position) + side)
      encounterDeckObjects.topCard.setRotation({ 0, 270, 0 })
      MythosAreaApi.flipTopCardFromDeck()
      return
    end
  end
  placeEnemyFromContainer(id, name, encounterDeckObjects.draw, position, side)
end

function placeEnemyFromContainer(id, name, container, position, side)
  if container then
    side = side or Vector(0, 1, 0)
    for i, card in ipairs(container.getObjects()) do
      local md = getMetadata(card)
      if md.id and md.id == id then
        container.takeObject({
          index    = card.index,
          position = Vector(position) + side,
          rotation = { 0, 270, 0 },
          smooth   = false
        })
        return
      end
    end
  end
  broadcastToAll("Couldn't find " .. name, "Orange")
end

-- Checks if a card has clues on it
---@param card tts__Object Card to check for clues
---@return boolean hasClues True if card has clues on it
function cardHasClues(card)
  local searchResult = SearchLib.onObject(card, "isClue")
  return #searchResult > 0
end

function getMetadata(objectOrNotes)
  if objectOrNotes == nil then return {} end
  if type(objectOrNotes) == "string" then
    return JSON.decode(objectOrNotes) or {}
  elseif type(objectOrNotes) == "table" then
    return JSON.decode(objectOrNotes["GMNotes"] or objectOrNotes["gm_notes"]) or {}
  else
    return JSON.decode(objectOrNotes.getGMNotes()) or {}
  end
end

function getLocationPositionByName(locationName)
  for _, data in ipairs(LOCATIONS) do
    if data.name == locationName then
      return data.position
    end
  end
  return {}
end
